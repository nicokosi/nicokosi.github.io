<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Le blog de Nicokosi</title>
    <link>https://nicokosi.github.io/tags/tools/index.xml</link>
    <description>Recent content on Le blog de Nicokosi</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/nicokosi&#34;&gt;Nicolas Kosinski&lt;/a&gt; 2016</copyright>
    <atom:link href="https://nicokosi.github.io/tags/tools/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Versionner sa configuration système via des &#39;dotfiles&#39;</title>
      <link>https://nicokosi.github.io/post/dotfiles/</link>
      <pubDate>Thu, 18 Aug 2016 08:18:20 +0200</pubDate>
      
      <guid>https://nicokosi.github.io/post/dotfiles/</guid>
      <description>

&lt;h2 id=&#34;introduction-la-puissance-du-shell-avec-ou-sans-maîtrise&#34;&gt;Introduction : la puissance du shell, avec ou sans maîtrise ?&lt;/h2&gt;

&lt;p&gt;Cela fait environ deux ans que je développe sur un poste &amp;ldquo;*nix&amp;rdquo; (Linux et Mac) après avoir développé de nombreuses années sur un poste Windows. La puissance du shell est indéniable : combiner des lignes de commandes simples, bénéficier de l&amp;rsquo;historique des commandes lancées, etc. Pourquoi ne pas en profiter pour maîtriser davantage son système en &lt;strong&gt;versionnant sa configuration&lt;/strong&gt; ?&lt;/p&gt;

&lt;h2 id=&#34;présentation-dotfiles-quezako&#34;&gt;Présentation : Dotfiles, quezako ?&lt;/h2&gt;

&lt;p&gt;Pour un système *nix (Linux, Mac, etc.), la configuration du shell et des applications est généralement centralisée dans les &amp;ldquo;dotfiles&amp;rdquo;, des fichiers / répertoires dont le nom commence par un point (&amp;ldquo;dot&amp;rdquo; en anglais) et qui sont chargés en début de session interactive ou au lancement d&amp;rsquo;applications. En utilisant un gestionnaire de sources et des liens symboliques, on peut facilement &lt;strong&gt;historiser&lt;/strong&gt; et &lt;strong&gt;synchroniser&lt;/strong&gt; l&amp;rsquo;évolution de ces dotfiles afin de :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;personnaliser le système d&amp;rsquo;exploitation&lt;/strong&gt;  : options d&amp;rsquo;affichage (exemple : choisir de masquer automatiquement la barre des applications), audio, etc.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;personnaliser son shell&lt;/strong&gt; :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;positionnement de variables d&amp;rsquo;environnement (exemples : &lt;code&gt;PATH&lt;/code&gt;, &lt;code&gt;JAVA_HOME&lt;/code&gt;, &lt;code&gt;MVN_OPTIONS&lt;/code&gt; etc.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;création d&amp;rsquo;alias pour les commandes fréquemment utilisées et/ou dures à mémoriser (exemple : &lt;code&gt;alias mcist=&amp;quot;mvn clean install -DskipTests&amp;quot;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;utilisation d&amp;rsquo;un shell &amp;ldquo;sur-vitaminé&amp;rdquo; du type &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;Oh My Zsh&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;gérér les applications installées&lt;/strong&gt;, à condition d&amp;rsquo;utiliser un gestionnaire de paquets du type &lt;code&gt;homebrew&lt;/code&gt; (ou &lt;code&gt;apt&lt;/code&gt;, &lt;code&gt;OneGet&lt;/code&gt; etc.).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;comment-un-exemple-d-utilisation-du-mini-framework-holman-dotfiles&#34;&gt;Comment ? Un exemple d&amp;rsquo;utilisation du mini-framework &amp;ldquo;holman/dotfiles&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;On peut créer son propre environnement ou bien utiliser un framework &amp;ldquo;dotfiles&amp;rdquo; prêt à l&amp;rsquo;emploi car il existe de nombreux frameworks &amp;ldquo;dotfiles&amp;rdquo;, en voici une liste non-exhaustive : &lt;a href=&#34;https://dotfiles.github.io/&#34;&gt;https://dotfiles.github.io/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;J&amp;rsquo;ai pour ma part utilisé &lt;a href=&#34;https://github.com/holman/dotfiles&#34;&gt;https://github.com/holman/dotfiles&lt;/a&gt; qui permet de gérer sa configuration &lt;code&gt;ZSH&lt;/code&gt; en proposant les fonctionnalités suivantes :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;chargement automatique des fichiers nommés &lt;code&gt;*.zsh&lt;/code&gt;, quel que soit leur répertoire, favorisant ainsi une structure thématique. Par exemple, on peut distinguer la configuration du compilateur Java, dans le script &lt;code&gt;java/env.zsh&lt;/code&gt;, de la configuration du compilateur Go, dans le script &lt;code&gt;golang/env.zsh&lt;/code&gt;. Cette approche thématique remplace avantageusement l&amp;rsquo;utilisation d&amp;rsquo;un script monolithique.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;création de liens symboliques (&amp;ldquo;symlinks&amp;rdquo;) pointant vers les scripts de démarrage du shell (exemple : le fichier &lt;code&gt;$HOME/.zshrc&lt;/code&gt; pour le shell &lt;code&gt;ZSH&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Après avoir &amp;ldquo;forké&amp;rdquo; &lt;a href=&#34;https://github.com/holman/dotfile&#34;&gt;https://github.com/holman/dotfiles&lt;/a&gt;, j&amp;rsquo;ai créé deux branches :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;une pour mon ordinateur personnel sous Mac : &lt;a href=&#34;https://github.com/nicokosi/dotfiles&#34;&gt;https://github.com/nicokosi/dotfiles&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;une autre pour mon ordinateur professionnel sous Linux : &lt;a href=&#34;https://github.com/nicokosi/dotfiles/tree/vidal&#34;&gt;https://github.com/nicokosi/dotfiles/tree/vidal&lt;/a&gt;
Ces branches me permettent d&amp;rsquo;avoir deux configurations bien distinctes même si elles partagent certaines similitudes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion-dotfiles-all-the-things&#34;&gt;Conclusion : &lt;em&gt;Dotfiles all the things&lt;/em&gt;!&lt;/h2&gt;

&lt;p&gt;Même si la mise en place et la maintenance de ses dotfiles prend du temps, l&amp;rsquo;investissement vaut le coup pour notamment :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;la résolution de problèmes&lt;/strong&gt; (exemples : identifier ce qui a été récemment modifié, revenir à une configuration précédente, etc.) ;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;synchroniser&lt;/strong&gt; des changements entre plusieurs machines (exemple : PC sous Linux au travail et Mac perso), chacune ayant  une configuration distincte ;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;partager&lt;/strong&gt; sa configuration avec d&amp;rsquo;autres développeurs (&amp;ldquo;Voici le dernier réglage que j&amp;rsquo;ai utilisé pour &amp;hellip;&amp;rdquo;).
:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PS : merci à Jean-Christophe Gay pour l&amp;rsquo;inspiration et les &amp;ldquo;bons tuyaux&amp;rdquo;. Voici son blog : &lt;a href=&#34;https://jeanchristophegay.com/&#34;&gt;https://jeanchristophegay.com/&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>