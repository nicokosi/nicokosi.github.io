<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Nicokosi's blog - Nicolas Kosinski</title><link href="https://nicokosi.github.io/" rel="alternate"></link><link href="https://nicokosi.github.io/feeds/nicolas-kosinski.atom.xml" rel="self"></link><id>https://nicokosi.github.io/</id><updated>2021-11-03T13:00:00+01:00</updated><subtitle>#SoftwareDevelopment #WhatElse?;-)</subtitle><subtitle>#SoftwareDevelopment #WhatElse?;-)</subtitle><entry><title>Exploratation des donn√©es sportives Strava avec Kibana</title><link href="https://nicokosi.github.io/explore-strava-activities-with-kibana.html" rel="alternate"></link><published>2021-11-03T13:00:00+01:00</published><updated>2021-11-03T13:00:00+01:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2021-11-03:/explore-strava-activities-with-kibana.html</id><summary type="html">&lt;p&gt;Utilisation de Kibana pour explorer mes sorties sportives strava.com&lt;/p&gt;</summary><content type="html">&lt;p&gt;Public pr√©sum√© : personnes int√©ress√©es par l‚Äôexploration de donn√©es.&lt;/p&gt;
&lt;p&gt;Cela fait quelques ann√©es que j'enregistre mes sorties sportives (essentiellement pour la course √† pied et la marche) sur &lt;a href="https://strava.com/"&gt;strava.com&lt;/a&gt;.
Comme les donn√©es sont accessibles par une API, j'ai voulu les explorer en utilisant un outil de visualisation de donn√©es, &lt;a href="https://www.elastic.co/kibana/"&gt;Kibana&lt;/a&gt;.
Cet article d√©crit mon premier essai "d'exploration".&lt;/p&gt;
&lt;h2&gt;Mise en place&lt;/h2&gt;
&lt;p&gt;Noter que le code ci-dessous utilise le shell Unix &lt;code&gt;zsh&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;R√©cup√©ration des activit√©s Strava&lt;/h3&gt;
&lt;p&gt;Il faut d'abord cr√©er &lt;a href="https://developers.strava.com/docs/getting-started/#account"&gt;un compte d√©veloppeur Strava&lt;/a&gt; puis cr√©er un jeton OAuth2 (j'ai utilis√© &lt;a href="https://github.com/mgryszko/strava-access-token"&gt;le g√©n√©rateur mgryszko/strava-access-token&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Ensuite, on peut utiliser &lt;a href="https://developers.strava.com/docs/reference/#api-Activities-getLoggedInAthleteActivities"&gt;l'API Strava API pour r√©cup√©rer les activit√©s&lt;/a&gt; pour g√©n√©rer plusieurs fichiers JSON :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; page &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;..10&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; http GET &lt;span class="s2"&gt;&amp;quot;https://www.strava.com/api/v3/athlete/activities?include_all_efforts=&amp;amp;per_page=200&amp;amp;page=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;page&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Authorization: Bearer &lt;/span&gt;&lt;span class="nv"&gt;$TOKEN&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &amp;gt; strava-activities-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;page&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ayant un historique d'environ 300 sorties, seuls 3 fichiers ont du contenu (les autres contient un tableau vide : &lt;code&gt;[]&lt;/code&gt;), comme on peut le voir avec la commande &lt;code&gt;wc&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wc -c strava-activities-*.json

  &lt;span class="m"&gt;421462&lt;/span&gt; strava-activities-1.json
       &lt;span class="m"&gt;2&lt;/span&gt; strava-activities-10.json
  &lt;span class="m"&gt;288391&lt;/span&gt; strava-activities-2.json
   &lt;span class="m"&gt;57159&lt;/span&gt; strava-activities-3.json
       &lt;span class="m"&gt;2&lt;/span&gt; strava-activities-4.json
       &lt;span class="m"&gt;2&lt;/span&gt; strava-activities-5.json
       &lt;span class="m"&gt;2&lt;/span&gt; strava-activities-6.json
       &lt;span class="m"&gt;2&lt;/span&gt; strava-activities-7.json
       &lt;span class="m"&gt;2&lt;/span&gt; strava-activities-8.json
       &lt;span class="m"&gt;2&lt;/span&gt; strava-activities-9.json
  &lt;span class="m"&gt;767026&lt;/span&gt; total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pour finir, agr√©geons ces fichiers dans un fichier unique au format "Newline Delimited JSON" (extension &lt;code&gt;ndjson&lt;/code&gt;) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; n &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;..3&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; cat strava-activities-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.json &lt;span class="p"&gt;|&lt;/span&gt; jq -c &lt;span class="s1"&gt;&amp;#39;.[]&amp;#39;&lt;/span&gt; &amp;gt; strava-activities-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.ndjson
cat strava-activities-1.ndjson strava-activities-2.ndjson strava-activities-3.ndjson &amp;gt;&amp;gt; strava-activities.ndjson
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Import des donn√©es&lt;/h3&gt;
&lt;p&gt;Nous allons utiliser les &lt;a href="https://www.elastic.co/guide/en/kibana/current/docker.html"&gt;images officielles Docker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;D√©marrons les services Elastic et Kibana :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker network create elastic
docker run --name es-dataviz --net elastic --publish &lt;span class="m"&gt;9200&lt;/span&gt;:9200 --publish &lt;span class="m"&gt;9300&lt;/span&gt;:9300 --env &lt;span class="s2"&gt;&amp;quot;discovery.type=single-node&amp;quot;&lt;/span&gt; --env &lt;span class="s2"&gt;&amp;quot;xpack.security.enabled=false&amp;quot;&lt;/span&gt; docker.elastic.co/elasticsearch/elasticsearch:7.15.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker run --name kb-dataviz --net elastic --publish &lt;span class="m"&gt;5601&lt;/span&gt;:5601 --env &lt;span class="s2"&gt;&amp;quot;ELASTICSEARCH_HOSTS=http://es-dataviz:9200&amp;quot;&lt;/span&gt; --env &lt;span class="s2"&gt;&amp;quot;xpack.security.enabled=false&amp;quot;&lt;/span&gt; docker.elastic.co/kibana/kibana:7.15.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Puis importons les donn√©es ("upload") en s√©lectionnant le fichier &lt;code&gt;ndjson&lt;/code&gt; [http://localhost:5601/app/home#/tutorial_directory] que nous importons dans un index nomm√© "strava" :&lt;/p&gt;
&lt;p&gt;Ouvrons ensuite la vue "discover" pour les 6 derni√®res ann√©es :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Discover Kibana" src="images/explore-strava-discover.png" title="Discover Kibana"&gt;&lt;/p&gt;
&lt;h2&gt;Exploration des donn√©es&lt;/h2&gt;
&lt;h3&gt;Vitesse moyenne par sortie&lt;/h3&gt;
&lt;p&gt;Cr√©ons un &lt;em&gt;dashboard&lt;/em&gt; pour visualiser l'√©volution dans le temps de la vitesse moyenne par type d'activit√© (course, marche etc.) :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Create Kibana dashboard" src="images/explore-strava-create-dashboard.png" title="Create Kibana dashboard"&gt;&lt;/p&gt;
&lt;p&gt;Ca ressemble √† √ßa :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Create Kibana dashboard&amp;quot;" src="images/explore-strava-dashboard.png" title="Create Kibana dashboard&amp;quot;"&gt;&lt;/p&gt;
&lt;p&gt;Quelques remarques / interpr√©tations :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;je ne pensais pas courir depuis si longtemps (5 ans) üòØ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mes performances baissent dans le temps, c'est normal, je vieillis ! üßì&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Et sinon, j'ai trouv√© √ßa sympa de faire mon propre dashboard √©ph√©m√®re (non persist√©) sans payer l'abonnement Strava. üòá&lt;/p&gt;
&lt;p&gt;C'est tout pour cette fois. J‚Äôessaierai d'aller plus loin dans un autre article. ü§ì&lt;/p&gt;</content><category term="all"></category><category term="dataviz data visualisation"></category></entry><entry><title>Contributing to TLDR (collaborative cheatsheets for console commands)</title><link href="https://nicokosi.github.io/contributing-to-tldr.html" rel="alternate"></link><published>2021-09-14T08:00:00+02:00</published><updated>2021-09-14T08:00:00+02:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2021-09-14:/contributing-to-tldr.html</id><summary type="html">&lt;p&gt;mes contributions r√©centes au projet open-source 'tldr' (bons et mauvais c√¥t√©s)&lt;/p&gt;</summary><content type="html">&lt;p&gt;Public pr√©sum√© : d√©veloppeurs.euses int√©ress√©.es par les outils en ligne de commande et √† la collaboration open-source.&lt;/p&gt;
&lt;h1&gt;Mes d√©buts de contribution au projet open-source &lt;code&gt;tldr&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;Cela fait quelques mois que je contribue √©pisodiquement au projet &lt;a href="https://github.com/tldr-pages/tldr"&gt;&lt;code&gt;tldr&lt;/code&gt;&lt;/a&gt; (ou &lt;code&gt;tldr-pages&lt;/code&gt;), une sorte d'anti-s√®che collaborative pour commandes shell (cf. mes &lt;a href="https://github.com/tldr-pages/tldr/pulls?q=is%3Apr+author%3Anicokosi"&gt;contributions r√©centes&lt;/a&gt;).
Cet article est un bilan des points positifs et n√©gatifs de ces contributions.&lt;/p&gt;
&lt;h2&gt;Les bons c√¥t√©s üëç&lt;/h2&gt;
&lt;h3&gt;Partager ma "connaissance locale" üéÅ&lt;/h3&gt;
&lt;p&gt;Certaines commandes qui faisaient partie de mon historique shell ou qui √©taient dans ma t√™te sont maintenant partag√©es √† tous les utilisateurs de &lt;code&gt;tldr&lt;/code&gt;... et aussi √† moi m√™me !&lt;/p&gt;
&lt;p&gt;Je peux d√©sormais les retrouver plus facilement en tapant &lt;code&gt;tldr &amp;lt;nom_de_la_commande&amp;gt;&lt;/code&gt;, par exemple &lt;code&gt;tldr espanso&lt;/code&gt; depuis &lt;a href="https://github.com/tldr-pages/tldr/pull/5662"&gt;ma contribution #5662&lt;/a&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ tldr espanso

espanso

Cross-platform Text Expander written &lt;span class="k"&gt;in&lt;/span&gt; Rust.
More information: &amp;lt;https://espanso.org&amp;gt;.

- Check status:
    espanso status

- Edit the configuration:
    espanso edit config

- Install a package from the hub store &lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;https://hub.espanso.org/&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;:
    espanso install package_name

- Restart &lt;span class="o"&gt;(&lt;/span&gt;required after installing a package, useful &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; of failure&lt;span class="o"&gt;)&lt;/span&gt;:
    espanso restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;C'est plus rapide que de chercher dans mon historique shell :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;history&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep espanso
 &lt;span class="m"&gt;4998&lt;/span&gt;  brew tap federico-terzi/espanso
 &lt;span class="m"&gt;4999&lt;/span&gt;  brew install espanso
 &lt;span class="m"&gt;5000&lt;/span&gt;  espanso register
 &lt;span class="m"&gt;5001&lt;/span&gt;  mkdir espanso
 &lt;span class="m"&gt;5002&lt;/span&gt;  &lt;span class="nb"&gt;cd&lt;/span&gt; espanso
 &lt;span class="m"&gt;5013&lt;/span&gt;  espanso stop
 &lt;span class="m"&gt;5014&lt;/span&gt;  espanso start
 &lt;span class="m"&gt;5015&lt;/span&gt;  espanso path
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Une communaut√© accueillante ü§ó&lt;/h3&gt;
&lt;p&gt;J'ai √©t√© tr√®s bien accueilli par les contributeurs qui encouragent sans mettre de pression. Mon ressenti est surtout li√© aux commentaires sur les &lt;em&gt;pull requests&lt;/em&gt; / &lt;em&gt;issues&lt;/em&gt;, par exemple ce genre de &lt;a href="https://github.com/tldr-pages/tldr/pull/5662#issuecomment-812137443"&gt;commentaire&lt;/a&gt; est toujours agr√©able : &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Welcome to tldr-pages, @nicokosi! ‚ö° üéâ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Par contre, je n'ai quasimment pas utilis√© &lt;a href="https://gitter.im/tldr-pages/tldr"&gt;le forum de discussions Gitter&lt;/a&gt;. Je pense que je ne suis pas assez actif (je contribue quelques minutes / heures par semaine) pour pouvoir suivre le flux des √©changes !&lt;/p&gt;
&lt;h3&gt;Apprendre de nouvelles commandes üë®‚Äçüéì&lt;/h3&gt;
&lt;p&gt;En faisant la revue des contributions (&lt;a href="https://github.com/tldr-pages/tldr/pulls"&gt;&lt;em&gt;pull requests&lt;/em&gt;&lt;/a&gt;), j'ai parfois d√©couvert des nouvelles commandes ou d√©couvert de nouvelles options.&lt;/p&gt;
&lt;p&gt;Par exemple, j'ai d√©couvert qu'il √©tait possible de formater en JSON le retour de la commande GitHub CLI &lt;code&gt;gh&lt;/code&gt; via &lt;a href="https://github.com/tldr-pages/tldr/pull/6290/files?short_path=193df31#diff-193df31fff2a4e88a95b3bd8732bead1fbbe8343eb8617ed1b727e4d1ba4d751"&gt;cette &lt;em&gt;pull request&lt;/em&gt; &lt;code&gt;gh-formatting: add page #6290&lt;/code&gt;&lt;/a&gt; :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Formatting options for JSON data exported from gh GitHub CLI command. More information: https://cli.github.com/manual/gh_help_formatting.
Display help about formatting JSON output from gh using jq:
gh formatting&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Apprendre le compromis ‚öñÔ∏è&lt;/h3&gt;
&lt;p&gt;J'ai appris √† accepter les retours des autres et √† parfois accepter un avis majoritaire qui n'est pas le mien.&lt;/p&gt;
&lt;p&gt;Exemple : utiliser le terme &lt;code&gt;slug&lt;/code&gt;dans un contexte d'authentification pour &lt;a href="https://github.com/tldr-pages/tldr/pull/6108#discussion_r648835227"&gt;cette contribution&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Les "mauvais" c√¥t√©s üëé&lt;/h2&gt;
&lt;h3&gt;Ca prend du temps ! ‚è≥&lt;/h3&gt;
&lt;p&gt;Quand on fait des suggestions aux autres sur une &lt;em&gt;pull request&lt;/em&gt; ou qu'on r√©pond √† celles des autres, tout se fait par √©crit, en anglais, or je ne suis pas bilingue et les autres personnes ne le se sont pas forcement non plus... et si on ajoute le fait que les contributeurs font √ßa sur leur temps libre... tout prend du temps.&lt;/p&gt;
&lt;p&gt;Exemple d'incompr√©hension (&lt;a href="https://github.com/tldr-pages/tldr/pull/6269#issuecomment-888351398"&gt;lien&lt;/a&gt;) :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes, it does seem that only common is shown, anyway that can be fixed since a user might think we have a lack of pages if we only show them.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sorry, I don't understand after "anyway".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Exemple de lenteur : il a fallu un moins pour int√©grer &lt;a href="https://github.com/tldr-pages/tldr.jsx-fork/pull/3"&gt;cette contribution, &lt;code&gt;Prevent search misses via input's placeholder/tooltip&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Pas de retours des utilisateurs üßë‚Äçü¶Ø&lt;/h3&gt;
&lt;p&gt;Seules les personnes qui contribuent font des retours via les &lt;em&gt;pull requests&lt;/em&gt; ou les &lt;em&gt;issues&lt;/em&gt; GitHub.
Il n'y a pas de m√©triques du type "nombre de vues", "note" etc. donc on ne conna√Æt donc pas vraiment l'usage des exemples (ce qui est une bonne chose pour la confidentialit√©).&lt;/p&gt;
&lt;h2&gt;La suite ? üîú&lt;/h2&gt;
&lt;p&gt;Contribuer sur du code plut√¥t que de la documentation ? üßë‚Äçüíª
Sur ce projet ou sur un autre ? A suivre ! üîÆ&lt;/p&gt;</content><category term="all"></category><category term="OSS cli"></category></entry><entry><title>Re-d√©couvrons le langage Go avec "pullpigo", un petit projet d'exp√©rimentation</title><link href="https://nicokosi.github.io/rediscovering-Golang-with-pullpigo.html" rel="alternate"></link><published>2019-12-24T07:00:00+01:00</published><updated>2019-12-24T07:00:00+01:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2019-12-24:/rediscovering-Golang-with-pullpigo.html</id><summary type="html">&lt;p&gt;(Re)d√©couvrir le langage de programmation Go avec un petit outil en ligne de commande, "pullpigo"&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Re-d√©couvrons le langage Go avec "pullpigo", un petit projet d'exp√©rimentation&lt;/h1&gt;
&lt;p&gt;D√©veloppant au quotidien en Java, j'avais envie d'apprendre quelques rudiments du langage de programmation &lt;strong&gt;&lt;a href="https://golang.org/"&gt;Go&lt;/a&gt;&lt;/strong&gt;.
Pour ce faire, j'ai impl√©ment√© un petit outil en &lt;strong&gt;ligne de commande (&lt;em&gt;CLI&lt;/em&gt;)&lt;/strong&gt; afin d'afficher des informations sur les pull requests GitHub.
J'ai cr√©√© ainsi un petit projet, versionn√© dans GitHub, &lt;a href="https://github.com/nicokosi/pullpigo"&gt;pullpigo&lt;/a&gt;. Son but 
est d'afficher le nombre d'√©v√©nements du type "tant d'√©v√©nements cr√©√©s par tel auteur GitHub (&lt;em&gt;commiter&lt;/em&gt;)" en utilisant une API publique de GitHub.&lt;/p&gt;
&lt;p&gt;Notez que j'ai d√©j√† impl√©ment√© un outil similaire dans d'autres langages (que je voulais aussi d√©couvrir ou approfondir) : en &lt;strong&gt;Clojure&lt;/strong&gt; (cf. &lt;a href="https://github.com/nicokosi/hubstats"&gt;hubstats&lt;/a&gt;), &lt;strong&gt;Kotlin&lt;/strong&gt; (cf. &lt;a href="https://github.com/nicokosi/pullpitoK"&gt;pullpitoK&lt;/a&gt;) et &lt;strong&gt;Rust&lt;/strong&gt; (cf. &lt;a href="https://github.com/nicokosi/pullpito"&gt;pullpito&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Les ex√©cutables natifs sont rapides üöÄ&lt;/h2&gt;
&lt;p&gt;Compilons pullpigo :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go clean
$ &lt;span class="nb"&gt;time&lt;/span&gt; go build
go build  &lt;span class="m"&gt;1&lt;/span&gt;.05s user &lt;span class="m"&gt;0&lt;/span&gt;.58s system &lt;span class="m"&gt;105&lt;/span&gt;% cpu &lt;span class="m"&gt;1&lt;/span&gt;.559 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Puis lan√ßons le :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;time&lt;/span&gt; ./pullpigo -repo&lt;span class="o"&gt;=&lt;/span&gt;vidal-community/atom-jaxb
GitHub repository &lt;span class="s1"&gt;&amp;#39;vidal-community/atom-jaxb&amp;#39;&lt;/span&gt;
  &lt;span class="m"&gt;2&lt;/span&gt; events created by amairi
  &lt;span class="m"&gt;1&lt;/span&gt; events created by fchetouani
  &lt;span class="m"&gt;6&lt;/span&gt; events created by AElMehdiVidal
  &lt;span class="m"&gt;3&lt;/span&gt; events created by jcgay
./pullpigo -repo&lt;span class="o"&gt;=&lt;/span&gt;vidal-community/atom-jaxb  &lt;span class="m"&gt;0&lt;/span&gt;.07s user &lt;span class="m"&gt;0&lt;/span&gt;.03s system &lt;span class="m"&gt;20&lt;/span&gt;% cpu &lt;span class="m"&gt;0&lt;/span&gt;.482 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Comparons ces temps avec ceux d'un projet similaire impl√©ment√© en Kotlin, (&lt;a href="https://github.com/nicokosi/pullpitoK/"&gt;pullpitoK&lt;/a&gt;) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ./gradlew clean
$ &lt;span class="nb"&gt;time&lt;/span&gt; ./gradlew build --quiet
./gradlew build --quiet  &lt;span class="m"&gt;1&lt;/span&gt;.37s user &lt;span class="m"&gt;0&lt;/span&gt;.17s system &lt;span class="m"&gt;39&lt;/span&gt;% cpu &lt;span class="m"&gt;3&lt;/span&gt;.932 total
$ &lt;span class="nb"&gt;time&lt;/span&gt; ./gradlew run --quiet --args &lt;span class="s2"&gt;&amp;quot;vidal-community/atom-jaxb&amp;quot;&lt;/span&gt;

pull requests &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;vidal-community/atom-jaxb&amp;quot;&lt;/span&gt; -&amp;gt;
            opened per author
                amairi: &lt;span class="m"&gt;1&lt;/span&gt;
            commented per author
                AElMehdiVidal: &lt;span class="m"&gt;1&lt;/span&gt;
                jcgay: &lt;span class="m"&gt;1&lt;/span&gt;
            closed per author

./gradlew run --quiet --args &lt;span class="s2"&gt;&amp;quot;vidal-community/atom-jaxb&amp;quot;&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;.37s user &lt;span class="m"&gt;0&lt;/span&gt;.18s system &lt;span class="m"&gt;62&lt;/span&gt;% cpu &lt;span class="m"&gt;2&lt;/span&gt;.473 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Compilation rapide + ex√©cution rapide = ‚ù§Ô∏è&lt;/p&gt;
&lt;h2&gt;Les librairies et l'outillage standards de Go sont complets üì¶&lt;/h2&gt;
&lt;p&gt;Pour appeler l'&lt;a href="https://developer.github.com/v3/activity/events/"&gt;API REST v3 'events' de GitHub&lt;/a&gt;, j'avais besoin de : un client HTTP, un &lt;em&gt;parser&lt;/em&gt; JSON ainsi qu'un &lt;em&gt;framework&lt;/em&gt; de test. C'est cool, tout est pr√©sent dans les librairies de base : &lt;a href="https://golang.org/pkg/testing/"&gt;testing&lt;/a&gt;, &lt;a href="https://golang.org/pkg/net/http/"&gt;HTTP client&lt;/a&gt; et &lt;a href="https://golang.org/pkg/encoding/json/"&gt;JSON parsing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;J'ai donc pu impl√©menter mon outil sans utiliser une seule librairie tierce !&lt;/p&gt;
&lt;p&gt;J'ai √©galement appr√©ci√© l'outillage (notez mon &lt;em&gt;background&lt;/em&gt; Java) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;pour &lt;strong&gt;formatter le code&lt;/strong&gt;, il sufffit de lancer la commande &lt;code&gt;go fmt&lt;/code&gt;, sans aucune configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pour analyser statiquement son code, un &lt;strong&gt;code linter&lt;/strong&gt; est √©galement inclus. Il suffit d'installer &lt;a href="[golang/linttype"&gt;https://github.com/golang/linttype&lt;/a&gt; et de lancer la commande &lt;code&gt;golint&lt;/code&gt;, sans configuration (pour √™tre franc, ce &lt;em&gt;linter&lt;/em&gt; ne m'a pas aid√© pour coder pullpigo mais je trouve √ßa g√©nial que cet outil existe).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Opportunit√©s "annexes" üòé&lt;/h2&gt;
&lt;p&gt;En dehors du langage et des libraries, ce petit projet a aussi √©t√© l'occasion d'&lt;strong&gt;essayer et d'apprendre de nouveaux outils&lt;/strong&gt;. En l‚Äôoccurrence :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;, un environnement de d√©veloppement (&lt;em&gt;Integrated Development Environment&lt;/em&gt;) que je n'utilise pas professionnellement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;, une plate-forme pour l'int√©gration continue : chaque commit git GitHub d√©clenche la compilation et les tests unitaires. Bien que je n'avais jamaais utilis√© GitHub Actions, √ßa a √©t√© rapide √† mettre en place (quelques minutes). En en plus, c'est gratuit ! &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Un autre point bonus, j'ai appr√©ci√© de &lt;strong&gt;discuter et d'√©changer&lt;/strong&gt; avec des gens que je connais (et pas uniquement de "googler").&lt;/p&gt;
&lt;p&gt;Dans mon cas, mes "amis Golang" ont √©t√© :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/jcgay/"&gt;Jean-Christophe&lt;/a&gt; qui m'a motiv√© et m'a aid√© √† corriger un probl√®me de &lt;em&gt;parsing&lt;/em&gt; JSON. üòÖ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/fbiville"&gt;Florent&lt;/a&gt; qui m'a donn√© des pointeurs sympas vers des librairies : &lt;a href="https://golang.org/pkg/testing/quick/"&gt;testing/quick&lt;/a&gt; pour le &lt;em&gt;property-based testing&lt;/em&gt;, &lt;a href="https://github.com/onsi/ginkgo"&gt;ginkgo&lt;/a&gt; pour les test style &lt;em&gt;BDD&lt;/em&gt; et &lt;a href="https://github.com/onsi/gomega"&gt;gomega&lt;/a&gt; pour les assertions de test. A essayer ! üòé&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;La suite ? üîÆ&lt;/h3&gt;
&lt;p&gt;Quelques pistes :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Am√©liorer les messages en sortie. Par exemple, afficher les compteurs par type d'√©v√©nements ("pull requests cr√©√©s", "pull requests fusionn√©es" etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R√©cup√©rer les donn√©es de l'API &lt;code&gt;GraphQL&lt;/code&gt; de GitHub (&lt;a href="https://developer.github.com/v4/"&gt;GitHub's GraphQL API v4&lt;/a&gt;) de fa√ßon √† ne pas √™tre limit√© aux 300 derniers √©v√©nements (c'est une limitation de l'API GitHub REST).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Utiliser des d√©pendances pour les tests (assertions plus faciles, property-based testing etc.) et en profiter pour d√©couvrir la gestion des d√©pendances en Go.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A suivre !&lt;/p&gt;</content><category term="all"></category><category term="golang native"></category></entry><entry><title>Du code Java/Kotlin/Clojure "natif" gr√¢ce √† GraalVM</title><link href="https://nicokosi.github.io/java-clojure-and-kotlin-go-native-with-graalvm.html" rel="alternate"></link><published>2019-08-13T00:00:00+02:00</published><updated>2019-08-13T00:00:00+02:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2019-08-13:/java-clojure-and-kotlin-go-native-with-graalvm.html</id><summary type="html">&lt;p&gt;G√©n√©rer des ex√©cutables natifs via GraalVM pour des outils en ligne de commande impl√©ment√©s en Java, Kotlin ou Clojure&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://v4.chriskrycho.com/2018/assumed-audiences.html"&gt;Audience pr√©sum√©e&lt;/a&gt; : d√©veloppeurs.euses int√©ress√©s.√©es par l'√©cosyst√®me Java et plus particuli√®rement sur l'am√©lioration des performances et la g√©n√©ration d'ex√©cutables.&lt;/p&gt;
&lt;p&gt;Plan :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Outils utilis√©s&lt;/li&gt;
&lt;li&gt;Ex√©cutable optimis√© pour une application "WordCount" &lt;code&gt;Java&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ex√©cutable optimis√© pour une application &lt;code&gt;Kotlin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ex√©cutable moins optimis√© pour une application &lt;code&gt;Clojure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Suite √† mes premiers essais infructueux l'an dernier (lire mon article pr√©c√©dent &lt;a href="https://nicokosi.github.io/clojure-goes-native-with-graalvm.html"&gt;Du Clojure "natif" gr√¢ce √† GraalVM&lt;/a&gt;), voici un compte rendu plus positif de mes exp√©rimentations avec les versions &lt;em&gt;release&lt;/em&gt; de &lt;a href="https://www.graalvm.org/"&gt;GraalVM&lt;/a&gt; sorties √† partir de mai 2019 (cf. les &lt;a href="https://www.graalvm.org/docs/release-notes/"&gt;&lt;em&gt;release notes&lt;/em&gt;&lt;/a&gt;), en utilisant des applications en ligne de commandes impl√©ment√©e en &lt;a href="https://go.java/"&gt;Java&lt;/a&gt;, &lt;a href="https://kotlinlang.org/"&gt;Kotlin&lt;/a&gt; et &lt;a href="https://clojure.org/"&gt;Clojure&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Outillage&lt;/h2&gt;
&lt;p&gt;Nous utiliserons les outils suivants :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.graalvm.org/downloads/"&gt;GraalVM Community Edition&lt;/a&gt; ("&lt;em&gt;a High-performance polyglot VM&lt;/em&gt;") et plus particuli√®rement la fonctionnalit√© &lt;a href="https://www.graalvm.org/docs/getting-started/#native-images"&gt;Native Image&lt;/a&gt; via la commande &lt;code&gt;native-image&lt;/code&gt; pour g√©n√©rer des ex√©cutables √† partir de &lt;em&gt;bytecode&lt;/em&gt; JVM.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdkman.io/"&gt;SDKMAN!&lt;/a&gt; ("&lt;em&gt;The Software Development Kit Manager&lt;/em&gt;") pour installer / utiliser des versions diff√©rentes du &lt;em&gt;Java Development Kit&lt;/em&gt; / &lt;em&gt;Java Runtime Environment&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://manpages.ubuntu.com/manpages/cosmic/en/man1/time.1.html"&gt;time&lt;/a&gt; ("&lt;em&gt;run programs and summarize system resource usage&lt;/em&gt;") pour mesurer le temps d'ex√©cution&lt;/li&gt;
&lt;li&gt;&lt;a href="http://valgrind.org/"&gt;valgrind&lt;/a&gt; ("&lt;em&gt;tool for memory debugging, memory leak detection, and profiling&lt;/em&gt;") pour √©valuer l'empreinte m√©moire des processus&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Ex√©cutable optimis√© pour une application "WordCount" &lt;code&gt;Java&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Notre "hello world" est un programme Java de 10 lignes qui compte le nombre de mots d'un fichier de texte : &lt;a href="https://github.com/nicokosi/wordcount-with-java-stream"&gt;wordcount-with-java-stream&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;G√©n√©rons un JAR ex√©cutable via Maven et OpenJDK, cela prend 2 secondes sur ma machine :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sdk use java &lt;span class="m"&gt;8&lt;/span&gt;.0.222.hs-adpt
Using java version &lt;span class="m"&gt;8&lt;/span&gt;.0.222.hs-adpt &lt;span class="k"&gt;in&lt;/span&gt; this shell.
$ &lt;span class="nb"&gt;time&lt;/span&gt; ./mvnw clean --quiet compile
./mvnw clean --quiet compile  &lt;span class="m"&gt;6&lt;/span&gt;.24s user &lt;span class="m"&gt;0&lt;/span&gt;.31s system &lt;span class="m"&gt;323&lt;/span&gt;% cpu &lt;span class="m"&gt;2&lt;/span&gt;.022 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note : le temps d'ex√©cution indiqu√© par la commande &lt;code&gt;time&lt;/code&gt; se trouve √† la fin de la derni√®re ligne, en secondes : &lt;code&gt;2.022 total&lt;/code&gt; pour 2,022 secondes.&lt;/p&gt;
&lt;p&gt;Puis g√©n√©rons l'ex√©cutable via GraalVM native-image, cela prend 42 secondes sur ma machine :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.sdkman/candidates/java/19.1.1-grl/bin/native-image &lt;span class="se"&gt;\&lt;/span&gt;
     --enable-https &lt;span class="se"&gt;\&lt;/span&gt;
     --no-fallback &lt;span class="se"&gt;\&lt;/span&gt;
     --no-server &lt;span class="se"&gt;\&lt;/span&gt;
     -cp target/classes org.nicokosi.WordCount &lt;span class="se"&gt;\&lt;/span&gt;
     wordcount-with-java-stream
&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.sdkman/candidates/java/19.1.1-grl/bin/native-image --enable-https   -c  &lt;span class="m"&gt;236&lt;/span&gt;,70s user &lt;span class="m"&gt;2&lt;/span&gt;,75s system &lt;span class="m"&gt;566&lt;/span&gt;% cpu &lt;span class="m"&gt;42&lt;/span&gt;,285 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Comparons les temps d'ex√©cution pour un petit fichier d'entr√©e.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;wordcount_java&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.sdkman/candidates/java/8.0.222.hs-adpt/bin/java -cp target/classes org.nicokosi.WordCount&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;time&lt;/span&gt; wordcount_java /etc/hosts
File /etc/hosts contains &lt;span class="m"&gt;26&lt;/span&gt; words
/home/nkosinski/.sdkman/candidates/java/8.0.222.hs-adpt/bin/java -cp     &lt;span class="m"&gt;0&lt;/span&gt;,16s user &lt;span class="m"&gt;0&lt;/span&gt;,02s system &lt;span class="m"&gt;152&lt;/span&gt;% cpu &lt;span class="m"&gt;0&lt;/span&gt;,118 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; ./wordcount-with-java-stream /etc/hosts
File /etc/hosts contains &lt;span class="m"&gt;26&lt;/span&gt; words
./wordcount-with-java-stream /etc/hosts  &lt;span class="m"&gt;0&lt;/span&gt;,00s user &lt;span class="m"&gt;0&lt;/span&gt;,01s system &lt;span class="m"&gt;92&lt;/span&gt;% cpu &lt;span class="m"&gt;0&lt;/span&gt;,007 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Puis comparons l'empreinte m√©moire :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nv"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.sdkman/candidates/java/8.0.222.hs-adpt &lt;span class="se"&gt;\&lt;/span&gt;
  valgrind java -cp target/classes org.nicokosi.WordCount /etc/hosts

&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;23352&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; HEAP SUMMARY:
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;23352&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;     &lt;span class="k"&gt;in&lt;/span&gt; use at exit: &lt;span class="m"&gt;34&lt;/span&gt;,892,297 bytes &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;,155 &lt;span class="nv"&gt;blocks&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;23352&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;   total heap usage: &lt;span class="m"&gt;14&lt;/span&gt;,555 allocs, &lt;span class="m"&gt;8&lt;/span&gt;,400 frees, &lt;span class="m"&gt;49&lt;/span&gt;,960,719 bytes allocated  **
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note : la m√©moire totale allou√©e est √† la fin de la derni√®re ligne ; &lt;code&gt;49,960,719 bytes allocated&lt;/code&gt; signifie qu'environ 50 m√©gaoctets ont √©t√© allou√©s.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ valgrind ./wordcount-with-java-stream /etc/hosts

&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;23753&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; HEAP SUMMARY:
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;23753&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;     &lt;span class="k"&gt;in&lt;/span&gt; use at exit: &lt;span class="m"&gt;10&lt;/span&gt;,468 bytes &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;blocks&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;23753&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;   total heap usage: &lt;span class="m"&gt;8&lt;/span&gt; allocs, &lt;span class="m"&gt;5&lt;/span&gt; frees, &lt;span class="m"&gt;12&lt;/span&gt;,436 bytes allocated**
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pour r√©sumer, au prix d'un temps de compilation plus long (42 secondes au lieu de 2 secondes), GraalVM :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;acc√©l√®re l'ex√©cution "courte" : 7 millisecondes au lieu de 118 millisecondes ;&lt;/li&gt;
&lt;li&gt;r√©duit l'empreinte m√©moire de notre application : 12 kilooctets au lieu de 50 m√©gaoctets.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Ex√©cutable optimis√© pour une application &lt;code&gt;Kotlin&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Faisons la m√™me chose pour une application &lt;a href="https://kotlinlang.org/"&gt;Kotlin&lt;/a&gt; un peu plus complexe, &lt;a href="https://github.com/nicokosi/pullpitoK/"&gt;pullpitoK&lt;/a&gt; (200 lignes de codes avec des librairies tierces) qui consomme les API GitHub pour afficher des statistiques sur les pull requests GitHub.&lt;/p&gt;
&lt;p&gt;La diff√©rence de temps de construction √©tant similaire au paragraphe pr√©c√©dent, concentrons-nous sur la comparaison du temps de d√©marrage pour une ex√©cution rapide (affichage de l'aide souvent appel√©e &lt;a href="https://en.wikipedia.org/wiki/Usage_message"&gt;"usage message"&lt;/a&gt;) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.sdkman/candidates/java/8.0.222.hs-adpt/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
$ &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;java -jar ./build/libs/pullpitoK-all.jar &lt;span class="p"&gt;|&lt;/span&gt; head -1&lt;span class="o"&gt;)&lt;/span&gt;
Usage: pullpitoK &amp;lt;repository&amp;gt; &amp;lt;token&amp;gt;
&lt;span class="o"&gt;(&lt;/span&gt; java -jar ./build/libs/pullpitoK-all.jar &lt;span class="p"&gt;|&lt;/span&gt; head -1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.08s user &lt;span class="m"&gt;0&lt;/span&gt;.02s system &lt;span class="m"&gt;108&lt;/span&gt;% cpu &lt;span class="m"&gt;0&lt;/span&gt;.093 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;pullpitoK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PULLPITOK_LIBSUNEC=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.sdkman/candidates/java/19.1.1-grl/jre/lib ./pullpitoK&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;pullpitoK --help &lt;span class="p"&gt;|&lt;/span&gt; head -1&lt;span class="o"&gt;)&lt;/span&gt;
Usage: pullpitoK &amp;lt;repository&amp;gt; &amp;lt;token&amp;gt;
&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;PULLPITOK_LIBSUNEC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/Users/nicolas/.sdkman/candidates/java/19.1.1-grl/jre/li&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.00s user &lt;span class="m"&gt;0&lt;/span&gt;.00s system &lt;span class="m"&gt;88&lt;/span&gt;% cpu &lt;span class="m"&gt;0&lt;/span&gt;.009 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Soit 9 millisecondes avec la version native contre 93 millisecondes pour la version JVM.&lt;/p&gt;
&lt;p&gt;Comparons maintenant l'empreinte m√©moire :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ valgrind java -jar ./build/libs/pullpitoK-all.jar
...
Usage: pullpitoK &amp;lt;repository&amp;gt; &amp;lt;token&amp;gt;
...
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;26273&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; HEAP SUMMARY:
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;26273&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;     &lt;span class="k"&gt;in&lt;/span&gt; use at exit: &lt;span class="m"&gt;32&lt;/span&gt;,181,758 bytes &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;,134 &lt;span class="nv"&gt;blocks&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;26273&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;   total heap usage: &lt;span class="m"&gt;5&lt;/span&gt;,725 allocs, &lt;span class="m"&gt;3&lt;/span&gt;,591 frees, &lt;span class="m"&gt;33&lt;/span&gt;,187,784 bytes allocated
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ valgrind pullpitoK &lt;span class="p"&gt;|&lt;/span&gt; head -1
...
Usage: pullpitoK &amp;lt;repository&amp;gt; &amp;lt;token&amp;gt;
...
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;27690&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; HEAP SUMMARY:
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;27690&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;     &lt;span class="k"&gt;in&lt;/span&gt; use at exit: &lt;span class="m"&gt;228&lt;/span&gt; bytes &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;blocks&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;27690&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;   total heap usage: &lt;span class="m"&gt;6&lt;/span&gt; allocs, &lt;span class="m"&gt;5&lt;/span&gt; frees, &lt;span class="m"&gt;2&lt;/span&gt;,196 bytes allocated
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Soit 2 kilooctets avec la version native contre 33 m√©gaoctets pour la version JVM.&lt;/p&gt;
&lt;h2&gt;Ex√©cutable &lt;em&gt;moins optimis√©&lt;/em&gt; pour une application &lt;code&gt;Clojure&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Dans mon billet &lt;a href="https://nicokosi.github.io/clojure-goes-native-with-graalvm.html"&gt;Du Clojure "natif" gr√¢ce √† GraalVM&lt;/a&gt;, je me suis heurt√© √† deux probl√®mes :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GraalVM √©tait encore exp√©rimental (&lt;em&gt;release candidates&lt;/em&gt;) √† l'√©poque&lt;/li&gt;
&lt;li&gt;l'outil Native Image poss√®de des &lt;a href="https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md"&gt;limitations&lt;/a&gt; qui concernent notamment le chargement de classes dynamiques, l'utilisation de la r√©flexion (API java.lang.reflect) etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Essayons de refaire l'essai avec une version &lt;em&gt;release&lt;/em&gt; de GraalVM pour l'application &lt;a href="https://github.com/nicokosi/hubstats/"&gt;hubstats&lt;/a&gt; (200 lignes de codes, utilisation de librairies tierces pour appeler les API HTTP GitHub).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.sdkman/candidates/java/19.1.1-grl/bin/native-image &lt;span class="se"&gt;\&lt;/span&gt;
   --enable-https &lt;span class="se"&gt;\&lt;/span&gt;
   --no-fallback &lt;span class="se"&gt;\&lt;/span&gt;
   --no-server &lt;span class="se"&gt;\&lt;/span&gt;
   -jar target/hubstats-0.1.0-SNAPSHOT-standalone.jar &lt;span class="se"&gt;\&lt;/span&gt;
   hubstats
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;La compilation native √©choue. Voici un extrait du message d'erreur :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unsupported&lt;/span&gt; &lt;span class="n"&gt;features&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;
&lt;span class="n"&gt;Detailed&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unsupported&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MemberName&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;reachable&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;All&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;invoke&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;replaced&lt;/span&gt; &lt;span class="n"&gt;during&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;building&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;diagnose&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;issue&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;unsupported&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;unsupported&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt; &lt;span class="n"&gt;reported&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;accessed&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nous pourrions corriger √ßa en adaptant le code source. Par facilit√©, essayons le mode &lt;code&gt;fallback&lt;/code&gt; ("solution de repli") de Native Image qui permet de contourner les limitations en embarquant une JVM classique :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="c1"&gt;# Construction de l&amp;#39;ex√©cutable avec GraalVM&lt;/span&gt;
&lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.sdkman/candidates/java/19.1.1-grl/bin/native-image &lt;span class="se"&gt;\&lt;/span&gt;
   --enable-https &lt;span class="se"&gt;\&lt;/span&gt;
   --force-fallback &lt;span class="se"&gt;\&lt;/span&gt;
   --no-server &lt;span class="se"&gt;\&lt;/span&gt;
   -jar target/hubstats-0.1.0-SNAPSHOT-standalone.jar &lt;span class="se"&gt;\&lt;/span&gt;
   hubstats
...
&lt;span class="o"&gt;[&lt;/span&gt;hubstats:31661&lt;span class="o"&gt;]&lt;/span&gt;      &lt;span class="o"&gt;[&lt;/span&gt;total&lt;span class="o"&gt;]&lt;/span&gt;:  &lt;span class="m"&gt;14&lt;/span&gt;,663.95 ms
Warning: Image &lt;span class="s1"&gt;&amp;#39;hubstats&amp;#39;&lt;/span&gt; is a fallback image that requires a JDK &lt;span class="k"&gt;for&lt;/span&gt; execution &lt;span class="o"&gt;(&lt;/span&gt;use --no-fallback to suppress fallback image generation&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.sdkman/candidates/java/19.1.1-grl/bin/native-image --enable-https       &lt;span class="m"&gt;78&lt;/span&gt;,73s user &lt;span class="m"&gt;1&lt;/span&gt;,31s system &lt;span class="m"&gt;536&lt;/span&gt;% cpu &lt;span class="m"&gt;14&lt;/span&gt;,926 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Etant donn√© que le mode fallback est utilis√©, les temps de d√©marrage sont maintenant similaires :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.sdkman/candidates/java/8.0.222.hs-adpt/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
$ &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;java -jar target/hubstats-0.1.0-SNAPSHOT-standalone.jar &lt;span class="p"&gt;|&lt;/span&gt; head -1&lt;span class="o"&gt;)&lt;/span&gt;
Display statistics &lt;span class="k"&gt;for&lt;/span&gt; GitHub pull requests.
&lt;span class="o"&gt;(&lt;/span&gt; java -jar target/hubstats-0.1.0-SNAPSHOT-standalone.jar &lt;span class="p"&gt;|&lt;/span&gt; head -1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt;,36s user &lt;span class="m"&gt;0&lt;/span&gt;,10s system &lt;span class="m"&gt;262&lt;/span&gt;% cpu &lt;span class="m"&gt;1&lt;/span&gt;,318 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;./hubstats &lt;span class="p"&gt;|&lt;/span&gt; head -1&lt;span class="o"&gt;)&lt;/span&gt;

Display statistics &lt;span class="k"&gt;for&lt;/span&gt; GitHub pull requests.
&lt;span class="o"&gt;(&lt;/span&gt; ./hubstats &lt;span class="p"&gt;|&lt;/span&gt; head -1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="m"&gt;2&lt;/span&gt;,86s user &lt;span class="m"&gt;0&lt;/span&gt;,14s system &lt;span class="m"&gt;236&lt;/span&gt;% cpu &lt;span class="m"&gt;1&lt;/span&gt;,272 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;mais l'empreinte m√©moire est √©norm√©ment r√©duite :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.sdkman/candidates/java/8.0.222.hs-adpt/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
$ valgrind java -jar target/hubstats-0.1.0-SNAPSHOT-standalone.jar
...
Display statistics &lt;span class="k"&gt;for&lt;/span&gt; GitHub pull requests.
...
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;2690&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; HEAP SUMMARY:
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;2690&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;     &lt;span class="k"&gt;in&lt;/span&gt; use at exit: &lt;span class="m"&gt;38&lt;/span&gt;,656,326 bytes &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;34&lt;/span&gt;,800 &lt;span class="nv"&gt;blocks&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;2690&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;   total heap usage: &lt;span class="m"&gt;170&lt;/span&gt;,569 allocs, &lt;span class="m"&gt;135&lt;/span&gt;,769 frees, &lt;span class="m"&gt;406&lt;/span&gt;,386,571 bytes allocated
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ valgrind pullpitoK
...
Usage: pullpitoK &amp;lt;repository&amp;gt; &amp;lt;token&amp;gt;
...
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;5747&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; HEAP SUMMARY:
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;5747&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;     &lt;span class="k"&gt;in&lt;/span&gt; use at exit: &lt;span class="m"&gt;228&lt;/span&gt; bytes &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;blocks&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;5747&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;   total heap usage: &lt;span class="m"&gt;6&lt;/span&gt; allocs, &lt;span class="m"&gt;5&lt;/span&gt; frees, &lt;span class="m"&gt;2&lt;/span&gt;,196 bytes allocated
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Au travers de ces trois petites applications utilisant des langages diff√©rents (Java, Kotlin et Clojure), nous avons pu v√©rifier les b√©n√©fices des ex√©cutables "images natives GraalVM" :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;avoir un &lt;strong&gt;ex√©cutable compact&lt;/strong&gt; d√©ployable sans &lt;em&gt;Java Virtual Machine&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;une &lt;strong&gt;consommation m√©moire r√©duite&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;un &lt;strong&gt;d√©marrage rapide&lt;/strong&gt; (parfois !)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De plus, on pressent l'int√©r√™t qu'aura GraalVM pour moderniser Java, en particulier pour un usage en &lt;strong&gt;&lt;em&gt;cloud-computing&lt;/em&gt;&lt;/strong&gt; et pour les &lt;strong&gt;microservices&lt;/strong&gt;. Se r√©f√©rencer aux frameworks tels &lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt; et &lt;a href="https://micronaut.io/"&gt;Micronaut&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A tester ult√©rieurement :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;la gestion de la m√©moire par le ramasse-miettes (&lt;em&gt;garbage collector&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;la diff√©rence entre les versions &lt;em&gt;Community Edition&lt;/em&gt; et &lt;em&gt;Enterprise Edition&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PS : merci √† mes coll√®gues de &lt;a href="http://www.vidalfrance.com/"&gt;Vidal&lt;/a&gt;, notamment √† Viviane, Marc et Jean-Christophe pour les √©changes int√©ressants sur GraalVM et √† St√©phane pour la relecture de cet article.&lt;/p&gt;</content><category term="all"></category><category term="java clojure kotlin native graalvm jvm"></category></entry><entry><title>D√©couvrons Rust</title><link href="https://nicokosi.github.io/discovering-rust.html" rel="alternate"></link><published>2018-06-10T15:00:00+02:00</published><updated>2018-06-10T15:00:00+02:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2018-06-10:/discovering-rust.html</id><summary type="html">&lt;p&gt;D√©couvrons le langage de programmation Rust en d√©veloppant un petit projet personnel&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;En tant que d√©veloppeur.se Java, je veux d√©couvrir Rust, de fa√ßon √† bien comprendre la phrase suivante cit√©e de &lt;a href="https://www.rust-lang.org"&gt;rust-lang.org&lt;/a&gt;*:&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust is a systems programming language that runs blazingly &lt;strong&gt;fast&lt;/strong&gt;, &lt;strong&gt;prevents segfaults&lt;/strong&gt;, and &lt;strong&gt;guarantees thread safety&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;*: avez-vous remarqu√© le "agile stories meme" ? üòâ&lt;/p&gt;
&lt;h2&gt;Comment j'ai commenc√© √† apprendre Rust&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://doc.rust-lang.org/stable/book/second-edition/"&gt;The Rust Programming Language (2nd edition)&lt;/a&gt; est un chouette un livre en ligne avec des exemples concrets de petits projets impl√©ment√©s pas-√†-pas (un outil en ligne de commande et un serveur web).&lt;/p&gt;
&lt;p&gt;Apr√®s avoir lu partiellement ce livre, j'ai "port√©" en Rust un projet personnel nomm√© &lt;a href="https://github.com/nicokosi/hubstats"&gt;hubstats&lt;/a&gt;. Hubstats est un outil en ligne de commande que j'ai √©crit en Clojure, qui utilise une API REST GitHub pour afficher des informations sur les pull requests GitHub dans la sortie standard. J'ai baptis√© le projet Rust &lt;a href="https://github.com/nicokosi/pullpito/"&gt;pullpito&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ce portage a √©t√© une fa√ßon ludique et facile d'apprendre Rust car je n'ai eu ni √† r√©fl√©chir au "quoi" (afficher des informations sur le pull requests GitHub), ni au "comment" (appeler l'API GitHub que j'avais d√©j√† utilis√©e dans le projet existant) : je me suis uniquement foculis√© sur l'impl√©mentation en Rust.&lt;/p&gt;
&lt;h2&gt;Mes premi√®res impressions&lt;/h2&gt;
&lt;p&gt;Le code Rust, √ßa &lt;strong&gt;d√©pote s√©v√®re&lt;/strong&gt; ! Comparons par exemple l'ex√©cution des tests unitaires &lt;code&gt;pullpito&lt;/code&gt;, qui se lancent en une demi seconde :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pullpito $&amp;gt; time (cargo test --quiet)

running 8 tests
# couic
test result: ok. 8 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out

( cargo test --quiet; )  0.43s user 0.21s system 96% cpu 0.665 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Alors que les tests unitaires de &lt;code&gt;hubstats&lt;/code&gt; se lancent en 10 secondes :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;hubstats $&amp;gt; time (lein test)
# couic

Ran 3 tests containing 20 assertions.
0 failures, 0 errors.
( lein test; )  10.86s user 0.70s system 129% cpu 8.923 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: la commande &lt;code&gt;cargo&lt;/code&gt; lance &lt;a href="https://github.com/rust-lang/cargo/"&gt;Cargo&lt;/a&gt;, l'outil de build de Rust ; la commande &lt;code&gt;lein&lt;/code&gt; lance &lt;a href="https://leiningen.org/"&gt;Leiningen&lt;/a&gt;, un des outils de build de Clojure.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Comparons d√©sormais les temps d'ex√©cutions des lignes de commande. &lt;code&gt;pullpito&lt;/code&gt; se lance en 20 millisecondes sur ma machine :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pullpito $&amp;gt; time (cargo run --quiet python/peps)
pull requests for &amp;quot;python/peps&amp;quot; -&amp;gt;
  opened per author:
    brainwane: 1
  commented per author:
    the-knights-who-say-ni: 1
    stevendaprano: 2
    pradyunsg: 2
    gvanrossum: 1
    6502: 1
    Rosuav: 1
    brainwane: 1
  closed per author:
    markshannon: 1

( cargo run --quiet python/peps; )  0.22s user 0.09s system 20% cpu 1.524 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;...alors que &lt;code&gt;hubstats&lt;/code&gt; prend une dizaine de secondes (oups, un peu d'optimisation serait n√©cessaire üòá) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;hubstats $&amp;gt; time (lein run --organization python --repository peps)
pull requests for python/peps -&amp;gt;
    since 2018-05-15T05:35:57Z
        8 opened / 8 closed / 2 commented (15 comments)
        opened per author:  {encukou 2, willingc 1, jdemeyer 1, gvanrossum 1, ethanhs 1, daxm 1, brainwane 1}
        comments per author:  {tim-one 4, ethanhs 3, vlasovskikh 2, gvanrossum 2, JelleZijlstra 2, ilevkivskyi 1, Rosuav 1}
        closed per author:  {brettcannon 4, markshannon 3, encukou 1}
( lein run --organization python --repository peps; )  11.30s user 0.77s system 66% cpu 18.160 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Qu'en est-il de la &lt;strong&gt;compilation&lt;/strong&gt; ? La premi√®re compilation est plus lente car toutes les d√©pendances doivent √©galement √™tre compil√©es. Sur ma machine, &lt;code&gt;pullpito&lt;/code&gt; compile en 40 secondes :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pullpito $&amp;gt; time (cargo clean &amp;amp;&amp;amp; cargo build)
Compiling void v1.0.2
   Compiling byteorder v1.2.2
   Compiling serde v1.0.37
   Compiling scoped-tls v0.1.
# snip
    Finished dev [unoptimized + debuginfo] target(s) in 41.53 secs
( cargo clean &amp;amp;&amp;amp; cargo build; )  213.99s user 16.77s system 552% cpu 41.788 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Mais le compilateur Rust est incr√©mental, les compilations suivantes seront plus rapides voire imm√©diates si le code source ne change pas :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pullpito $&amp;gt; cargo build
    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;De son c√¥t√©, &lt;code&gt;hubstats&lt;/code&gt; compile en 40 secondes (ses d√©pendances ne sont pas compil√©es) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;hubstats $&amp;gt; time (lein clean &amp;amp;&amp;amp; lein uberjar)
# couic
( lein clean &amp;amp;&amp;amp; lein uberjar; )  37.55s user 6.49s system 223% cpu 19.750 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;A propos de Rust, le langage&lt;/h2&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Ownership, gloups ! üò±&lt;/h3&gt;
&lt;p&gt;Rust g√®re la m√©moire de fa√ßon particuli√®re. Au lieu d'utiliser un ramasse-miettes (&lt;em&gt;garbage collector&lt;/em&gt;) comme en Java ou une gestion manuelle comme en C/C++, la m√©moire est automatiquement r√©cup√©r√©e gr√¢ce aux &lt;a href="https://doc.rust-lang.org/book/second-edition/ch04-01-what-is-ownership.html"&gt;r√®gles d'&lt;em&gt;ownership&lt;/em&gt;&lt;/a&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="n"&gt;Each&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Rust&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt; &lt;span class="n"&gt;its&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;There&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;When&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="n"&gt;goes&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;dropped&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cela semble facile, mais √ßa l'est beaucoup moins en r√©alit√©.&lt;/p&gt;
&lt;p&gt;N'ayant pas encore bien compris les implications du concept d'ownership, je n'irai pas plus loin sur ce sujet. Ma compr√©hension actuelle se limite √† corriger toutes les erreurs de compilation li√©es aux violation des ces r√®gles ! üòá&lt;/p&gt;
&lt;p&gt;Pour plus de pr√©cisions, lire le chapitre &lt;a href="https://doc.rust-lang.org/book/second-edition/ch04-00-understanding-ownership.html"&gt;"Understanding Ownership"&lt;/a&gt; de "The Rust Programming Language".&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Immuable, par d√©faut üòé&lt;/h3&gt;
&lt;p&gt;Les variables sont immuables, par d√©faut. Elles ne peuvent pas √™tre r√©-assign√©es √† moins d'√™tre explicitement d√©clar√©es &lt;em&gt;mutables&lt;/em&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// name = &amp;quot;bar&amp;quot;; // G√©n√©rerait l&amp;#39;erreur de compilation &amp;quot;error: re-assignment of immutable variable&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;changing_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;changing_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;N√©anmoins, les variables immuables peut √™tre surcharg√©es (&lt;em&gt;shadowed&lt;/em&gt;) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// &amp;quot;shadowed variable&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Inf√©rence de type üòé&lt;/h3&gt;
&lt;p&gt;L'inf√©rence de type est bien sympathique et simplifie le code :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// le type peut √™tre inf√©r√© :&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// ou bien sp√©cifi√© :&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;: &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Filtrage par motif (&lt;em&gt;pattern matching&lt;/em&gt;) üòé&lt;/h3&gt;
&lt;p&gt;On peut utiliser le pattern matching au lieu de if/else... et c'est cool !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Par contre, le fait que les variables soient "emprunt√©es" (&lt;em&gt;variable borrowing&lt;/em&gt;) semble rendre le pattern matching plus dur √† utiliser que dans d'autres langages (comme Scala). Se r√©f√©rer √† &lt;a href="https://stackoverflow.com/questions/29926724/matching-string-cannot-move-out-of-borrowed-content"&gt;ce fil Stack Overflow&lt;/a&gt;. Note personnelle : creuser ce sujet.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Tuples, √©num√©rations et structures üòé&lt;/h3&gt;
&lt;p&gt;Rust permet d'utiliser des tuples, des √©num√©rations et des structures de donn√©es :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#![allow(dead_code)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[derive(Debug)]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;Suite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;CLUB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DIAMOND&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HEART&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SPADE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[derive(Debug)]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;Rank&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Ace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;King&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Queen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Jack&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[derive(Debug)]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;suite&lt;/span&gt;: &lt;span class="nc"&gt;Suite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;: &lt;span class="nc"&gt;Rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Testons cela avec le REPL &lt;code&gt;rusti&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;rusti&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Card&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;suite&lt;/span&gt;: &lt;span class="nc"&gt;Suite&lt;/span&gt;::&lt;span class="n"&gt;CLUB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;: &lt;span class="nc"&gt;Rank&lt;/span&gt;::&lt;span class="n"&gt;King&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Card&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;suite&lt;/span&gt;: &lt;span class="nc"&gt;CLUB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;: &lt;span class="nc"&gt;King&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Outillage&lt;/h2&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Pas de REPL (avec un support complet de Rust) üò¢&lt;/h3&gt;
&lt;p&gt;Il n'y a pas de REPL (Read Eval Print Loop) officiel. C'est bien dommage !&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/murarth/rusti"&gt;rusti&lt;/a&gt; peut d√©panner mais est limit√© et ne supporte pas toutes les √©volutions r√©centes du langage.&lt;/p&gt;
&lt;p&gt;Les REPL en ligne comme &lt;a href="https://repl.it/site/languages/rust"&gt;repl.it&lt;/a&gt; peuvent se r√©v√©ler utiles, m√™me s'ils sont limit√©s (par exemple, on ne peut pas toujours y importer des d√©pendances externes appel√©es &lt;code&gt;crates&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;Gestion des d√©pendances (descripteur &lt;code&gt;Cargo.toml&lt;/code&gt;) avec gestion s√©mantique (&lt;em&gt;semantic versioning&lt;/em&gt;) üòé&lt;/h3&gt;
&lt;p&gt;Chaque d√©pendance binaires (appel√©e &lt;code&gt;crate&lt;/code&gt;) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a un descripteur &lt;a href="https://semver.org/"&gt;versionn√© "s√©mantiquement"&lt;/a&gt;. Par exemple, la version de pullpito est 0.1.0, comme indiqu√© dans le descripteur &lt;code&gt;Cargo.toml&lt;/code&gt; :&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pullpito $&amp;gt; grep &amp;quot;^version =&amp;quot; Cargo.toml
version = &amp;quot;0.1.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;d√©clare la version des ses d√©pendances :&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pullpito $&amp;gt; grep -A 10 &amp;quot;dependencies&amp;quot; Cargo.toml
[dependencies]
log = &amp;quot;0.4&amp;quot;
env_logger = &amp;quot;0.5&amp;quot;
futures = &amp;quot;0.1&amp;quot;
serde = &amp;quot;1.0&amp;quot;
serde_json = &amp;quot;1.0&amp;quot;
serde_derive = &amp;quot;1.0&amp;quot;
chrono = { version = &amp;quot;0.4&amp;quot;, features = [&amp;quot;serde&amp;quot;] }
reqwest = &amp;quot;0.8&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cool et concis, non ?&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Formattage du code üòé&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang-nursery/rustfmt"&gt;rustfmt&lt;/a&gt; est l'outil standard pour formater le code en utilisant un style par d√©faut :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pullpito $&amp;gt; cat src/main.rs
fn main() {
  println! (&amp;quot;foo&amp;quot;);
 let bar = &amp;quot;bar&amp;quot;;
}

pullpito $&amp;gt; cargo fmt

pullpito $&amp;gt; cat src/main.rs
fn main() {
    println!(&amp;quot;foo&amp;quot;);
    let bar = &amp;quot;bar&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Plus de guerre du style "tabulation / espace" ! Cf. &lt;a href="https://xkcd.com/1285/"&gt;https://xkcd.com/1285/&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Compilateur "user-friendly" (souvent) üòé&lt;/h3&gt;
&lt;p&gt;En cas d'erreur, le compilateur Rust compiler fait souvent des suggestions "amicales". Par exemple :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#[derive(Debug)]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;Suite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CLUB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{:?}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Suite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CLUB&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;g√©n√®re l'erreur suivante :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;error[E0423]: expected value, found enum `Suite`
 --&amp;gt; src/main.rs:5:22
  |
5 |     println!(&amp;quot;{:?}&amp;quot;, Suite.CLUB);
  |                      ^^^^^
  |
  = note: did you mean to use one of the following variants?
          - `Suite::CLUB`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Outillage multi-version üòé&lt;/h3&gt;
&lt;p&gt;Rust a trois canaux de mise √† jour (&lt;em&gt;release channels&lt;/em&gt;): stable, beta, et nightly. On peut en utiliser un ou plusieurs. Par exemple, si un projet n√©cessite le "stable toolchain", un autre peut avoir besoin du "nightly". Dans ce cas, on utilise la commande &lt;code&gt;rustup&lt;/code&gt; pour installer et utiliser ces deux versions.&lt;/p&gt;
&lt;p&gt;Par exemple, installons le toolchain "nightly" :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; rustup install nightly
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Il y a maintenant deux toolchains : &lt;code&gt;stable&lt;/code&gt; (celui par d√©faut) and &lt;code&gt;nightly&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; rustup show
Default host: x86_64-apple-darwin

installed toolchains
--------------------

stable-x86_64-apple-darwin
nightly-x86_64-apple-darwin

active toolchain
----------------

stable-x86_64-apple-darwin (default)
rustc 1.25.0 (84203cac6 2018-03-25)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On peut ensuite :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;changer le toolchain par d√©faut via &lt;code&gt;rustup default&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;activer un toolchain via &lt;code&gt;rustup set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;utiliser un toolchain √† la demande via &lt;code&gt;rustup run $toolchain $cmd&lt;/code&gt; (exemple : &lt;code&gt;rustup run nightly cargo build&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;etc.&lt;/p&gt;</content><category term="all"></category><category term="rust"></category></entry><entry><title>Du Clojure "natif" gr√¢ce √† GraalVM</title><link href="https://nicokosi.github.io/clojure-goes-native-with-graalvm.html" rel="alternate"></link><published>2018-05-12T13:00:00+02:00</published><updated>2018-05-12T13:00:00+02:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2018-05-12:/clojure-goes-native-with-graalvm.html</id><summary type="html">&lt;p&gt;G√©n√©rer un programme ex√©cutable natif via GraalVM pour un projet Clojure, 'hubstats'&lt;/p&gt;</summary><content type="html">&lt;h2&gt;GraalVM, qu'est-ce que c'est ?&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.graalvm.org/"&gt;GraalVM&lt;/a&gt; est une machine virtuelle multi-langages : Java, autres langages de la machine virtuelle Java (Scala, Groovy, Kotlin etc.), JavaScript, LLVM, Ruby et R.&lt;/p&gt;
&lt;p&gt;GraalVM permet √©galement de g√©n√©rer des ex√©cutables natifs √† partir du code Java :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;For&lt;/span&gt; &lt;span class="nv"&gt;JVM&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;based&lt;/span&gt; &lt;span class="nv"&gt;languages&lt;/span&gt;, &lt;span class="nv"&gt;GraalVM&lt;/span&gt; &lt;span class="nv"&gt;offers&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;mechanism&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;create&lt;/span&gt; &lt;span class="nv"&gt;precompiled&lt;/span&gt; &lt;span class="nv"&gt;native&lt;/span&gt; &lt;span class="nv"&gt;images&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;instant&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="nv"&gt;up&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;low&lt;/span&gt; &lt;span class="nv"&gt;memory&lt;/span&gt; &lt;span class="nv"&gt;footprint&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Oracle labs a annonc√© en avril 2018 la sortie de &lt;a href="https://blogs.oracle.com/developers/announcing-graalvm"&gt;GraalVM 1.0 release candidate&lt;/a&gt;, donc c'est parti pour un essai !&lt;/p&gt;
&lt;h2&gt;Construire un ex√©cutable √† partir d'un projet Clojure&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/nicokosi/hubstats"&gt;hubstats&lt;/a&gt; est mon projet perso impl√©ment√© en Clojure qui permet d'afficher des statistiques sur les pull requests GitHub. C'est un outil en ligne de commande utilisant une machine virtuelle Java, donc GraalVM devrait permettre d'acc√©l√©rer son d√©marrage en g√©n√©rant un ex√©cutable "natif".&lt;/p&gt;
&lt;p&gt;Notes :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cet &lt;a href="https://www.innoq.com/en/blog/native-clojure-and-graalvm/"&gt;article int√©ressant&lt;/a&gt; m'a inspir√© et m'a aid√©.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;J'ai utilis√© la version "Community Edition" de GraalVM qui est gratuite et open source (une version "Enterprise Edition" existe √©galement).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Essai n¬∞1&lt;/h3&gt;
&lt;p&gt;A partir du "fat" JAR de mon projet 'hubstats' ("fat jar" : archive de code Java qui inclut toutes les d√©pendances), j'ai lanc√© la commande &lt;code&gt;native-image&lt;/code&gt; de &lt;a href="https://github.com/Danny02/graalvm-docker"&gt;GraaVM 1.0.0-rc1 dans un conteneur Docker&lt;/a&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;native-image &lt;span class="se"&gt;\&lt;/span&gt;
  -jar hubstats-0.1.0-SNAPSHOT-standalone.jar &lt;span class="se"&gt;\&lt;/span&gt;
  -H:+ReportUnsupportedElementsAtRuntime &lt;span class="se"&gt;\&lt;/span&gt;
  hubstats.core
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(cf. &lt;a href="https://github.com/nicokosi/hubstats/pull/12/files"&gt;tous les d√©tails&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Pas de chance, la g√©n√©ration de l'ex√©cutable √©choue :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Step&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;native&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;   &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;hubstats&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.1.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;standalone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;   &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="o"&gt;:+&lt;/span&gt;&lt;span class="n"&gt;ReportUnsupportedElementsAtRuntime&lt;/span&gt;   &lt;span class="n"&gt;hubstats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;
 &lt;span class="o"&gt;---&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Running&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;e7f911774bd4&lt;/span&gt;
&lt;span class="kr"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;26681&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
   &lt;span class="n"&gt;classlist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;159.26&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;485.02&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
       &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;563.80&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
    &lt;span class="n"&gt;analysis&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;109.06&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="n"&gt;fatal&lt;/span&gt; &lt;span class="nf"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NullPointerException&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;sun&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeConstructorAccessorImpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newInstance0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Native&lt;/span&gt; &lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;sun&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeConstructorAccessorImpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeConstructorAccessorImpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;sun&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DelegatingConstructorAccessorImpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DelegatingConstructorAccessorImpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;423&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForkJoinTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getThrowableException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ForkJoinTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;598&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForkJoinTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ForkJoinTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1005&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;398&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageGeneratorRunner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buildImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageGeneratorRunner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;240&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageGeneratorRunner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageGeneratorRunner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;337&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executeCompilation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;378&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;processCommand&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;315&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withJVMContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;396&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;312&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;serve&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;216&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runWorker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1149&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;624&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;748&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Caused&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NullPointerException&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pointsto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scanField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;113&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pointsto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doScan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;263&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pointsto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;307&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pointsto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scanBootImageHeapRoots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pointsto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scanBootImageHeapRoots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pointsto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BigBang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkObjectGraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BigBang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;581&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pointsto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BigBang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BigBang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;552&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doRun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;653&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;381&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForkJoinTask&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;AdaptedRunnableAction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ForkJoinTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1386&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForkJoinTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doExec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ForkJoinTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;289&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForkJoinPool&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;WorkQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ForkJoinPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1056&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForkJoinPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runWorker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ForkJoinPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1692&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForkJoinWorkerThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ForkJoinWorkerThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;157&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Processing&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="kr"&gt;build&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Le probl√®me ressemble fortement √† &lt;a href="https://github.com/oracle/graal/issues/385"&gt;issue#385&lt;/a&gt; et &lt;a href="https://github.com/oracle/graal/issues/375"&gt;issue#375&lt;/a&gt;. Si je comprends bien, il est li√© √† l'une des limitations de GraalVM : &lt;a href="https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md#static-initializers"&gt;"static initializers" limitation&lt;/a&gt;. üò¢&lt;/p&gt;
&lt;h3&gt;Essai n¬∞2&lt;/h3&gt;
&lt;p&gt;Puisque certaines corrections √©taient uniquement disponibles dans le &lt;a href="https://github.com/graalvm/"&gt;code source de GraalVM&lt;/a&gt;, j'ai voulu essayer avec le module &lt;code&gt;substratevm&lt;/code&gt;
(qui inclut la commande 'native-image') construit √† partir du code source.&lt;/p&gt;
&lt;p&gt;J'ai donc r√©cup√©r√© le code source de GraalVM :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone git@github.com:oracle/graal.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Puis en suivant les &lt;a href="https://github.com/oracle/graal/tree/master/substratevm"&gt;indications du module substratevm&lt;/a&gt;, j'ai t√©l√©charg√© le &lt;a href="http://www.oracle.com/technetwork/oracle-labs/program-languages/downloads/index.html"&gt;JDK GraalVM "labs"&lt;/a&gt; puis j'ai construit le module 'substratevm' :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; substratevm
&lt;span class="nv"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/Downloads/labsjdk1.8.0_161-jvmci-0.42/Contents/Home ../../mx/mx build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;J'ai ensuite lanc√© la commande 'native-image' qui est malheuresement rest√©e "coinc√©e" :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="o"&gt;=~/&lt;/span&gt;&lt;span class="n"&gt;Downloads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;labsjdk1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="n"&gt;_161&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jvmci&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.42&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Contents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;../&lt;/span&gt;&lt;span class="n"&gt;graal&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;substratevm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;native&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hubstats&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;standalone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;hubstats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;
&lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18933&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;55103&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
   &lt;span class="n"&gt;classlist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;744.32&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;531.16&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
       &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;401.40&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Une anomalie similaire √† d√©j√† √©t√© rapport√©e : &lt;a href="https://github.com/oracle/graal/issues/411"&gt;"native image failed to build jar&lt;/a&gt;. üò≠&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;C'est s√ªr, ces premiers essais ont √©t√© infructueux. GraalVM est un projet encore jeune que je ne connais pas vraiment. N√©anmoins, ce fut une exp√©rience sympathique de d√©couvrir cet outil prometteur ! üòç&lt;/p&gt;
&lt;p&gt;A refaire sous peu, avec un nouvel article √† la cl√© ?&lt;/p&gt;</content><category term="all"></category><category term="clojure native graalvm"></category></entry><entry><title>G√©n√©rer ses graphiques Strava avec R</title><link href="https://nicokosi.github.io/creating-strava-charts-with-r.html" rel="alternate"></link><published>2017-04-14T12:10:00+02:00</published><updated>2017-04-14T12:10:00+02:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2017-04-14:/creating-strava-charts-with-r.html</id><summary type="html">&lt;p&gt;Utilisation de R pour g√©n√©rer des graphiques Strava personnalis√©s&lt;/p&gt;</summary><content type="html">&lt;h1&gt;G√©n√©rer ses graphiques Strava avec R&lt;/h1&gt;
&lt;p&gt;Cet article fait suite √† &lt;a href="creating-strava-charts-with-clojure-and-incanter.html"&gt;G√©n√©rer ses graphiques Strava avec Clojure et Incanter&lt;/a&gt; : en effet, j'ai d√©cid√© de faire un deuxi√®me essai de g√©n√©ration de graphiques avec R.&lt;/p&gt;
&lt;p&gt;R est un langage id√©al pour le calcul statistique et la g√©n√©ration de graphiques. J'ai fait le choix d'utiliser l'IDE gratuit &lt;a href="https://www.rstudio.com/products/RStudio/"&gt;RStudio Desktop&lt;/a&gt; qui contient de nombreuses facilit√©s (visualisation des donn√©es, historique des variables et des graphiques, aide int√©gr√©e etc.). RStudio Desktop est &lt;a href="http://www.rstudio.com/products/rstudio/download/"&gt;t√©l√©chargeable&lt;/a&gt; ou peut √™tre install√© via certains gestionnaires de paquets (exemple pour mac avec &lt;code&gt;homebrew&lt;/code&gt;, ex√©cuter &lt;code&gt;brew cask install rstudio&lt;/code&gt; dans un terminal).&lt;/p&gt;
&lt;p&gt;Le but est toujours de :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;appeler l'API Strava pour r√©cup√©rer les donn√©es au format JSON&lt;/li&gt;
&lt;li&gt;faire quelques transformations, essentiellement des conversions&lt;/li&gt;
&lt;li&gt;afficher des graphiques (exemple : temps en mouvement en fonction de la distance parcourue)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;C'est parti !&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
R b√©n√©ficie de tr√®s nombreuses biblioth√®ques additionnelles qui sont publiques et t√©l√©chargeables automatiquement ("CRAN repository"). Voici les instructions d'import correspondant √† celles que j'ai utilis√©es :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rjson&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;httr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ggplot2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scales&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;1. R√©cup√©rer les donn√©es Strava&lt;/h3&gt;
&lt;p&gt;Le code suivant appelle l'&lt;a href="http://strava.github.io/api/v3/activities/"&gt;API Strava "activities"&lt;/a&gt; avec un jeton d'autorisation (access token) et r√©cup√®re les 200 derni√®res sorties ("activities" = activit√© de course √† pied, v√©lo ou natation) sous forme d'une cha√Æne de caract√®res (&lt;code&gt;characters&lt;/code&gt;) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter Strava access token: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;activities&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://www.strava.com/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;api/v3/activities&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;per_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;activities&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Retrieve JSON content as string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;2. Transformer les donn√©es&lt;/h3&gt;
&lt;p&gt;Il faut ensuite transformer ces donn√©es en donn√©es tabulaires, appel√©es &lt;code&gt;dataframes&lt;/code&gt;. Petite subtilit√©, il faut it√©rer sur les √©l√©ments des listes pour remplacer les valeurs vides (&lt;code&gt;null&lt;/code&gt;) par des valeurs manquantes (&lt;code&gt;NA&lt;/code&gt;, pour "not available") :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;activities&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;fromJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# Transformer le contenu JSON en liste&lt;/span&gt;
&lt;span class="n"&gt;activities&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;      &lt;span class="c1"&gt;# appliquer une fonction anonyme √† chaque √©l√©ment de la liste&lt;/span&gt;
  &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is.null&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kc"&gt;NA&lt;/span&gt;           &lt;span class="c1"&gt;# remplacer les valeurs nulles en &amp;quot;N/A&amp;quot;&lt;/span&gt;
  &lt;span class="nf"&gt;unlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;do.call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rbind&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# transformer les listes de listes en dataframe&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;J'avoue que j'ai trich√© en "googlant" car les manipulations de structures ne sont pas super √©videntes pour moi ! ü§ì&lt;/p&gt;
&lt;p&gt;On peut en tout cas remarquer que les variables ne sont pas typ√©es - R est un language dynamique - et peuvent √™tre r√©-affect√©es. Par exemple, &lt;code&gt;activities&lt;/code&gt; est une variable de type &lt;code&gt;character&lt;/code&gt; (cha√Æne de caract√®res, contenant les donn√©es JSON) qui devient ensuite une variable de type &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Il m'a fallu convertir les distances et les dur√©es pour utiliser des unit√©s plus appriopri√©es :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Convertir les dur√©es en minutes (l&amp;#39;API Strava API retourne des secondes) :&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;moving_time&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;as.numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;as.character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;moving_time&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;

&lt;span class="c1"&gt;# Convertir les distances en kilom√®tres (l&amp;#39;API Strava API retourne des m√®tres) :&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;as.numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;as.character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pour l'anectode, les donn√©es sont des &lt;code&gt;factors&lt;/code&gt;, c'est-√†-dire des donn√©es dont on conna√Æt toutes les valeurs (une √©num√©ration, en quelque sorte). Avant de les convertir, il faut r√©cup√©rer leur libell√© via la fonction &lt;code&gt;as.character&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;3. Affichage d'un graphique&lt;/h3&gt;
&lt;p&gt;La derni√®re √©tape consiste √† utiliser l'une des fonctions de la librairie &lt;code&gt;ggplot2&lt;/code&gt; pour afficher et sauvegarder un graphique. Le code suivant affiche le temps en mouvement en fonction de la distance parcourue :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="nf"&gt;ggplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;aes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;moving_time&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="c1"&gt;# √† partir du dataframe, afficher les donn√©es &amp;#39;distance&amp;#39; en fonction de &amp;#39;moving_time`&lt;/span&gt;
    &lt;span class="nf"&gt;geom_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#CC0000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="c1"&gt;# afficher les points en rouge&lt;/span&gt;
    &lt;span class="nf"&gt;geom_smooth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# ajout d&amp;#39;une courbe de r√©gression lin√©aire +&lt;/span&gt;
    &lt;span class="nf"&gt;xlab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;distance per activity (kilometers)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# libell√© de l&amp;#39;axe X +&lt;/span&gt;
    &lt;span class="nf"&gt;ylab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;moving time (minutes)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# libell√© de l&amp;#39;axe Y&lt;/span&gt;
  &lt;span class="nf"&gt;ggsave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/tmp/moving-time.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# sauvegarder dans un fichier PNG&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Le graphique g√©n√©r√© :
&lt;img alt="Chart: distance et temps en mouvement" src="images/r-chart-distance-per-moving-time.png"&gt;&lt;/p&gt;
&lt;p&gt;Voici le lien vers le &lt;a href="https://gist.github.com/nicokosi/241331f67692945ddca4e4ea2cc0597d"&gt;code complet&lt;/a&gt; pour afficher plusieurs graphiques similaires.&lt;/p&gt;</content><category term="all"></category><category term="strava charts r rstudio"></category></entry><entry><title>G√©n√©rer ses graphiques Strava avec Clojure et Incanter</title><link href="https://nicokosi.github.io/creating-strava-charts-with-clojure-and-incanter.html" rel="alternate"></link><published>2017-04-09T17:37:00+02:00</published><updated>2017-04-09T17:37:00+02:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2017-04-09:/creating-strava-charts-with-clojure-and-incanter.html</id><summary type="html">&lt;p&gt;Utilisation de la librairie Clojure Incanter pour g√©n√©rer des graphiques Strava personnalis√©s&lt;/p&gt;</summary><content type="html">&lt;h1&gt;G√©n√©rer ses graphiques Strava avec Clojure et Incanter&lt;/h1&gt;
&lt;p&gt;J'utilise &lt;a href="https://www.strava.com/"&gt;Strava&lt;/a&gt; pour enregistrer mes sessions de jogging : apr√®s avoir enregistr√© une session avec mon smartphone, je la publie pour pouvoir la partager et la revoir plus tard.&lt;/p&gt;
&lt;p&gt;Strava fournit quelques tableaux de bord mais je voulais g√©n√©rer mes propres graphiques afin de visualiser ma progression.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Premier essai avec R&lt;/h2&gt;
&lt;p&gt;J'ai d'abord essay√© d'utiliser &lt;a href="https://www.rstudio.com/"&gt;RStudio&lt;/a&gt;, un IDE pour le langage R. Je pense que c'est un outil adapt√© mais je le connais tr√®s peu. Apr√®s avoir essay√© pendant quelques heures d'importer mes donn√©es et de les transformer, j'ai abandonn√© !&lt;/p&gt;
&lt;p&gt;&lt;img alt="RStudio : un IDE pour la plate-forme R" src="images/RStudio.png"&gt;&lt;/p&gt;
&lt;p&gt;J'essairai une autre fois ! üòÖ&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Deuxi√®me essai avec Clojure et Incanter&lt;/h2&gt;
&lt;p&gt;J'ai ensuite essay√© d'utiliser &lt;a href="incanter.org"&gt;Incanter&lt;/a&gt;, une librairie Clojure inspir√©e de R :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clojure-based, R-like platform for statistical computing and graphics.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;J'avais besoin de faire 3 choses :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;appeler l'API Strava pour r√©cup√©rer les donn√©es au format JSON&lt;/li&gt;
&lt;li&gt;faire quelques transformations, essentiellement des conversions (m/s en km/h, secondes en minutes)&lt;/li&gt;
&lt;li&gt;afficher des graphiques (exemple : √©volution de la vitesse moyenne par sortie en fonction du temps)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Allons-y !&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;1. R√©cup√©rer les donn√©es Strava&lt;/h3&gt;
&lt;p&gt;La fonction suivante appelle l'&lt;a href="http://strava.github.io/api/v3/activities/"&gt;API Strava "activities"&lt;/a&gt; avec un jeton d'autorisation (access token) et r√©cup√®re les 200 derni√®res sorties ("activities" = activit√© de course √† pied, v√©lo ou natation) sous forme d'un tableau d'objets JSON :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;strava-activities&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;token&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;json/read-str&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:body&lt;/span&gt;
                   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;http-client/get&lt;/span&gt;
                     &lt;span class="s"&gt;&amp;quot;https://www.strava.com/api/v3/activities&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:query-params&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:access_token&lt;/span&gt; &lt;span class="nv"&gt;token&lt;/span&gt; &lt;span class="ss"&gt;:per_page&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;}}))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;2. Transformer les donn√©es&lt;/h3&gt;
&lt;p&gt;On d√©finit les fonctions suivantes pour transformer les donn√©es :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;; Convertir les vitesses en km/h (l&amp;#39;API Strava retourne des m/s) :&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;meters-per-second-&amp;gt;kilometers-per-hour&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;partial * &lt;/span&gt;&lt;span class="mf"&gt;3.6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;; Convertir les dur√©es en minutes (l&amp;#39;API Strava API retourne des secondes) :&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;seconds-&amp;gt;minutes&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;; Incanter peut seulement g√©n√©rer des graphiques √† partir de donn√©es num√©riques, les dates au format ISO doivent donc √™tre converties en timestamps :&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;string-date-&amp;gt;millis&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;str-date&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.getTime&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;clojure.instant/read-instant-date&lt;/span&gt; &lt;span class="nv"&gt;str-date&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ces fonctions peuvent √™tre appliqu√©es aux donn√©es brutes, en utilisant par exemple l'op√©rateur "thread-last" (&lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt;), bien pratique pour cha√Æner les appels de fonctions :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;strava-activities&lt;/span&gt; &lt;span class="nv"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;update-in&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;average_speed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;meters-per-second-&amp;gt;kilometers-per-hour&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;update-in&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;start_date_local&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;string-date-&amp;gt;millis&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;update-in&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elapsed_time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;seconds-&amp;gt;minutes&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;update-in&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;moving_time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;seconds-&amp;gt;minutes&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;3. Affichage d'un graphique avec Incanter&lt;/h3&gt;
&lt;p&gt;La derni√®re √©tape consiste √† utiliser l'une des fonctions de la librairie Incanter pour afficher un graphique. L'exemple de code suivant affiche l'√©volution de la vitesse moyenne de chaque sortie en fonction de la date de la sortie :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;display-chart&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;token&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;activities&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-activities&lt;/span&gt; &lt;span class="nv"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;with-data&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;to-dataset&lt;/span&gt; &lt;span class="nv"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;view&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;view&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;time-series-plot&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;$&lt;/span&gt; &lt;span class="ss"&gt;:start_date_local&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;$&lt;/span&gt; &lt;span class="ss"&gt;:average_speed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="ss"&gt;:group-by&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;$&lt;/span&gt; &lt;span class="ss"&gt;:type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="ss"&gt;:title&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Average speed over time&amp;quot;&lt;/span&gt;
          &lt;span class="ss"&gt;:x-label&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
          &lt;span class="ss"&gt;:y-label&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;average speed (km/h)&amp;quot;&lt;/span&gt;
          &lt;span class="ss"&gt;:points&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;
          &lt;span class="ss"&gt;:legend&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Le graphique g√©n√©r√© :
&lt;img alt="Chart: average speed over time" src="images/chart-average-speed-over-time.png"&gt;&lt;/p&gt;
&lt;p&gt;Le code complet, qui affiche plusieurs graphiques similaires, se trouve sur le &lt;a href="https://github.com/nicokosi/strava-activity-graphs/"&gt;repository GitHub strava-activity-graphs&lt;/a&gt;.&lt;/p&gt;</content><category term="all"></category><category term="strava charts clojure incanter"></category></entry><entry><title>A la d√©couverte des API GitHub en apprenant Clojure</title><link href="https://nicokosi.github.io/discover-github-apis-with-clojure.html" rel="alternate"></link><published>2017-01-11T08:56:00+01:00</published><updated>2017-01-11T08:56:00+01:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2017-01-11:/discover-github-apis-with-clojure.html</id><summary type="html">&lt;p&gt;A la d√©couverte des API GitHub en apprenant Clojure&lt;/p&gt;</summary><content type="html">&lt;p&gt;Il est toujours int√©ressant d'apprendre quelque chose, m√™me si √ßa ne concerne pas directement le travail quotidien. Pour citer &lt;a href="https://pragprog.com/book/tpp/the-pragmatic-programmer"&gt;The Pragmatic Programmer&lt;/a&gt; (note pour moi-m√™me : relire ce livre ü§ì) :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Invest Regularly in Your Knowledge Portfolio&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mon dernier projet personnel "pour apprendre" a √©t√© de cr√©er un outil en ligne de commande, nomm√© &lt;a href="https://github.com/nicokosi/hubstats"&gt;hubstats&lt;/a&gt;, permettant d'afficher un r√©sum√© statistique concernant les &lt;a href="https://help.github.com/articles/github-glossary/#pull-request"&gt;pull requests GitHub&lt;/a&gt;, afin d'avoir quelques m√©triques sur leur utilisation par mon √©quipe, au travail.&lt;/p&gt;
&lt;p&gt;Ce modeste projet m'a permis de mettre en pratique le langage de programmation &lt;a href="https://clojure.org/"&gt;Clojure&lt;/a&gt; (que je connaissais un tout petit peu), mais aussi de d√©couvrir les &lt;a href="https://developer.github.com/v3/"&gt;API REST&lt;/a&gt; et &lt;a href="https://developer.github.com/early-access/graphql/"&gt;GraphQL&lt;/a&gt; de GitHub.&lt;/p&gt;
&lt;p&gt;J'ai en plus eu la chance d'√©changer r√©guli√®rement avec un coll√®gue connaissant bien Clojure. Ce fut appr√©ciable et motivant, merci J√©r√¥me aka &lt;a href="https://github.com/jprudent"&gt;@jprudent&lt;/a&gt; !&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;A quoi √ßa sert, &lt;em&gt;hubstats&lt;/em&gt; ?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;hubstats&lt;/em&gt; est un outil en ligne de commandes qui permet de conna√Ætre, pour un &lt;a href="https://help.github.com/articles/github-glossary/#repository"&gt;repository GitHub&lt;/a&gt; donn√©, le nombre de pull requests ouvertes / comment√©es / merg√©es par auteur sur une p√©riode donn√©e (derni√®re semaine, deux derni√®res semaines, depuis une date donn√©e etc.).&lt;/p&gt;
&lt;p&gt;Voici un exemple de rapport fourni par &lt;em&gt;hubstats&lt;/em&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;lein run --organization softwarevidal --repository arthur --token &lt;span class="nv"&gt;$token&lt;/span&gt;
pull requests &lt;span class="k"&gt;for&lt;/span&gt; softwarevidal/arthur -&amp;gt;
    since &lt;span class="m"&gt;1&lt;/span&gt; week&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;:
        &lt;span class="m"&gt;9&lt;/span&gt; opened / &lt;span class="m"&gt;56&lt;/span&gt; commented / &lt;span class="m"&gt;5&lt;/span&gt; closed
        opened per author: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cmahalin&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;jcgay&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;AElMehdiVidal&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
        commented per author: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vidal-rm&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;jcgay&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;cmahalin&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
        closed per author: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cmahalin&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;AElMehdiVidal&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;jprudent&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Comment √ßa marche ?&lt;/h2&gt;
&lt;p&gt;J'ai choisi d'utiliser Clojure, un langage tr√®s diff√©rent de Java que j'utilise au quotidien.
Les particularit√©s suivantes ont notamment retenu mon attention :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;d√©veloppement dynamique et interactif : code plus simple, notamment pour un petit outil "interne" ; le &lt;a href="https://clojure.org/about/dynamic#_the_repl"&gt;REPL&lt;/a&gt; est un outil de base et son utilisation est particuli√®rement adapt√©e pour un projet de "d√©couverte"&lt;/li&gt;
&lt;li&gt;programmation fonctionnelle : l'approche fonctionnelle, bien qu'encourag√©e dans les langages "mainstream" tel Java, est obligatoire en Clojure. Les fonctions sont reines ("&lt;em&gt;first-class citizen&lt;/em&gt;"), l'immutabilit√© et la r√©cursivit√© sont de mise.&lt;/li&gt;
&lt;li&gt;Lisp : Clojure √©tant un Lisp, le code s'√©crit un peu diff√©remment : il s'apparente √† de la donn√©e et peut se transformer facilement via des commandes de type &lt;a href="https://www.emacswiki.org/emacs/ParEdit"&gt;paredit&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;simplicit√© : Clojure est un langage simple dont la philosophie est d'utiliser des petites librairies plut√¥t que des gros frameworks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Se r√©f√©rer √† &lt;a href="https://clojure.org/about/rationale"&gt;Clojure Rationale&lt;/a&gt; pour plus d'informations sur les apports de Clojure.&lt;/p&gt;
&lt;p&gt;Mon environnement de d√©veloppement a √©t√© :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.jetbrains.com/idea/"&gt;IntelliJ IDEA&lt;/a&gt; avec le &lt;a href="https://cursive-ide.com/"&gt;plugin Cursive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cursive-ide.com/userguide/paredit.html"&gt;mode &lt;em&gt;paredit&lt;/em&gt; de Cursive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leiningen.org/"&gt;Leiningen&lt;/a&gt; comme outil de build&lt;/li&gt;
&lt;li&gt;&lt;a href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt; pour l'int√©gration continue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Et alors ?&lt;/h2&gt;
&lt;p&gt;Ce que j'ai aim√© :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cet apart√© qui m'a chang√© de mes "habitudes en Java"&lt;/li&gt;
&lt;li&gt;l'utilisation de &lt;em&gt;paredit&lt;/em&gt; pour manipuler son code (cr√©er, d√©placer ou supprimer du code) est un peu d√©routante au d√©but mais tr√®s plaisante ensuite&lt;/li&gt;
&lt;li&gt;l'utilisation du REPL qui m'a servi :&lt;ul&gt;
&lt;li&gt;de "brouillon" pour √©crire mon code&lt;/li&gt;
&lt;li&gt;pour diagnostiquer et corriger des bug&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;les tests unitaires faciles √† √©crire (par exemple, la macro &lt;a href="https://clojuredocs.org/clojure.core/with-redefs"&gt;&lt;code&gt;with-redefs&lt;/code&gt;&lt;/a&gt; peut √™tre utilis√©e pour "mocker" des functions)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ce que j'ai moins aim√© :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;la d√©couverte de certaines erreurs √† l'ex√©cution, sans comprendre directement la cause de l'erreur (du genre : stack trace obscure)&lt;/li&gt;
&lt;li&gt;la documentation int√©gr√©e dans le langage ne contient pas assez d'exemples √† mon go√ªt. J'ai d√ª souvent avoir recourt √† internet et notamment √† &lt;a href="https://clojuredocs.org/"&gt;Clojure Docs&lt;/a&gt; o√π les exemples sont nombreux et utiles.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Et ensuite ?&lt;/h2&gt;
&lt;p&gt;Cet projet m'a donn√© envie d'explorer d'autres pistes :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;utiliser les API &lt;a href="https://developer.github.com/early-access/graphql/"&gt;GraphQL de GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;transformer la ligne de commande &lt;em&gt;hubstats&lt;/em&gt; en application web (via &lt;a href="https://clojurescript.org/"&gt;ClojureScript&lt;/a&gt; ?)&lt;/li&gt;
&lt;li&gt;faire un autre outil en ligne de commande&lt;/li&gt;
&lt;li&gt;essayer un autre langage (par exemple : &lt;a href="https://golang.org/"&gt;Go&lt;/a&gt; ou &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La suite au prochain √©pisode ! üòâ&lt;/p&gt;</content><category term="all"></category><category term="clojure github"></category></entry><entry><title>Jouons avec le pattern matching en Haskell</title><link href="https://nicokosi.github.io/haskell-pattern-matching.html" rel="alternate"></link><published>2016-09-27T00:00:00+02:00</published><updated>2016-09-27T00:00:00+02:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2016-09-27:/haskell-pattern-matching.html</id><summary type="html">&lt;p&gt;D√©couvrons par l'exemple le pattern matching en Haskell&lt;/p&gt;</summary><content type="html">&lt;p&gt;D√©couvrons le pattern matching en Haskell en reprenant l'exemple des cartes √† jouer utilis√© dans l'article &lt;a href="https://nicokosi.github.io/scala-pattern-matching.html"&gt;"Jouons avec le pattern matching en Scala"&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Pr√©ambule : cr√©ation d'une √©num√©ration&lt;/h2&gt;
&lt;p&gt;Codons notre √©num√©ration correspondant √† nos quatre enseignes (carreau, c≈ìur, pique et tr√®fle) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Enseigne&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Carreau&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Coeur&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Pique&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Tr√®fle&lt;/span&gt;
  &lt;span class="kr"&gt;deriving&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nous venons de cr√©er notre propre type (&lt;em&gt;data type&lt;/em&gt;) qui :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a quatre constructeurs (&lt;em&gt;value constructors&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;h√©rite des classes de base :&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Eq&lt;/code&gt; pour impl√©menter l'√©galit√© entre deux valeurs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Enum&lt;/code&gt; pour que les valeurs sont finies et ordonn√©es (&lt;em&gt;sequentially ordered types&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Show&lt;/code&gt; pour avoir une repr√©sentation sous forme de cha√Æne de caract√®res, ce qui peut √™tre utile pour d√©bugguer ou pour √©valuer interactivement du code via le REPL.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Utilisons maintenant &lt;code&gt;ghci&lt;/code&gt; (&lt;em&gt;Glascow Haskell Compiler Interactive environment&lt;/em&gt;), le REPL d'Haskell, pour interagir avec cette √©num√©ration :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Coeur&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;Coeur&lt;/span&gt;
&lt;span class="kt"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;succ&lt;/span&gt; &lt;span class="kt"&gt;Coeur&lt;/span&gt;
&lt;span class="kt"&gt;Pique&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Exemples de pattern matching&lt;/h2&gt;
&lt;h3&gt;Premier exemple basique&lt;/h3&gt;
&lt;p&gt;La fonction suivante retourne le symbole d'une enseigne :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;symbole&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Enseigne&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="nf"&gt;symbole&lt;/span&gt; &lt;span class="n"&gt;enseigne&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
  &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;enseigne&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
    &lt;span class="kt"&gt;Carreau&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô¶&amp;quot;&lt;/span&gt;
    &lt;span class="kt"&gt;Coeur&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;‚ô•&amp;quot;&lt;/span&gt;
    &lt;span class="kt"&gt;Pique&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;‚ô†&amp;quot;&lt;/span&gt;
    &lt;span class="kt"&gt;Tr√®fle&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Exemple d'appel :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;symbole&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;Coeur&lt;/span&gt;
&lt;span class="err"&gt;‚ô•&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notons que :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L'op√©rateur &lt;code&gt;$&lt;/code&gt; nous permet de cha√Æner nos fonctions, plut√¥t que de les imbriquer dans des parenth√®ses (&lt;code&gt;putStrLn(symbole(Coeur))&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;la fonction &lt;code&gt;putStrLn&lt;/code&gt; permet d'afficher des caract√®res Unicode, √† l'inverse de la fonction standard &lt;code&gt;show&lt;/code&gt; qui ne retourne que des cha√Ænes ASCII. üòé&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;
Remarque : le compilateur sait d√©tecter un pattern matching non exhaustif. Par exemple, le code suivant :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;symbole&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Enseigne&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="nf"&gt;symbole&lt;/span&gt; &lt;span class="n"&gt;enseigne&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;enseigne&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
    &lt;span class="kt"&gt;Carreau&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô¶&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;g√©n√®re un avertissement de compilation :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;warning&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kt"&gt;Wincomplete&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kt"&gt;Pattern&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;exhaustive&lt;/span&gt;
    &lt;span class="kt"&gt;In&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;alternative&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;
        &lt;span class="kt"&gt;Patterns&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;
            &lt;span class="kt"&gt;Coeur&lt;/span&gt;
            &lt;span class="kt"&gt;Pique&lt;/span&gt;
            &lt;span class="kt"&gt;Tr√®fle&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Et l'appel de cette fonction g√©n√©re une exception :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;symbole&lt;/span&gt; &lt;span class="kt"&gt;Coeur&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;*** Exception: test.hs:(5,20)-(6,17): Non-exhaustive patterns in case&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Deuxi√®me exemple, partage d'expression via un bloc 'where'&lt;/h3&gt;
&lt;p&gt;Autre exemple, impl√©mentons une fonction &lt;code&gt;couleur&lt;/code&gt; qui retourne la couleur d'une enseigne (cha√Æne de caract√®res "rouge" ou "noir") :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;couleur&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Enseigne&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="nf"&gt;couleur&lt;/span&gt; &lt;span class="n"&gt;enseigne&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;enseigne&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
    &lt;span class="kt"&gt;Carreau&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rouge&lt;/span&gt;
    &lt;span class="kt"&gt;Coeur&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rouge&lt;/span&gt;
    &lt;span class="kt"&gt;Pique&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;noir&lt;/span&gt;
    &lt;span class="kt"&gt;Tr√®fle&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;noir&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt;
      &lt;span class="n"&gt;rouge&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;rouge&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;noir&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;noir&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Exemple d'appel :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;*Main&amp;gt; couleur(Coeur)
&amp;quot;rouge&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nous avons ici utilis√© le mot-cl√© &lt;code&gt;where&lt;/code&gt; qui nous permet de partager des expressions.
&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Troisi√®me exemple, d√©structuration&lt;/h3&gt;
&lt;p&gt;D√©finissons notre propre type &lt;code&gt;Carte&lt;/code&gt; combinant un rang (1, 2, 3, ..., valet, dame, roi) et une enseigne :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Rang&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;R1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;R2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;R3&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;R4&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;R5&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;R6&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;R7&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;R8&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;R9&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;R10&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Valet&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Dame&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Roi&lt;/span&gt;
  &lt;span class="kr"&gt;deriving&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Ord&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Carte&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Carte&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;rang&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Rang&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;enseigne&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Enseigne&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kr"&gt;deriving&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Le type &lt;code&gt;Carte&lt;/code&gt; utilise la syntaxe &lt;em&gt;record&lt;/em&gt; permettant de nommer les champs.&lt;/p&gt;
&lt;p&gt;Nous pouvons ainsi utiliser le pattern matching pour "d√©structurer" une carte en filtrant les champs. Par exemple, la fonction suivante permet de d√©terminer si deux cartes, associ√©es par un &lt;em&gt;tuple&lt;/em&gt;, sont de m√™me enseigne :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;m√™meEnseigne&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Carte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Carte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="nf"&gt;m√™meEnseigne&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;Carte&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="n"&gt;enseigne1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Carte&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="n"&gt;enseigne2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
  &lt;span class="n"&gt;enseigne1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;enseigne2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Exemples d'appel :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;*Main&amp;gt; :{
*Main| m√™meEnseigne (
*Main|     Carte {rang=R1, enseigne=Carreau},
*Main|     Carte {rang=R1, enseigne=Coeur} )
*Main| :}
False
*Main&amp;gt; :{
*Main| m√™meEnseigne (
*Main|     Carte {rang=Valet, enseigne=Coeur},
*Main|     Carte {rang=R1, enseigne=Coeur} )
*Main| :}
True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Les rangs, que l'on n'utilise pas dans la fonction, ont √©t√© filtr√©s via le caract√®re &lt;em&gt;wild-card&lt;/em&gt; (&lt;code&gt;_&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Et voil√† ! ü§ì&lt;/p&gt;</content><category term="all"></category><category term="haskell"></category><category term="pattern-matching"></category></entry><entry><title>Jouons avec le pattern matching en Scala</title><link href="https://nicokosi.github.io/scala-pattern-matching.html" rel="alternate"></link><published>2016-09-14T00:00:00+02:00</published><updated>2016-09-14T00:00:00+02:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2016-09-14:/scala-pattern-matching.html</id><summary type="html">&lt;p&gt;Le pattern matching est une technique puissante permettant de filtrer et de tester la valeur de variables. Le but de cet article est d‚Äôillustrer par l'exemple le pattern matching en Scala.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Le pattern matching est une technique puissante permettant de filtrer et de tester la valeur de variables. Le but de cet article est d‚Äôillustrer par l'exemple le pattern matching en Scala.&lt;/p&gt;
&lt;p&gt;Supposons que nous voulions cr√©er une fonction retournant la couleur (noir / rouge) d'une enseigne d'une carte √† jouer (les quatre enseignes du jeu fran√ßais √©tant : tr√®fle, c≈ìur, carreau et pique).&lt;/p&gt;
&lt;p&gt;Notes : dans le code ci-dessous, les commentaires se trouvant √† la fin de chaque ligne correspondent √† la sortie standard de la console ; j'ai utilis√© un &lt;a href="https://confluence.jetbrains.com/display/IntelliJIDEA/Working+with+Scala+Worksheet"&gt;worksheet IntelliJ IDEA&lt;/a&gt; pour coder interactivement cet exemple, mais on peut bien s√ªr utiliser la console Scala.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;1√®re √©tape : cr√©ation d'une simple classe&lt;/h2&gt;
&lt;p&gt;Commen√ßons par cr√©er une classe immuable repr√©sentant l'enseigne "tr√®fle" :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tr√®fle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="n"&gt;symbole&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;
   &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="n"&gt;libell√©&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;tr√®fle&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="n"&gt;tr√®fle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Tr√®fle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Tr√®fle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;tr√®fle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;symbole&lt;/span&gt; &lt;span class="c1"&gt;// ‚ô£&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notons que cette classe permet de comparer des objets par identit√© (r√©f√©rence) et non par valeur car on ne surcharge pas la m√©thode &lt;code&gt;equals&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;tr√®fle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tr√®fle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="n"&gt;tr√®fle&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Tr√®fle&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="n"&gt;tr√®fle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Tr√®fle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="n"&gt;tr√®fle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Tr√®fle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;De m√™me, les m√©thodes &lt;code&gt;hashCode&lt;/code&gt;, &lt;code&gt;toString&lt;/code&gt; sont celles par d√©faut :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;tr√®fle&lt;/span&gt; &lt;span class="c1"&gt;// Tr√®fle@1ac88f64&lt;/span&gt;
&lt;span class="n"&gt;tr√®fle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hashCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 123717365&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Tr√®fle&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;hashCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 1323753063&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;2√®me √©tape : cr√©ation d'une case class&lt;/h2&gt;
&lt;p&gt;La cr√©ation d'une &lt;code&gt;case class&lt;/code&gt; permet :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;d'auto-impl√©menter les m√©thodes &lt;code&gt;equals&lt;/code&gt;, &lt;code&gt;hashCode&lt;/code&gt; et &lt;code&gt;toString&lt;/code&gt; ;&lt;/li&gt;
&lt;li&gt;de b√©n√©ficier de deux m√©thodes utiles au pattern matching : un "constructeur", la m√©thode &lt;code&gt;apply&lt;/code&gt;, et un "d√©-constructeur", la m√©thode &lt;code&gt;unapply&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Enseigne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbole&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;libell√©&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nous avons un constructeur "gratuit", la m√©thode &lt;code&gt;apply&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nc"&gt;Enseigne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;tr√®fle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Enseigne(‚ô£,tr√®fle)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nous avons √©galement une impl√©mentation "gratuite", bas√©e sur les champs, des m√©thodes &lt;code&gt;equals&lt;/code&gt;, &lt;code&gt;hashCode&lt;/code&gt; et &lt;code&gt;toString&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nc"&gt;Enseigne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;tr√®fle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;symbole&lt;/span&gt; &lt;span class="c1"&gt;// ‚ô£&lt;/span&gt;
&lt;span class="nc"&gt;Enseigne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;tr√®fle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nc"&gt;Enseigne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;tr√®fle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nc"&gt;Enseigne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;tr√®fle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Enseigne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;tr√®fle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nc"&gt;Enseigne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;tr√®fle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Enseigne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;tr√®fle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nc"&gt;Enseigne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;tr√®fle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;hashCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 841520215&lt;/span&gt;
&lt;span class="nc"&gt;Enseigne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;tr√®fle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;hashCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 841520215&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Etape "bonus" : cr√©ation d'une √©num√©ration&lt;/h2&gt;
&lt;p&gt;Puisque nous avons quatre enseignes, nous pouvons cr√©er une √©num√©ration. Ca ne servira pas directement √† impl√©menter notre exemple final mais l'exemple s'y pr√™te bien.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Enseignes&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="nc"&gt;TREFLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Enseigne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;tr√®fle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="nc"&gt;CARREAU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Enseigne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô¶&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;carreau&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="nc"&gt;COEUR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Enseigne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô•&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;coeur&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="nc"&gt;PIQUE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Enseigne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô†&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pique&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CARREAU&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;COEUR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;PIQUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;TREFLE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;Enseignes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;TREFLE&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nc"&gt;Enseignes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CARREAU&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nc"&gt;Enseignes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="c1"&gt;// List[Enseigne] = List(Enseigne(‚ô¶,carreau), Enseigne(‚ô•,coeur), Enseigne(‚ô†,pique), Enseigne(‚ô£,tr√®fle))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Derni√®re √©tape : pattern matchons !&lt;/h2&gt;
&lt;h3&gt;Premier exemple&lt;/h3&gt;
&lt;p&gt;Un premier exemple de pattern matching, utilis√© dans une fonction qui retourne la couleur de l'enseigne :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;indiquerJusteLaCouleur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cardSuite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Enseigne&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cardSuite&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Enseignes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;TREFLE&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Enseignes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;PIQUE&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;noir&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Enseignes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CARREAU&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Enseignes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;COEUR&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;rouge&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;aucune&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;indiquerJusteLaCouleur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Enseignes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;PIQUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// noir&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ce premier exemple met en avant :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;la notation &lt;code&gt;|&lt;/code&gt; (&lt;em&gt;disjunction&lt;/em&gt;) permettant de regrouper plusieurs cas ;&lt;/li&gt;
&lt;li&gt;la notation &lt;code&gt;_&lt;/code&gt; (&lt;em&gt;wildcard&lt;/em&gt;) pour g√©rer les autres cas.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Deuxi√®me exemple&lt;/h3&gt;
&lt;p&gt;Voici un deuxi√®me exemple montrant comment r√©cup√©rer s√©lectivement certains champs (ici, le libell√© de l'enseigne) en "d√©-structurant" notre instance de &lt;code&gt;case class&lt;/code&gt;, via la m√©thode &lt;code&gt;unapply&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;d√©crireLaCouleur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enseigne&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Enseigne&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enseigne&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Enseigne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;libell√©&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;s&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;$&lt;/span&gt;&lt;span class="n"&gt;libell√©&lt;/span&gt;&lt;span class="s"&gt; is &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="n"&gt;indiquerJusteLaCouleur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enseigne&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;d√©crireLaCouleur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Enseignes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;PIQUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// pique est noir&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Et voil√† ! ü§ì&lt;/p&gt;
&lt;p&gt;PS : merci √† J√©r√¥me Prudent pour ses tuyaux en Scala et ses avis √©clair√©s.
J√©r√¥me est contributeur au &lt;a href="http://www.arolla.fr/blog"&gt;blog d'Arolla&lt;/a&gt; (&lt;a href="http://www.arolla.fr/blog/author/jerome-prudent/"&gt;lien direct vers ses articles&lt;/a&gt;).&lt;/p&gt;</content><category term="all"></category><category term="scala"></category><category term="pattern-matching"></category><category term="console"></category><category term="repl"></category></entry><entry><title>Versionner sa configuration syst√®me via des "dotfiles"</title><link href="https://nicokosi.github.io/dotfiles.html" rel="alternate"></link><published>2016-08-17T00:00:00+02:00</published><updated>2016-08-17T00:00:00+02:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2016-08-17:/dotfiles.html</id><summary type="html">&lt;p&gt;pourquoi et comment versionner sa configuration syst√®me (syst√®me d'exploitation, shell et applications).&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction : la puissance du shell, avec ou sans ma√Ætrise ?&lt;/h2&gt;
&lt;p&gt;Cela fait environ deux ans que je d√©veloppe sur un poste "*nix" (Linux et Mac) apr√®s avoir d√©velopp√© de nombreuses ann√©es sur un poste Windows. La puissance du shell est ind√©niable : combiner des lignes de commandes simples, b√©n√©ficier de l'historique des commandes lanc√©es, etc. Pourquoi ne pas en profiter pour ma√Ætriser davantage son syst√®me en &lt;strong&gt;versionnant sa configuration&lt;/strong&gt; ?&lt;/p&gt;
&lt;h2&gt;Pr√©sentation : Dotfiles, quezako ?&lt;/h2&gt;
&lt;p&gt;Pour un syst√®me *nix (Linux, Mac, etc.), la configuration du shell et des applications est g√©n√©ralement centralis√©e dans les "dotfiles", des fichiers / r√©pertoires dont le nom commence par un point ("dot" en anglais) et qui sont charg√©s en d√©but de session interactive ou au lancement d'applications. En utilisant un gestionnaire de sources et des liens symboliques, on peut facilement &lt;strong&gt;historiser&lt;/strong&gt; et &lt;strong&gt;synchroniser&lt;/strong&gt; l'√©volution de ces dotfiles afin de :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;personnaliser le syst√®me d'exploitation&lt;/strong&gt;  : options d'affichage (exemple : choisir de masquer automatiquement la barre des applications), audio, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;personnaliser son shell&lt;/strong&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;positionnement de variables d'environnement (exemples : &lt;code&gt;PATH&lt;/code&gt;, &lt;code&gt;JAVA_HOME&lt;/code&gt;, &lt;code&gt;MVN_OPTIONS&lt;/code&gt; etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cr√©ation d'alias pour les commandes fr√©quemment utilis√©es et/ou dures √† m√©moriser (exemple : &lt;code&gt;alias mcist="mvn clean install -DskipTests"&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;utilisation d'un shell "sur-vitamin√©" du type &lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;Oh My Zsh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;g√©r√©r les applications install√©es&lt;/strong&gt;, √† condition d'utiliser un gestionnaire de paquets du type &lt;code&gt;homebrew&lt;/code&gt; (ou &lt;code&gt;apt&lt;/code&gt;, &lt;code&gt;OneGet&lt;/code&gt; etc.).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Comment ? Un exemple d'utilisation du mini-framework "holman/dotfiles"&lt;/h2&gt;
&lt;p&gt;On peut cr√©er son propre environnement ou bien utiliser un framework "dotfiles" pr√™t √† l'emploi car il existe de nombreux frameworks "dotfiles", en voici une liste non-exhaustive : &lt;a href="https://dotfiles.github.io/"&gt;https://dotfiles.github.io/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;J'ai pour ma part utilis√© &lt;a href="https://github.com/holman/dotfiles"&gt;https://github.com/holman/dotfiles&lt;/a&gt; qui permet de g√©rer sa configuration &lt;code&gt;ZSH&lt;/code&gt; en proposant les fonctionnalit√©s suivantes :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;chargement automatique des fichiers nomm√©s &lt;code&gt;*.zsh&lt;/code&gt;, quel que soit leur r√©pertoire, favorisant ainsi une structure th√©matique. Par exemple, on peut distinguer la configuration du compilateur Java, dans le script &lt;code&gt;java/env.zsh&lt;/code&gt;, de la configuration du compilateur Go, dans le script &lt;code&gt;golang/env.zsh&lt;/code&gt;. Cette approche th√©matique remplace avantageusement l'utilisation d'un script monolithique.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cr√©ation de liens symboliques ("symlinks") pointant vers les scripts de d√©marrage du shell (exemple : le fichier &lt;code&gt;$HOME/.zshrc&lt;/code&gt; pour le shell &lt;code&gt;ZSH&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apr√®s avoir "fork√©" &lt;a href="https://github.com/holman/dotfile"&gt;https://github.com/holman/dotfiles&lt;/a&gt;, j'ai cr√©√© deux branches :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;une pour mon ordinateur personnel sous Mac : &lt;a href="https://github.com/nicokosi/dotfiles"&gt;https://github.com/nicokosi/dotfiles&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;une autre pour mon ordinateur professionnel sous Linux : &lt;a href="https://github.com/nicokosi/dotfiles/tree/vidal"&gt;https://github.com/nicokosi/dotfiles/tree/vidal&lt;/a&gt;
Ces branches me permettent d'avoir deux configurations bien distinctes m√™me si elles partagent certaines similitudes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion : &lt;em&gt;Dotfiles all the things&lt;/em&gt;!&lt;/h2&gt;
&lt;p&gt;M√™me si la mise en place et la maintenance de ses dotfiles prend du temps, l'investissement vaut le coup pour notamment :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;la r√©solution de probl√®mes&lt;/strong&gt; (exemples : identifier ce qui a √©t√© r√©cemment modifi√©, revenir √† une configuration pr√©c√©dente, etc.) ;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;synchroniser&lt;/strong&gt; des changements entre plusieurs machines (exemple : PC sous Linux au travail et Mac perso), chacune ayant  une configuration distincte ;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;partager&lt;/strong&gt; sa configuration avec d'autres d√©veloppeurs ("Voici le dernier r√©glage que j'ai utilis√© pour ...").
:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PS : merci √† Jean-Christophe Gay pour l'inspiration et les "bons tuyaux". Voici son blog : &lt;a href="https://jeanchristophegay.com/"&gt;https://jeanchristophegay.com/&lt;/a&gt;.&lt;/p&gt;</content><category term="all"></category><category term="tools"></category></entry></feed>