<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Nicokosi's blog</title><link href="https://nicokosi.github.io/" rel="alternate"></link><link href="https://nicokosi.github.io/feeds/all-en.atom.xml" rel="self"></link><id>https://nicokosi.github.io/</id><updated>2021-11-09T07:00:00+01:00</updated><subtitle>Code explorations (üßë‚Äçüíª + üß™ = ‚ÅâÔ∏è)</subtitle><entry><title>Exploring my own Strava activities using Kibana (part 2): a better dashboard</title><link href="https://nicokosi.github.io/explore-strava-activities-with-kibana-2-en.html" rel="alternate"></link><published>2021-11-09T07:00:00+01:00</published><updated>2021-11-09T07:00:00+01:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2021-11-09:/explore-strava-activities-with-kibana-2-en.html</id><summary type="html">&lt;p&gt;How I created a Kibana detailed and interactive dashboard to explore my personal Sport activities from strava.com.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Assumed audience: people interested in data exploration.&lt;/p&gt;
&lt;p&gt;Please read the &lt;a href="./explore-strava-activities-with-kibana-en.html"&gt;first part on this article&lt;/a&gt; about the Kibana setup and Strava data injection.&lt;/p&gt;
&lt;p&gt;My colleague Franck gave me a cool Kibana tip: try the "vertical bar" with a "count" operator.&lt;/p&gt;
&lt;p&gt;In order to give it a try, I created a dashboard with the following charts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;"average speed histogram", using a &lt;code&gt;Vertical bar&lt;/code&gt; chart: Y-axis is "average(average_speed)", X-axis is "@timestamp" and Split series on "type".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"count activities by type", using a &lt;code&gt;Metric&lt;/code&gt; chart, using Aggregation "Count" and Split group on "type".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"distance histogram", using a &lt;code&gt;Vertical bar&lt;/code&gt; chart: Y-axis is "average(distance)", X-axis is "@timestamp" and split series on "type".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"activity type tree map", using a &lt;code&gt;Treemap&lt;/code&gt; chart with Group by "type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"counts per day" using a &lt;code&gt;Bar vertical&lt;/code&gt; chart with horizontal axis on "start_date", vertical axis on "Count of records" and break down by "top values of type".&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a preview of the final dashboard: üéâ&lt;/p&gt;
&lt;p&gt;&lt;img alt="the final dashboard" src="images/explore-strava-activities-with-kibana-2-view-dashboard.png" title="The final dashboard"&gt;.&lt;/p&gt;
&lt;p&gt;The same dashboard when clicking on "Run" activity type:&lt;/p&gt;
&lt;p&gt;&lt;img alt="dashboard on &amp;quot;Run&amp;quot; activity type" src="images/explore-strava-activities-with-kibana-2-view-dashboard-run.png" title="dashboard on 'Run' activity type"&gt;.&lt;/p&gt;
&lt;p&gt;The dashboard with its charts can be imported via the upper left button / "Management" / "Stack Management" / "Saved Objects" / "Import" with &lt;a href="https://nicokosi.github.io/misc/strava-dashboard.ndjson"&gt;this file&lt;/a&gt;.&lt;/p&gt;</content><category term="all"></category><category term="dataviz data visualization"></category></entry><entry><title>Exploring my own Strava activities using Kibana</title><link href="https://nicokosi.github.io/explore-strava-activities-with-kibana-en.html" rel="alternate"></link><published>2021-11-03T09:00:00+01:00</published><updated>2021-11-03T09:00:00+01:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2021-11-03:/explore-strava-activities-with-kibana-en.html</id><summary type="html">&lt;p&gt;How I imported my personal Sport strava.com activities into Kibana in order to explore them.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Assumed audience: people interested in data exploration.&lt;/p&gt;
&lt;p&gt;I use &lt;a href="https://strava.com/"&gt;strava.com&lt;/a&gt; to track my running/hike activities since a few years. Since Strava provides an API to export my activities, I had a try exploring them via a data visualization tool, &lt;a href="https://www.elastic.co/kibana/"&gt;Kibana&lt;/a&gt;. This article relates my first exploration.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Note that the code shown below uses &lt;code&gt;zsh&lt;/code&gt; Unix shell.&lt;/p&gt;
&lt;h3&gt;Grab Strava activities&lt;/h3&gt;
&lt;p&gt;First step, create a &lt;a href="https://developers.strava.com/docs/getting-started/#account"&gt;Strava developer account&lt;/a&gt;, then create a Strava API OAuth2 access token (I have used the &lt;a href="https://github.com/mgryszko/strava-access-token"&gt;mgryszko/strava-access-token generator&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Second step, use &lt;a href="https://developers.strava.com/docs/reference/#api-Activities-getLoggedInAthleteActivities"&gt;the Strava API to grab my Strava activities&lt;/a&gt;, exporting all activities into separate JSON files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; page &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;..10&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; http GET &lt;span class="s2"&gt;&amp;quot;https://www.strava.com/api/v3/athlete/activities?include_all_efforts=&amp;amp;per_page=200&amp;amp;page=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;page&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Authorization: Bearer &lt;/span&gt;&lt;span class="nv"&gt;$TOKEN&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &amp;gt; strava-activities-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;page&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since I have recorded around 300 activities with Strava, only three files have a non-empty content (empty JSON content is &lt;code&gt;[]&lt;/code&gt;), as seen with the &lt;code&gt;wc&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wc -c strava-activities-*.json

  &lt;span class="m"&gt;421462&lt;/span&gt; strava-activities-1.json
       &lt;span class="m"&gt;2&lt;/span&gt; strava-activities-10.json
  &lt;span class="m"&gt;288391&lt;/span&gt; strava-activities-2.json
   &lt;span class="m"&gt;57159&lt;/span&gt; strava-activities-3.json
       &lt;span class="m"&gt;2&lt;/span&gt; strava-activities-4.json
       &lt;span class="m"&gt;2&lt;/span&gt; strava-activities-5.json
       &lt;span class="m"&gt;2&lt;/span&gt; strava-activities-6.json
       &lt;span class="m"&gt;2&lt;/span&gt; strava-activities-7.json
       &lt;span class="m"&gt;2&lt;/span&gt; strava-activities-8.json
       &lt;span class="m"&gt;2&lt;/span&gt; strava-activities-9.json
  &lt;span class="m"&gt;767026&lt;/span&gt; total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Third step, aggregate files into a single "Newline Delimited JSON" file (&lt;code&gt;ndjson&lt;/code&gt; extension):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; n &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;..3&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; cat strava-activities-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.json &lt;span class="p"&gt;|&lt;/span&gt; jq -c &lt;span class="s1"&gt;&amp;#39;.[]&amp;#39;&lt;/span&gt; &amp;gt; strava-activities-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.ndjson
cat strava-activities-1.ndjson strava-activities-2.ndjson strava-activities-3.ndjson &amp;gt;&amp;gt; strava-activities.ndjson
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Insert data into Kibana&lt;/h3&gt;
&lt;p&gt;We will run Elastic and Kibana using the &lt;a href="https://www.elastic.co/guide/en/kibana/current/docker.html"&gt;official Docker images&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Start Elastic and Kibana:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker network create elastic
docker run --name es-dataviz --net elastic --publish &lt;span class="m"&gt;9200&lt;/span&gt;:9200 --publish &lt;span class="m"&gt;9300&lt;/span&gt;:9300 --env &lt;span class="s2"&gt;&amp;quot;discovery.type=single-node&amp;quot;&lt;/span&gt; --env &lt;span class="s2"&gt;&amp;quot;xpack.security.enabled=false&amp;quot;&lt;/span&gt; docker.elastic.co/elasticsearch/elasticsearch:7.15.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker run --name kb-dataviz --net elastic --publish &lt;span class="m"&gt;5601&lt;/span&gt;:5601 --env &lt;span class="s2"&gt;&amp;quot;ELASTICSEARCH_HOSTS=http://es-dataviz:9200&amp;quot;&lt;/span&gt; --env &lt;span class="s2"&gt;&amp;quot;xpack.security.enabled=false&amp;quot;&lt;/span&gt; docker.elastic.co/kibana/kibana:7.15.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Upload &lt;code&gt;ndjson&lt;/code&gt; file [http://localhost:5601/app/home#/tutorial_directory] into an index named "strava":&lt;/p&gt;
&lt;p&gt;Open Kibana's "discover" view for the last 6 years:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Discover Kibana" src="images/explore-strava-discover.png" title="Discover Kibana"&gt;&lt;/p&gt;
&lt;h2&gt;Explore data / create dashboards&lt;/h2&gt;
&lt;h3&gt;Average speed per activity&lt;/h3&gt;
&lt;p&gt;Let's create a dashboard to visualize the activities' average speed by activity type (run, hike etc.):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Create Kibana dashboard" src="images/explore-strava-create-dashboard.png" title="Create Kibana dashboard"&gt;&lt;/p&gt;
&lt;p&gt;It looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Create Kibana dashboard&amp;quot;" src="images/explore-strava-dashboard.png" title="Create Kibana dashboard&amp;quot;"&gt;&lt;/p&gt;
&lt;p&gt;A few remarks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I just realized that I have been running for 5 years! üòØ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;my running performance are slowing down... I guess I am getting older! üßì&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, it was cool to make my custom (but ephemeral) dashboard without paying for Strava. üòá&lt;/p&gt;
&lt;p&gt;That's all! I'll try to go further an other time. ü§ì&lt;/p&gt;</content><category term="all"></category><category term="dataviz data visualization"></category></entry><entry><title>Contributing to TLDR (collaborative cheatsheets for console commands)</title><link href="https://nicokosi.github.io/contributing-to-tldr-en.html" rel="alternate"></link><published>2021-09-14T08:00:00+02:00</published><updated>2021-09-14T08:00:00+02:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2021-09-14:/contributing-to-tldr-en.html</id><summary type="html">&lt;p&gt;Some thoughts about my recent contributions to the open-source project 'tldr'.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Assumed audience: developers interested in Command-Line Interface tools and in contributing to Open Source Projects.&lt;/p&gt;
&lt;h1&gt;My first contributions to the &lt;code&gt;tldr&lt;/code&gt; open-source project&lt;/h1&gt;
&lt;p&gt;Since a few months, I occasionally contribute to &lt;a href="https://github.com/tldr-pages/tldr"&gt;&lt;code&gt;tldr&lt;/code&gt;&lt;/a&gt; (also known as &lt;code&gt;tldr-pages&lt;/code&gt;) which describes as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Collaborative cheat-sheets for console commands&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See my &lt;a href="https://github.com/tldr-pages/tldr/pulls?q=is%3Apr+author%3Anicokosi"&gt;contributions&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This blog post lists the good and bad parts of these contributions.&lt;/p&gt;
&lt;h2&gt;The good parts üëç&lt;/h2&gt;
&lt;h3&gt;Share my "local knowledge" üéÅ&lt;/h3&gt;
&lt;p&gt;Many commands that were only in my Unix shell history or in my head are now shared to all &lt;code&gt;tldr&lt;/code&gt; users... and to my-self!&lt;/p&gt;
&lt;p&gt;I can now retrieve my favorite commands typing &lt;code&gt;tldr &amp;lt;command_name&amp;gt;&lt;/code&gt;, i.e. &lt;code&gt;tldr espanso&lt;/code&gt; since &lt;a href="https://github.com/tldr-pages/tldr/pull/5662"&gt;my contribution #5662&lt;/a&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ tldr espanso

espanso

Cross-platform Text Expander written &lt;span class="k"&gt;in&lt;/span&gt; Rust.
More information: &amp;lt;https://espanso.org&amp;gt;.

- Check status:
    espanso status

- Edit the configuration:
    espanso edit config

- Install a package from the hub store &lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;https://hub.espanso.org/&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;:
    espanso install package_name

- Restart &lt;span class="o"&gt;(&lt;/span&gt;required after installing a package, useful &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; of failure&lt;span class="o"&gt;)&lt;/span&gt;:
    espanso restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And it's easier that searching my shell history:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;history&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep espanso
 &lt;span class="m"&gt;4998&lt;/span&gt;  brew tap federico-terzi/espanso
 &lt;span class="m"&gt;4999&lt;/span&gt;  brew install espanso
 &lt;span class="m"&gt;5000&lt;/span&gt;  espanso register
 &lt;span class="m"&gt;5001&lt;/span&gt;  mkdir espanso
 &lt;span class="m"&gt;5002&lt;/span&gt;  &lt;span class="nb"&gt;cd&lt;/span&gt; espanso
 &lt;span class="m"&gt;5013&lt;/span&gt;  espanso stop
 &lt;span class="m"&gt;5014&lt;/span&gt;  espanso start
 &lt;span class="m"&gt;5015&lt;/span&gt;  espanso path
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;A welcoming community ü§ó&lt;/h3&gt;
&lt;p&gt;I was very well received by the contributors who encourage without putting pressure. My feelings are mainly related to comments on &lt;em&gt;pull requests&lt;/em&gt; / &lt;em&gt;issues&lt;/em&gt;, for example this kind &lt;a href="https://github.com/tldr-pages/tldr/pull/5662#issuecomment-812137443"&gt;comment&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Welcome to tldr-pages, @nicokosi! ‚ö° üéâ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, I hardly used &lt;a href="https://gitter.im/tldr-pages/tldr"&gt;the Gitter discussion board&lt;/a&gt;. I think I'm not active enough (I contribute a few minutes / hours per week) to be able to keep up with the flow of trade!&lt;/p&gt;
&lt;h3&gt;Learn new commands üë®‚Äçüéì&lt;/h3&gt;
&lt;p&gt;While reviewing the contributions (&lt;a href="https://github.com/tldr-pages/tldr/pulls"&gt;&lt;em&gt;pull requests&lt;/em&gt;&lt;/a&gt;), I sometimes discovered new commands/discovered new options.&lt;/p&gt;
&lt;p&gt;For example, I learned that it was possible to format the return of the GitHub CLI command &lt;code&gt;gh&lt;/code&gt; as JSON via [this &lt;em&gt;pull request&lt;/em&gt;&lt;code&gt;gh-formatting: add page # 6290&lt;/code&gt;] (https://github.com / tldr-pages / tldr / pull / 6290 / files? short_path = 193df31 # diff-193df31fff2a4e88a95b3bd8732bead1fbbe8343eb8617ed1b727e4d1ba4d751):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Formatting options for JSON data exported from gh GitHub CLI command. More information: https://cli.github.com/manual/gh_help_formatting.
Display help about formatting JSON output from gh using jq:
gh formatting&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Learn to compromise ‚öñÔ∏è&lt;/h3&gt;
&lt;p&gt;I have learned to accept feedback from others and sometimes to accept a majority opinion that is not mine.&lt;/p&gt;
&lt;p&gt;Example: using the term &lt;code&gt;slug&lt;/code&gt; in an authentication context for &lt;a href="https://github.com/tldr-pages/tldr/pull/6108#discussion_r648835227"&gt;this post&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The bad parts üëé&lt;/h2&gt;
&lt;h3&gt;Time-consuming ‚è≥&lt;/h3&gt;
&lt;p&gt;Contributors on OSS project do this on their free time. Morever, when collaborating on &lt;em&gt;pull requests&lt;/em&gt;, everything is done writing in English, but we are not all bilingual. So collaboration/contribution is not always easy and can take time.&lt;/p&gt;
&lt;p&gt;Example of misunderstanding (&lt;a href="https://github.com/tldr-pages/tldr/pull/6269#issuecomment-888351398"&gt;link&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes, it does seem that only common is shown, anyway that can be fixed since a user might think we have a lack of pages if we only show them.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sorry, I don't understand after "anyway".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example of slowness: it took a little less to integrate &lt;a href="https://github.com/tldr-pages/tldr.jsx-fork/pull/3"&gt;this contribution, &lt;code&gt;Prevent search misses via input's placeholder / tooltip&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;No user feedback üßë‚Äçü¶Ø&lt;/h3&gt;
&lt;p&gt;Only contributors give feedback via &lt;em&gt;pull requests&lt;/em&gt; or &lt;em&gt;issues&lt;/em&gt; GitHub.
There are no metrics such as "number of views", "rating" etc. therefore we do not really know the use of examples (which is a good thing for confidentiality)..&lt;/p&gt;
&lt;h2&gt;What's next? üîú&lt;/h2&gt;
&lt;p&gt;Contribute on code rather than documentation? üßë‚Äçüíª&lt;/p&gt;
&lt;p&gt;On this project or on another? To be continued! üîÆ&lt;/p&gt;</content><category term="all"></category><category term="OSS cli"></category></entry><entry><title>Rediscovering Golang with "pullpigo", a small hobby-project</title><link href="https://nicokosi.github.io/rediscovering-Golang-with-pullpigo-en.html" rel="alternate"></link><published>2019-12-24T07:00:00+01:00</published><updated>2019-12-24T07:00:00+01:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2019-12-24:/rediscovering-Golang-with-pullpigo-en.html</id><summary type="html">&lt;p&gt;How I discovered Go (the programming language) basics while coding a CLI tool named "pullpigo".&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Rediscovering Golang with "pullpigo", a small hobby-project&lt;/h1&gt;
&lt;p&gt;I wanted to &lt;strong&gt;learn &lt;a href="https://golang.org/"&gt;Go (the programming language)&lt;/a&gt;&lt;/strong&gt;. My plan was to implement a &lt;strong&gt;CLI tool&lt;/strong&gt; for displaying information on GitHub pull requests. I thus created a small project in GitHub: &lt;a href="https://github.com/nicokosi/pullpigo"&gt;pullpigo&lt;/a&gt;, in order to display event counters about GitHub pull requests via GitHub's public API.&lt;/p&gt;
&lt;p&gt;Note that I have already implemented this CLI tool in other programming languages that I wanted to learn: in &lt;strong&gt;Clojure&lt;/strong&gt; (see &lt;a href="https://github.com/nicokosi/hubstats"&gt;hubstats&lt;/a&gt;), &lt;strong&gt;Kotlin&lt;/strong&gt; (see &lt;a href="https://github.com/nicokosi/pullpitoK"&gt;pullpitoK&lt;/a&gt;) and &lt;strong&gt;Rust&lt;/strong&gt; (see &lt;a href="https://github.com/nicokosi/pullpito"&gt;pullpito&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Native executables are fast üöÄ&lt;/h2&gt;
&lt;p&gt;Let's compile pullpigo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go clean
$ &lt;span class="nb"&gt;time&lt;/span&gt; go build
go build  &lt;span class="m"&gt;1&lt;/span&gt;.05s user &lt;span class="m"&gt;0&lt;/span&gt;.58s system &lt;span class="m"&gt;105&lt;/span&gt;% cpu &lt;span class="m"&gt;1&lt;/span&gt;.559 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then run it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;time&lt;/span&gt; ./pullpigo -repo&lt;span class="o"&gt;=&lt;/span&gt;vidal-community/atom-jaxb
GitHub repository &lt;span class="s1"&gt;&amp;#39;vidal-community/atom-jaxb&amp;#39;&lt;/span&gt;
  &lt;span class="m"&gt;2&lt;/span&gt; events created by amairi
  &lt;span class="m"&gt;1&lt;/span&gt; events created by fchetouani
  &lt;span class="m"&gt;6&lt;/span&gt; events created by AElMehdiVidal
  &lt;span class="m"&gt;3&lt;/span&gt; events created by jcgay
./pullpigo -repo&lt;span class="o"&gt;=&lt;/span&gt;vidal-community/atom-jaxb  &lt;span class="m"&gt;0&lt;/span&gt;.07s user &lt;span class="m"&gt;0&lt;/span&gt;.03s system &lt;span class="m"&gt;20&lt;/span&gt;% cpu &lt;span class="m"&gt;0&lt;/span&gt;.482 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now compare these build &amp;amp; run times with a similar Kotlin project (&lt;a href="https://github.com/nicokosi/pullpitoK/"&gt;pullpitoK&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ./gradlew clean
$ &lt;span class="nb"&gt;time&lt;/span&gt; ./gradlew build --quiet
./gradlew build --quiet  &lt;span class="m"&gt;1&lt;/span&gt;.37s user &lt;span class="m"&gt;0&lt;/span&gt;.17s system &lt;span class="m"&gt;39&lt;/span&gt;% cpu &lt;span class="m"&gt;3&lt;/span&gt;.932 total
$ &lt;span class="nb"&gt;time&lt;/span&gt; ./gradlew run --quiet --args &lt;span class="s2"&gt;&amp;quot;vidal-community/atom-jaxb&amp;quot;&lt;/span&gt;

pull requests &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;vidal-community/atom-jaxb&amp;quot;&lt;/span&gt; -&amp;gt;
            opened per author
                amairi: &lt;span class="m"&gt;1&lt;/span&gt;
            commented per author
                AElMehdiVidal: &lt;span class="m"&gt;1&lt;/span&gt;
                jcgay: &lt;span class="m"&gt;1&lt;/span&gt;
            closed per author

./gradlew run --quiet --args &lt;span class="s2"&gt;&amp;quot;vidal-community/atom-jaxb&amp;quot;&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;.37s user &lt;span class="m"&gt;0&lt;/span&gt;.18s system &lt;span class="m"&gt;62&lt;/span&gt;% cpu &lt;span class="m"&gt;2&lt;/span&gt;.473 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Fast compilation + fast runtime = ‚ù§Ô∏è&lt;/p&gt;
&lt;h2&gt;Golang SDK already includes many common utilities üì¶&lt;/h2&gt;
&lt;p&gt;In order to call &lt;a href="https://developer.github.com/v3/activity/events/"&gt;GitHub's REST API v3 'events' API&lt;/a&gt;, all I needed was: a HTTP client, a JSON parser and a test framework. Good news, all are included in the Golang SDK: &lt;a href="https://golang.org/pkg/testing/"&gt;testing&lt;/a&gt;, &lt;a href="https://golang.org/pkg/net/http/"&gt;HTTP client&lt;/a&gt; and &lt;a href="https://golang.org/pkg/encoding/json/"&gt;JSON parsing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As a consequence, I implemented my project with zero dependencies!&lt;/p&gt;
&lt;p&gt;Other goodies have I appreciated from by Java background:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;code formatting&lt;/strong&gt; is included! Its' simple as &lt;code&gt;go fmt&lt;/code&gt;. No need to find and configure an external code formatting tools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;code linter&lt;/strong&gt; is included! Just install &lt;a href="[golang/linttype"&gt;https://github.com/golang/linttype&lt;/a&gt; and run the &lt;code&gt;golint&lt;/code&gt; command. No need to find and configure an external code formatting tools. (to be honest, the linter did not help when coding pullpigo but it's so cool that code linter is provided).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other opportunities üòé&lt;/h2&gt;
&lt;p&gt;Coding this small hobby project has also been an opportunity to &lt;strong&gt;try and learn other tools&lt;/strong&gt;. In my case, I could:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;, an Integrated Development Environment that I don't use at work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; for Continuous Integration: every git commit pushed on GitHub triggers a compilation &amp;amp; test check. It was the first time I used GitHub Actions, it was very easy (it only took a few minutes) to use it for my needs, and it's free. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last positive thing about learning a programming language is that you can &lt;strong&gt;discuss and learn with people&lt;/strong&gt; you know.&lt;/p&gt;
&lt;p&gt;In my case, my "Golang friends" have been:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/jcgay/"&gt;Jean-Christophe&lt;/a&gt; who helped me to fix my JSON parsing issues. üòÖ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/fbiville"&gt;Florent&lt;/a&gt; who gave me pointers on cool libraries: &lt;a href="https://golang.org/pkg/testing/quick/"&gt;testing/quick&lt;/a&gt; for property-based testing, &lt;a href="https://github.com/onsi/ginkgo"&gt;ginkgo&lt;/a&gt; for BDD-style tests and &lt;a href="https://github.com/onsi/gomega"&gt;gomega&lt;/a&gt; for test assertions. I have to try them out! üòé&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What's next? üîÆ&lt;/h3&gt;
&lt;p&gt;Some ideas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make pullpigo's output more useful. For example, I could make it display counters for events like "pull request created", "pull request merged" etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Retrieve data from &lt;a href="https://developer.github.com/v4/"&gt;GitHub's GraphQL API v4&lt;/a&gt; in order to by-pass the limitation of number of events (GitHub's REST API v3 'events' API only returns the last 300 events).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use some dependencies for testing (easier assertions, property-based-testing etc.) and take this opportunity to discover dependencies in Golang.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll see!&lt;/p&gt;</content><category term="all"></category><category term="golang native"></category></entry><entry><title>Java, Kotlin and Clojure go native with GraalVM</title><link href="https://nicokosi.github.io/java-clojure-and-kotlin-go-native-with-graalvm-en.html" rel="alternate"></link><published>2019-08-13T00:00:00+02:00</published><updated>2019-08-13T00:00:00+02:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2019-08-13:/java-clojure-and-kotlin-go-native-with-graalvm-en.html</id><summary type="html">&lt;p&gt;Generate native executables via GraalVM for Java, Kotlin and Clojure CLI tools.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://v4.chriskrycho.com/2018/assumed-audiences.html"&gt;Presumed audience&lt;/a&gt; : developers interested in the Java ecosystem and more specifically on deploying executable programs that are fast and efficient.&lt;/p&gt;
&lt;p&gt;Plan :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Our tools&lt;/li&gt;
&lt;li&gt;An optimized executable for a "WordCount" &lt;code&gt;Java&lt;/code&gt; CLI tool&lt;/li&gt;
&lt;li&gt;An optimized executable for a &lt;code&gt;Kotlin&lt;/code&gt; CLI tool&lt;/li&gt;
&lt;li&gt;An "not-fully optimized" executable for a &lt;code&gt;Clojure&lt;/code&gt; CLI tool&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I wrote about failures in my previous blog post &lt;a href="https://nicokosi.github.io/clojure-goes-native-with-graalvm-en.html"&gt;Clojure goes native with GraalVM&lt;/a&gt;. This post is about successful attempts to generate executables from small CLI tools, implemented in &lt;a href="https://go.java/"&gt;Java&lt;/a&gt;, &lt;a href="https://kotlinlang.org/"&gt;Kotlin&lt;/a&gt; and &lt;a href="https://clojure.org/"&gt;Clojure&lt;/a&gt;, using &lt;a href="https://www.graalvm.org/"&gt;GraalVM&lt;/a&gt; release (see the &lt;a href="https://www.graalvm.org/docs/release-notes/"&gt;release notes&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Tools&lt;/h2&gt;
&lt;p&gt;We will use the following applications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.graalvm.org/downloads/"&gt;GraalVM Community Edition&lt;/a&gt; ("&lt;em&gt;a High-performance polyglot VM&lt;/em&gt;") and more specifically, the &lt;a href="https://www.graalvm.org/docs/getting-started/#native-images"&gt;Native Image&lt;/a&gt; functionality (via the &lt;code&gt;native-image&lt;/code&gt; command) in order to generate native executables from Java code.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdkman.io/"&gt;SDKMAN!&lt;/a&gt; ("&lt;em&gt;The Software Development Kit Manager&lt;/em&gt;") in order to use several &lt;em&gt;Java Development Kits&lt;/em&gt; / &lt;em&gt;Java Runtime Environments&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://manpages.ubuntu.com/manpages/cosmic/en/man1/time.1.html"&gt;time&lt;/a&gt; ("&lt;em&gt;run programs and summarize system resource usage&lt;/em&gt;") in order to measure runtime durations.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://valgrind.org/"&gt;valgrind&lt;/a&gt; ("&lt;em&gt;tool for memory debugging, memory leak detection, and profiling&lt;/em&gt;") in order to evaluate the memory footprints.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;An optimized executable for a "WordCount" &lt;code&gt;Java&lt;/code&gt; application&lt;/h2&gt;
&lt;p&gt;Our "hello world" is a 10-line program that counts the number of distinct words in a text file: &lt;a href="https://github.com/nicokosi/wordcount-with-java-stream"&gt;wordcount-with-java-stream&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's generate an executable JAR file via Maven and OpenJDK. It takes 2 seconds on my machine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sdk use java &lt;span class="m"&gt;8&lt;/span&gt;.0.222.hs-adpt
Using java version &lt;span class="m"&gt;8&lt;/span&gt;.0.222.hs-adpt &lt;span class="k"&gt;in&lt;/span&gt; this shell.
$ &lt;span class="nb"&gt;time&lt;/span&gt; ./mvnw clean --quiet compile
./mvnw clean --quiet compile  &lt;span class="m"&gt;6&lt;/span&gt;.24s user &lt;span class="m"&gt;0&lt;/span&gt;.31s system &lt;span class="m"&gt;323&lt;/span&gt;% cpu &lt;span class="m"&gt;2&lt;/span&gt;.022 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the ellapsed time is at the end of the last line, in seconds: &lt;code&gt;2.022 total&lt;/code&gt; means 2.022 seconds.&lt;/p&gt;
&lt;p&gt;Now generate an executable via GraalVM native-image. It takes 42 seconds on my machine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.sdkman/candidates/java/19.1.1-grl/bin/native-image &lt;span class="se"&gt;\&lt;/span&gt;
     --enable-https &lt;span class="se"&gt;\&lt;/span&gt;
     --no-fallback &lt;span class="se"&gt;\&lt;/span&gt;
     --no-server &lt;span class="se"&gt;\&lt;/span&gt;
     -cp target/classes org.nicokosi.WordCount &lt;span class="se"&gt;\&lt;/span&gt;
     wordcount-with-java-stream
&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.sdkman/candidates/java/19.1.1-grl/bin/native-image --enable-https   -c  &lt;span class="m"&gt;236&lt;/span&gt;,70s user &lt;span class="m"&gt;2&lt;/span&gt;,75s system &lt;span class="m"&gt;566&lt;/span&gt;% cpu &lt;span class="m"&gt;42&lt;/span&gt;,285 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's compare the runtime durations for a small input file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;wordcount_java&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.sdkman/candidates/java/8.0.222.hs-adpt/bin/java -cp target/classes org.nicokosi.WordCount&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;time&lt;/span&gt; wordcount_java /etc/hosts
File /etc/hosts contains &lt;span class="m"&gt;26&lt;/span&gt; words
/home/nkosinski/.sdkman/candidates/java/8.0.222.hs-adpt/bin/java -cp     &lt;span class="m"&gt;0&lt;/span&gt;,16s user &lt;span class="m"&gt;0&lt;/span&gt;,02s system &lt;span class="m"&gt;152&lt;/span&gt;% cpu &lt;span class="m"&gt;0&lt;/span&gt;,118 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; ./wordcount-with-java-stream /etc/hosts
File /etc/hosts contains &lt;span class="m"&gt;26&lt;/span&gt; words
./wordcount-with-java-stream /etc/hosts  &lt;span class="m"&gt;0&lt;/span&gt;,00s user &lt;span class="m"&gt;0&lt;/span&gt;,01s system &lt;span class="m"&gt;92&lt;/span&gt;% cpu &lt;span class="m"&gt;0&lt;/span&gt;,007 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the memory footprints:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nv"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.sdkman/candidates/java/8.0.222.hs-adpt &lt;span class="se"&gt;\&lt;/span&gt;
  valgrind java -cp target/classes org.nicokosi.WordCount /etc/hosts

&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;23352&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; HEAP SUMMARY:
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;23352&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;     &lt;span class="k"&gt;in&lt;/span&gt; use at exit: &lt;span class="m"&gt;34&lt;/span&gt;,892,297 bytes &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;,155 &lt;span class="nv"&gt;blocks&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;23352&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;   total heap usage: &lt;span class="m"&gt;14&lt;/span&gt;,555 allocs, &lt;span class="m"&gt;8&lt;/span&gt;,400 frees, &lt;span class="m"&gt;49&lt;/span&gt;,960,719 bytes allocated  **
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the amount of allocated memory is at the end of the last line, in bytes: &lt;code&gt;49,960,719 allocated&lt;/code&gt; means that 50 megabytes have been allocated.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ valgrind ./wordcount-with-java-stream /etc/hosts

&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;23753&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; HEAP SUMMARY:
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;23753&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;     &lt;span class="k"&gt;in&lt;/span&gt; use at exit: &lt;span class="m"&gt;10&lt;/span&gt;,468 bytes &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;blocks&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;23753&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;   total heap usage: &lt;span class="m"&gt;8&lt;/span&gt; allocs, &lt;span class="m"&gt;5&lt;/span&gt; frees, &lt;span class="m"&gt;12&lt;/span&gt;,436 bytes allocated**
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To sum up, at the cost of a longer compilation (42 seconds instead of 2 seconds), GraalVM:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;speeds up our application: 7 milliseconds instead of 118 milliseconds ;&lt;/li&gt;
&lt;li&gt;reduces the memory footprint: 12 kilobytes instead of 50 megabytes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;An optimized executable for a &lt;code&gt;Kotlin&lt;/code&gt; CLI tool&lt;/h2&gt;
&lt;p&gt;Now let's generate an executable for a &lt;a href="https://kotlinlang.org/"&gt;Kotlin&lt;/a&gt; CLI tool, &lt;a href="https://github.com/nicokosi/pullpitoK/"&gt;pullpitoK&lt;/a&gt; (200 lines of code, with third-party libraries) that calls GitHub API to display information on GitHub pull requests.&lt;/p&gt;
&lt;p&gt;The cost of compilation is similar, so let's focus on comparing the runtime behavior for a short execution (we will display the &lt;a href="https://en.wikipedia.org/wiki/Usage_message"&gt;"usage message"&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.sdkman/candidates/java/8.0.222.hs-adpt/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
$ &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;java -jar ./build/libs/pullpitoK-all.jar &lt;span class="p"&gt;|&lt;/span&gt; head -1&lt;span class="o"&gt;)&lt;/span&gt;
Usage: pullpitoK &amp;lt;repository&amp;gt; &amp;lt;token&amp;gt;
&lt;span class="o"&gt;(&lt;/span&gt; java -jar ./build/libs/pullpitoK-all.jar &lt;span class="p"&gt;|&lt;/span&gt; head -1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.08s user &lt;span class="m"&gt;0&lt;/span&gt;.02s system &lt;span class="m"&gt;108&lt;/span&gt;% cpu &lt;span class="m"&gt;0&lt;/span&gt;.093 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;pullpitoK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PULLPITOK_LIBSUNEC=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.sdkman/candidates/java/19.1.1-grl/jre/lib ./pullpitoK&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;pullpitoK --help &lt;span class="p"&gt;|&lt;/span&gt; head -1&lt;span class="o"&gt;)&lt;/span&gt;
Usage: pullpitoK &amp;lt;repository&amp;gt; &amp;lt;token&amp;gt;
&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;PULLPITOK_LIBSUNEC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/Users/nicolas/.sdkman/candidates/java/19.1.1-grl/jre/li&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.00s user &lt;span class="m"&gt;0&lt;/span&gt;.00s system &lt;span class="m"&gt;88&lt;/span&gt;% cpu &lt;span class="m"&gt;0&lt;/span&gt;.009 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, 9 milliseconds for the native version versus 93 milliseconds for the JVM version.&lt;/p&gt;
&lt;p&gt;Now let's compare the memory footprints:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ valgrind java -jar ./build/libs/pullpitoK-all.jar
...
Usage: pullpitoK &amp;lt;repository&amp;gt; &amp;lt;token&amp;gt;
...
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;26273&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; HEAP SUMMARY:
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;26273&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;     &lt;span class="k"&gt;in&lt;/span&gt; use at exit: &lt;span class="m"&gt;32&lt;/span&gt;,181,758 bytes &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;,134 &lt;span class="nv"&gt;blocks&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;26273&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;   total heap usage: &lt;span class="m"&gt;5&lt;/span&gt;,725 allocs, &lt;span class="m"&gt;3&lt;/span&gt;,591 frees, &lt;span class="m"&gt;33&lt;/span&gt;,187,784 bytes allocated
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ valgrind pullpitoK &lt;span class="p"&gt;|&lt;/span&gt; head -1
...
Usage: pullpitoK &amp;lt;repository&amp;gt; &amp;lt;token&amp;gt;
...
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;27690&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; HEAP SUMMARY:
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;27690&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;     &lt;span class="k"&gt;in&lt;/span&gt; use at exit: &lt;span class="m"&gt;228&lt;/span&gt; bytes &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;blocks&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;27690&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;   total heap usage: &lt;span class="m"&gt;6&lt;/span&gt; allocs, &lt;span class="m"&gt;5&lt;/span&gt; frees, &lt;span class="m"&gt;2&lt;/span&gt;,196 bytes allocated
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, 2 kilobytes for the native version versus 33 megabytes for the JVM version.&lt;/p&gt;
&lt;h2&gt;An "not-fully optimized" executable for a &lt;code&gt;Clojure&lt;/code&gt; CLI tool&lt;/h2&gt;
&lt;p&gt;When I wrote my previous article &lt;a href="https://nicokosi.github.io/clojure-goes-native-with-graalvm-en.html"&gt;Clojure goes native with GraalVM&lt;/a&gt;, GraalVM was still experimental (&lt;em&gt;release candidates&lt;/em&gt;). Moreover, I was stuck with the &lt;a href="https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md"&gt;Native Image limitations&lt;/a&gt; with dynamic class loading, the refection API (&lt;code&gt;java.lang.reflect&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Let's try again with GraalVM release for a Clojure CLI tool: &lt;a href="https://github.com/nicokosi/hubstats/"&gt;hubstats&lt;/a&gt; (200 lines of code, with third-party libraries).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.sdkman/candidates/java/19.1.1-grl/bin/native-image &lt;span class="se"&gt;\&lt;/span&gt;
   --enable-https &lt;span class="se"&gt;\&lt;/span&gt;
   --no-fallback &lt;span class="se"&gt;\&lt;/span&gt;
   --no-server &lt;span class="se"&gt;\&lt;/span&gt;
   -jar target/hubstats-0.1.0-SNAPSHOT-standalone.jar &lt;span class="se"&gt;\&lt;/span&gt;
   hubstats
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Native compilation fails:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unsupported&lt;/span&gt; &lt;span class="n"&gt;features&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;
&lt;span class="n"&gt;Detailed&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unsupported&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MemberName&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;reachable&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;All&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;invoke&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;replaced&lt;/span&gt; &lt;span class="n"&gt;during&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;building&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;diagnose&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;issue&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;unsupported&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;unsupported&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt; &lt;span class="n"&gt;reported&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;accessed&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We could probably change the source code to fix this issue. As quick fix, let's try the &lt;code&gt;fallback&lt;/code&gt; mode that embeds a classic virtual machine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.sdkman/candidates/java/19.1.1-grl/bin/native-image &lt;span class="se"&gt;\&lt;/span&gt;
   --enable-https &lt;span class="se"&gt;\&lt;/span&gt;
   --force-fallback &lt;span class="se"&gt;\&lt;/span&gt;
   --no-server &lt;span class="se"&gt;\&lt;/span&gt;
   -jar target/hubstats-0.1.0-SNAPSHOT-standalone.jar &lt;span class="se"&gt;\&lt;/span&gt;
   hubstats
...
&lt;span class="o"&gt;[&lt;/span&gt;hubstats:31661&lt;span class="o"&gt;]&lt;/span&gt;      &lt;span class="o"&gt;[&lt;/span&gt;total&lt;span class="o"&gt;]&lt;/span&gt;:  &lt;span class="m"&gt;14&lt;/span&gt;,663.95 ms
Warning: Image &lt;span class="s1"&gt;&amp;#39;hubstats&amp;#39;&lt;/span&gt; is a fallback image that requires a JDK &lt;span class="k"&gt;for&lt;/span&gt; execution &lt;span class="o"&gt;(&lt;/span&gt;use --no-fallback to suppress fallback image generation&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.sdkman/candidates/java/19.1.1-grl/bin/native-image --enable-https       &lt;span class="m"&gt;78&lt;/span&gt;,73s user &lt;span class="m"&gt;1&lt;/span&gt;,31s system &lt;span class="m"&gt;536&lt;/span&gt;% cpu &lt;span class="m"&gt;14&lt;/span&gt;,926 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With the fallback mode, duration times are similar since the startup time cannot be reduced in the native mode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.sdkman/candidates/java/8.0.222.hs-adpt/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
$ &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;java -jar target/hubstats-0.1.0-SNAPSHOT-standalone.jar &lt;span class="p"&gt;|&lt;/span&gt; head -1&lt;span class="o"&gt;)&lt;/span&gt;
Display statistics &lt;span class="k"&gt;for&lt;/span&gt; GitHub pull requests.
&lt;span class="o"&gt;(&lt;/span&gt; java -jar target/hubstats-0.1.0-SNAPSHOT-standalone.jar &lt;span class="p"&gt;|&lt;/span&gt; head -1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt;,36s user &lt;span class="m"&gt;0&lt;/span&gt;,10s system &lt;span class="m"&gt;262&lt;/span&gt;% cpu &lt;span class="m"&gt;1&lt;/span&gt;,318 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;./hubstats &lt;span class="p"&gt;|&lt;/span&gt; head -1&lt;span class="o"&gt;)&lt;/span&gt;

Display statistics &lt;span class="k"&gt;for&lt;/span&gt; GitHub pull requests.
&lt;span class="o"&gt;(&lt;/span&gt; ./hubstats &lt;span class="p"&gt;|&lt;/span&gt; head -1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="m"&gt;2&lt;/span&gt;,86s user &lt;span class="m"&gt;0&lt;/span&gt;,14s system &lt;span class="m"&gt;236&lt;/span&gt;% cpu &lt;span class="m"&gt;1&lt;/span&gt;,272 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;but the memory footprint of the executable is still reduced:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.sdkman/candidates/java/8.0.222.hs-adpt/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
$ valgrind java -jar target/hubstats-0.1.0-SNAPSHOT-standalone.jar
...
Display statistics &lt;span class="k"&gt;for&lt;/span&gt; GitHub pull requests.
...
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;2690&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; HEAP SUMMARY:
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;2690&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;     &lt;span class="k"&gt;in&lt;/span&gt; use at exit: &lt;span class="m"&gt;38&lt;/span&gt;,656,326 bytes &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;34&lt;/span&gt;,800 &lt;span class="nv"&gt;blocks&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;2690&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;   total heap usage: &lt;span class="m"&gt;170&lt;/span&gt;,569 allocs, &lt;span class="m"&gt;135&lt;/span&gt;,769 frees, &lt;span class="m"&gt;406&lt;/span&gt;,386,571 bytes allocated
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ valgrind pullpitoK
...
Usage: pullpitoK &amp;lt;repository&amp;gt; &amp;lt;token&amp;gt;
...
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;5747&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; HEAP SUMMARY:
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;5747&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;     &lt;span class="k"&gt;in&lt;/span&gt; use at exit: &lt;span class="m"&gt;228&lt;/span&gt; bytes &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;blocks&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;5747&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;   total heap usage: &lt;span class="m"&gt;6&lt;/span&gt; allocs, &lt;span class="m"&gt;5&lt;/span&gt; frees, &lt;span class="m"&gt;2&lt;/span&gt;,196 bytes allocated
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With these three small applications implemented with distinct JVM languages (Java, Kotlin and Clojure), we have checked some values of GraalVM native images:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;compact executables&lt;/strong&gt; that can be deployed without a Java Virtual Machine&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;small memory footprints&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fast startup&lt;/strong&gt; (sometimes!).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Moreover, we can see that GraalVM will probably modernize Java for the &lt;strong&gt;cloud-computing&lt;/strong&gt; and for &lt;strong&gt;micro-services&lt;/strong&gt;, with the Java Runtime Environment or with frameworks like &lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt; and &lt;a href="https://micronaut.io/"&gt;Micronaut&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;PS: thanks to my colleagues at &lt;a href="http://www.vidalfrance.com/"&gt;Vidal&lt;/a&gt;, notably Viviane, Marc and Jean-Christophe for the discussions on GraalVM, and St√©phane for reviewing the french version of this article.&lt;/p&gt;</content><category term="all"></category><category term="java clojure kotlin native graalvm jvm"></category></entry><entry><title>Discovering Rust</title><link href="https://nicokosi.github.io/discovering-rust-en.html" rel="alternate"></link><published>2018-06-10T15:00:00+02:00</published><updated>2018-06-10T15:00:00+02:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2018-06-10:/discovering-rust-en.html</id><summary type="html">&lt;p&gt;Discovering the Rust programming language, from a Java/Clojure programmer's point of view, via a small side project.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;As a Java developer, I want to learn bits of Rust, so that I can deeply understand this sentence quoted from &lt;a href="https://www.rust-lang.org"&gt;rust-lang.org&lt;/a&gt;*:&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust is a systems programming language that runs blazingly &lt;strong&gt;fast&lt;/strong&gt;, &lt;strong&gt;prevents segfaults&lt;/strong&gt;, and &lt;strong&gt;guarantees thread safety&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;*: did you notice the "agile stories meme"? üòâ&lt;/p&gt;
&lt;h2&gt;How I started learning Rust&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://doc.rust-lang.org/stable/book/second-edition/"&gt;The Rust Programming Language (2nd edition)&lt;/a&gt; is a great free on-line book with pragmatic examples and small projects that are progressively implemented (a CLI tool and a web server).&lt;/p&gt;
&lt;p&gt;After reading parts of this book, I ported a personal project named &lt;a href="https://github.com/nicokosi/hubstats"&gt;hubstats&lt;/a&gt; from Clojure to Rust. Hubstats is a command line tool I wrote in Clojure that calls GitHub API and displays pull requests summaries in the standard output. I just converted this project in Rust: &lt;a href="https://github.com/nicokosi/pullpito/"&gt;pullpito&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Porting existing code was an enjoyable way to learn Rust since I did not had to think about the "what" (display pull requests information) and the "how" (call the GitHub API): I just had to focus on Rust coding!&lt;/p&gt;
&lt;h2&gt;My first impressions&lt;/h2&gt;
&lt;p&gt;Rust code runs &lt;strong&gt;fast&lt;/strong&gt;! For instance, let's compare running a few &lt;code&gt;pullpito&lt;/code&gt;'s unit tests that run in half a second:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pullpito $&amp;gt; time (cargo test --quiet)

running 8 tests
# snip
test result: ok. 8 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out

( cargo test --quiet; )  0.43s user 0.21s system 96% cpu 0.665 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On the other hand, &lt;code&gt;hubstats&lt;/code&gt;' tests run in 10 seconds:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;hubstats $&amp;gt; time (lein test)
# snip

Ran 3 tests containing 20 assertions.
0 failures, 0 errors.
( lein test; )  10.86s user 0.70s system 129% cpu 8.923 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: the &lt;code&gt;cargo&lt;/code&gt; command launches &lt;a href="https://github.com/rust-lang/cargo/"&gt;Cargo&lt;/a&gt; which is Rust's build tool ; the &lt;code&gt;lein&lt;/code&gt; command launches &lt;a href="https://leiningen.org/"&gt;Leiningen&lt;/a&gt; which is Clojure's build tool&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now let's compare the CLI tool executions. &lt;code&gt;pullpito&lt;/code&gt; runs in 20 milliseconds:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pullpito $&amp;gt; time (cargo run --quiet python/peps)
pull requests for &amp;quot;python/peps&amp;quot; -&amp;gt;
  opened per author:
    brainwane: 1
  commented per author:
    the-knights-who-say-ni: 1
    stevendaprano: 2
    pradyunsg: 2
    gvanrossum: 1
    6502: 1
    Rosuav: 1
    brainwane: 1
  closed per author:
    markshannon: 1

( cargo run --quiet python/peps; )  0.22s user 0.09s system 20% cpu 1.524 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;...whereas &lt;code&gt;hubstats&lt;/code&gt; runs in 11 seconds (it should probably be optimized üòá):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;hubstats $&amp;gt; time (lein run --organization python --repository peps)
pull requests for python/peps -&amp;gt;
    since 2018-05-15T05:35:57Z
        8 opened / 8 closed / 2 commented (15 comments)
        opened per author:  {encukou 2, willingc 1, jdemeyer 1, gvanrossum 1, ethanhs 1, daxm 1, brainwane 1}
        comments per author:  {tim-one 4, ethanhs 3, vlasovskikh 2, gvanrossum 2, JelleZijlstra 2, ilevkivskyi 1, Rosuav 1}
        closed per author:  {brettcannon 4, markshannon 3, encukou 1}
( lein run --organization python --repository peps; )  11.30s user 0.77s system 66% cpu 18.160 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What about &lt;strong&gt;compilation&lt;/strong&gt;? The first compilation is slow because all dependencies have to be compiled. For instance, &lt;code&gt;pullpito&lt;/code&gt; initially compiles in 40 seconds, on my machine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pullpito $&amp;gt; time (cargo clean &amp;amp;&amp;amp; cargo build)
Compiling void v1.0.2
   Compiling byteorder v1.2.2
   Compiling serde v1.0.37
   Compiling scoped-tls v0.1.
# snip
    Finished dev [unoptimized + debuginfo] target(s) in 41.53 secs
( cargo clean &amp;amp;&amp;amp; cargo build; )  213.99s user 16.77s system 552% cpu 41.788 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But Rust has an incremental compiler, so subsequent compilations will be immediate if code does not change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pullpito $&amp;gt; cargo build
    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On the other hand, &lt;code&gt;hubstats&lt;/code&gt; compiles in 40 seconds (dependencies are not compiled):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;hubstats $&amp;gt; time (lein clean &amp;amp;&amp;amp; lein uberjar)
# snip
( lein clean &amp;amp;&amp;amp; lein uberjar; )  37.55s user 6.49s system 223% cpu 19.750 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;About Rust, the language&lt;/h2&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Ownership, OMG! üò±&lt;/h3&gt;
&lt;p&gt;Rust has a particular way to manage memory. Instead of using a garbage collector like Java or manual management like C/C++, allocated memory is automatically cleaned using the &lt;a href="https://doc.rust-lang.org/book/second-edition/ch04-01-what-is-ownership.html"&gt;"ownership" rules&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="n"&gt;Each&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Rust&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt; &lt;span class="n"&gt;its&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;There&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;When&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="n"&gt;goes&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;dropped&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It seems easy, but in reality, all the implications are hard to understand!&lt;/p&gt;
&lt;p&gt;Since I have not fully understood the ownership implications, I will not go any further on this topic. My current status is: fix all the compilation errors! üòá&lt;/p&gt;
&lt;p&gt;Feel free to read more about it in the chapter &lt;a href="https://doc.rust-lang.org/book/second-edition/ch04-00-understanding-ownership.html"&gt;"Understanding Ownership"&lt;/a&gt; of "The Rust Programming Language".&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Immutability by default üòé&lt;/h3&gt;
&lt;p&gt;A variable is immutable, by default. It cannot be re-assigned unless explicitly declared mutable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// name = &amp;quot;bar&amp;quot;; // Would trigger this compilation error: &amp;quot;error: re-assignment of immutable variable&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;changing_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;changing_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, immutable variables can be shadowed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// shadowed variable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Type inference üòé&lt;/h3&gt;
&lt;p&gt;Type inference is great for conciseness:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Type can be inferred:&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// or set explicitly:&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;: &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Pattern matching üòé&lt;/h3&gt;
&lt;p&gt;Rust has pattern matching... and it's cool!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As far as I understand, variable borrowing makes pattern matching harder to use, as seen in the &lt;a href="https://stackoverflow.com/questions/29926724/matching-string-cannot-move-out-of-borrowed-content"&gt;Stack Overflow&lt;/a&gt;. Note to self: try this out.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Tuples, enums and structures üòé&lt;/h3&gt;
&lt;p&gt;Rust has enums, tuples, and structures:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#![allow(dead_code)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[derive(Debug)]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;Suite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;CLUB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DIAMOND&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HEART&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SPADE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[derive(Debug)]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;Rank&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Ace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;King&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Queen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Jack&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[derive(Debug)]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;suite&lt;/span&gt;: &lt;span class="nc"&gt;Suite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;: &lt;span class="nc"&gt;Rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's test it via the &lt;code&gt;rusti&lt;/code&gt; REPL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;rusti&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Card&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;suite&lt;/span&gt;: &lt;span class="nc"&gt;Suite&lt;/span&gt;::&lt;span class="n"&gt;CLUB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;: &lt;span class="nc"&gt;Rank&lt;/span&gt;::&lt;span class="n"&gt;King&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Card&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;suite&lt;/span&gt;: &lt;span class="nc"&gt;CLUB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;: &lt;span class="nc"&gt;King&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Rust tooling&lt;/h2&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;No REPL (with full Rust support) üò¢&lt;/h3&gt;
&lt;p&gt;There is no official REPL (Read Eval Print Loop), and that's a pity for beginners like me!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/murarth/rusti"&gt;rusti&lt;/a&gt; can help but does not support all recent language changes.&lt;/p&gt;
&lt;p&gt;On-line REPLs such as &lt;a href="https://repl.it/site/languages/rust"&gt;repl.it&lt;/a&gt; can also be handy, even if limited (e.g. cannot import external dependencies aka &lt;code&gt;crates&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;Concise dependency descriptors (&lt;code&gt;Cargo.toml&lt;/code&gt;) with semantic versioning üòé&lt;/h3&gt;
&lt;p&gt;Every cargo binary (aka &lt;code&gt;crate&lt;/code&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;has a descriptor with a &lt;a href="https://semver.org/"&gt;semantic version&lt;/a&gt;. For instance, pullpito's version is 0.1.0, as declared in its &lt;code&gt;Cargo.toml&lt;/code&gt; descriptor:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pullpito $&amp;gt; grep &amp;quot;^version =&amp;quot; Cargo.toml
version = &amp;quot;0.1.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;declares the versions of its own dependencies:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pullpito $&amp;gt; grep -A 10 &amp;quot;dependencies&amp;quot; Cargo.toml
[dependencies]
log = &amp;quot;0.4&amp;quot;
env_logger = &amp;quot;0.5&amp;quot;
futures = &amp;quot;0.1&amp;quot;
serde = &amp;quot;1.0&amp;quot;
serde_json = &amp;quot;1.0&amp;quot;
serde_derive = &amp;quot;1.0&amp;quot;
chrono = { version = &amp;quot;0.4&amp;quot;, features = [&amp;quot;serde&amp;quot;] }
reqwest = &amp;quot;0.8&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cool and concise, isn't it?&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Standard code format üòé&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang-nursery/rustfmt"&gt;rustfmt&lt;/a&gt; can be used as a command-line tool to format code using a default style:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pullpito $&amp;gt; cat src/main.rs
fn main() {
  println! (&amp;quot;foo&amp;quot;);
 let bar = &amp;quot;bar&amp;quot;;
}

pullpito $&amp;gt; cargo fmt

pullpito $&amp;gt; cat src/main.rs
fn main() {
    println!(&amp;quot;foo&amp;quot;);
    let bar = &amp;quot;bar&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;No more "tabs vs space vs ..." flame war! Cf. &lt;a href="https://xkcd.com/1285/"&gt;https://xkcd.com/1285/&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;User-friendly compiler (mostly) üòé&lt;/h3&gt;
&lt;p&gt;The Rust compiler often makes useful suggestions in case of compilation error. Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#[derive(Debug)]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;Suite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CLUB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{:?}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Suite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CLUB&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;will fail compiling:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;error[E0423]: expected value, found enum `Suite`
 --&amp;gt; src/main.rs:5:22
  |
5 |     println!(&amp;quot;{:?}&amp;quot;, Suite.CLUB);
  |                      ^^^^^
  |
  = note: did you mean to use one of the following variants?
          - `Suite::CLUB`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;A multi-version toolchain: &lt;code&gt;rustup&lt;/code&gt; üòé&lt;/h3&gt;
&lt;p&gt;Rust has three release channels: stable, beta, and nightly. You can natively install and use one, some or all of them. Indeed, some libraries or tools may only work on the "stable" toolchain, and others may require the "nightly" one. In that case, use the &lt;code&gt;rustup&lt;/code&gt; command to install and use both toolchains.&lt;/p&gt;
&lt;p&gt;For instance, I can install the &lt;code&gt;nightly&lt;/code&gt; toolchain:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; rustup install nightly
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are now two toolchains: &lt;code&gt;stable&lt;/code&gt; and &lt;code&gt;nightly&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; rustup show
Default host: x86_64-apple-darwin

installed toolchains
--------------------

stable-x86_64-apple-darwin
nightly-x86_64-apple-darwin

active toolchain
----------------

stable-x86_64-apple-darwin (default)
rustc 1.25.0 (84203cac6 2018-03-25)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I can then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;change the default toolchain via &lt;code&gt;rustup default&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set the active toolchain via &lt;code&gt;rustup set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use it on demand via &lt;code&gt;rustup run $toolchain $cmd&lt;/code&gt; (example: &lt;code&gt;rustup run nightly cargo build&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;etc.&lt;/p&gt;</content><category term="all"></category><category term="rust"></category></entry><entry><title>Clojure goes native with GraalVM</title><link href="https://nicokosi.github.io/clojure-goes-native-with-graalvm-en.html" rel="alternate"></link><published>2018-05-12T13:00:00+02:00</published><updated>2018-05-12T13:00:00+02:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2018-05-12:/clojure-goes-native-with-graalvm-en.html</id><summary type="html">&lt;p&gt;Use GraalVM to generate native executable for 'hubstats', a Clojure project.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;What is GraalVM?&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.graalvm.org/"&gt;GraalVM&lt;/a&gt; is a virtual machine that supports several programming languages: Java, JVM-based languages (Scala, Groovy, Kotlin etc.), JavaScript, LLVM, Ruby and R. It also allows to generate native executables from Java bytecode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;For&lt;/span&gt; &lt;span class="nv"&gt;JVM&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;based&lt;/span&gt; &lt;span class="nv"&gt;languages&lt;/span&gt;, &lt;span class="nv"&gt;GraalVM&lt;/span&gt; &lt;span class="nv"&gt;offers&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;mechanism&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;create&lt;/span&gt; &lt;span class="nv"&gt;precompiled&lt;/span&gt; &lt;span class="nv"&gt;native&lt;/span&gt; &lt;span class="nv"&gt;images&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;instant&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="nv"&gt;up&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;low&lt;/span&gt; &lt;span class="nv"&gt;memory&lt;/span&gt; &lt;span class="nv"&gt;footprint&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://blogs.oracle.com/developers/announcing-graalvm"&gt;Oracle labs announced in April 2018&lt;/a&gt; GraalVM 1.0 release candidate, so let's have a try!&lt;/p&gt;
&lt;h2&gt;Build a native executable for a Clojure project&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/nicokosi/hubstats"&gt;hubstats&lt;/a&gt; is my Clojure toy project for displaying statistics about GitHub pull requests. It is a command line tool that runs with a Java virtual machine, so GraalVM could bring instant startup via a native executable.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I have used some tips from this &lt;a href="https://www.innoq.com/en/blog/native-clojure-and-graalvm/"&gt;interesting blog post&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I have used GraalVM Community Edition, which is free and open source (Enterprise Edition also exists).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Attempt #1&lt;/h3&gt;
&lt;p&gt;From a "fat" JAR (an archive with Java bytecode that includes all its dependencies), I ran the command &lt;code&gt;native-image&lt;/code&gt; from &lt;a href="https://github.com/Danny02/graalvm-docker"&gt;GraalVM 1.0.0-rc1 inside a Docker container&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;native-image &lt;span class="se"&gt;\&lt;/span&gt;
  -jar hubstats-0.1.0-SNAPSHOT-standalone.jar &lt;span class="se"&gt;\&lt;/span&gt;
  -H:+ReportUnsupportedElementsAtRuntime &lt;span class="se"&gt;\&lt;/span&gt;
  hubstats.core
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(see the &lt;a href="https://github.com/nicokosi/hubstats/pull/12/files"&gt;full details here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Bad luck, the native image generation failed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Step&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;native&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;   &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;hubstats&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.1.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;standalone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;   &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="o"&gt;:+&lt;/span&gt;&lt;span class="n"&gt;ReportUnsupportedElementsAtRuntime&lt;/span&gt;   &lt;span class="n"&gt;hubstats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;
 &lt;span class="o"&gt;---&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Running&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;e7f911774bd4&lt;/span&gt;
&lt;span class="kr"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;26681&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
   &lt;span class="n"&gt;classlist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;159.26&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;485.02&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
       &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;563.80&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
    &lt;span class="n"&gt;analysis&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;109.06&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="n"&gt;fatal&lt;/span&gt; &lt;span class="nf"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NullPointerException&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;sun&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeConstructorAccessorImpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newInstance0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Native&lt;/span&gt; &lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;sun&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeConstructorAccessorImpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeConstructorAccessorImpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;sun&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DelegatingConstructorAccessorImpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DelegatingConstructorAccessorImpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;423&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForkJoinTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getThrowableException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ForkJoinTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;598&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForkJoinTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ForkJoinTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1005&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;398&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageGeneratorRunner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buildImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageGeneratorRunner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;240&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageGeneratorRunner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageGeneratorRunner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;337&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executeCompilation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;378&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;processCommand&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;315&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withJVMContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;396&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;312&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;serve&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageBuildServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;216&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runWorker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1149&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;624&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;748&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Caused&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NullPointerException&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pointsto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scanField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;113&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pointsto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doScan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;263&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pointsto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;307&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pointsto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scanBootImageHeapRoots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pointsto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scanBootImageHeapRoots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectScanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pointsto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BigBang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkObjectGraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BigBang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;581&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pointsto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BigBang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BigBang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;552&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doRun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;653&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NativeImageGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NativeImageGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;381&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForkJoinTask&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;AdaptedRunnableAction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ForkJoinTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1386&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForkJoinTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doExec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ForkJoinTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;289&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForkJoinPool&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;WorkQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ForkJoinPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1056&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForkJoinPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runWorker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ForkJoinPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1692&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForkJoinWorkerThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ForkJoinWorkerThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;157&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Processing&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="kr"&gt;build&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I visibly hit a similar issue than &lt;a href="https://github.com/oracle/graal/issues/385"&gt;issue#385&lt;/a&gt; and &lt;a href="https://github.com/oracle/graal/issues/375"&gt;issue#375&lt;/a&gt;. It seems to be related to the &lt;a href="https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md#static-initializers"&gt;"static initializers" limitation&lt;/a&gt;. üò¢&lt;/p&gt;
&lt;h3&gt;Attempt #2&lt;/h3&gt;
&lt;p&gt;Since some fixes were available in &lt;a href="https://github.com/graalvm/"&gt;GraalVM's GitHub repository&lt;/a&gt;, I tried to build &lt;code&gt;substratevm&lt;/code&gt; sub-module from source.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I grabbed GraalVM's code:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone git@github.com:oracle/graal.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As stated in &lt;a href="https://github.com/oracle/graal/tree/master/substratevm"&gt;substratevm's README file&lt;/a&gt;, I downloaded the &lt;a href="http://www.oracle.com/technetwork/oracle-labs/program-languages/downloads/index.html"&gt;GraalVM "labs" JDK&lt;/a&gt; then I built the 'substratevm' module that includes the 'native-image' command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; substratevm
&lt;span class="nv"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/Downloads/labsjdk1.8.0_161-jvmci-0.42/Contents/Home ../../mx/mx build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I then launched the 'native-image' command but it "hanged" forever:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="o"&gt;=~/&lt;/span&gt;&lt;span class="n"&gt;Downloads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;labsjdk1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="n"&gt;_161&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jvmci&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.42&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Contents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;../&lt;/span&gt;&lt;span class="n"&gt;graal&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;substratevm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;native&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hubstats&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;standalone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;hubstats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;
&lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18933&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;55103&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
   &lt;span class="n"&gt;classlist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;744.32&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;531.16&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
       &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;401.40&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A similar issue has already been reported in GraalVM issues: &lt;a href="https://github.com/oracle/graal/issues/411"&gt;"native image failed to build jar&lt;/a&gt;. üò≠&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Obviously, these first attempts were not successful, but GraalVM is a young project and I do not know much about it. Nevertheless, it was fun to discover GraalVM which looks promising! üòç&lt;/p&gt;
&lt;p&gt;I will try again, stay tuned!&lt;/p&gt;</content><category term="all"></category><category term="clojure native graalvm"></category></entry><entry><title>Creating Strava charts with R</title><link href="https://nicokosi.github.io/creating-strava-charts-with-r-en.html" rel="alternate"></link><published>2017-04-14T12:10:00+02:00</published><updated>2017-04-14T12:10:00+02:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2017-04-14:/creating-strava-charts-with-r-en.html</id><summary type="html">&lt;p&gt;Use R to generate custom Strava charts.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Creating Strava charts with R&lt;/h1&gt;
&lt;p&gt;This article is the sequel of &lt;a href="creating-strava-charts-with-clojure-and-incanter-en.html"&gt;Creating Strava charts with Clojure and Incanter&lt;/a&gt;: I decided to have another try generating charts with R (even though I don't know much about it).&lt;/p&gt;
&lt;p&gt;R seems to be well-suited for charts generation. The free IDE &lt;a href="https://www.rstudio.com/products/RStudio/"&gt;RStudio Desktop&lt;/a&gt; brings several facilities: dataset visualization, variable history, integrated help etc. RStudio Desktop can be &lt;a href="http://www.rstudio.com/products/rstudio/download/"&gt;downloaded&lt;/a&gt; or installed via a packet manager (for instance, on a Mac with &lt;code&gt;homebrew&lt;/code&gt;, you can run &lt;code&gt;brew cask install rstudio&lt;/code&gt; from a terminal).&lt;/p&gt;
&lt;p&gt;So our goal is still to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;call Strava API that returns activities as JSON data&lt;/li&gt;
&lt;li&gt;transform data: do basic conversions (meters per second into km/h, seconds into minutes, etc.)&lt;/li&gt;
&lt;li&gt;display a chart (example: distance and moving time)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br/&gt;
R has many additional libraries that are available on "CRAN repository". The following statements import the libraries I have selected:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rjson&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;httr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ggplot2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scales&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;1. Retrieve data via Strava API&lt;/h3&gt;
&lt;p&gt;The following code calls the &lt;a href="http://strava.github.io/api/v3/activities/"&gt;Strava API for activities&lt;/a&gt; with an authorization token to retrieve the 200 last activities (run/ride/swim), as a JSON string (&lt;code&gt;characters&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter Strava access token: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;activities&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://www.strava.com/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;api/v3/activities&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;per_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;activities&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Retrieve JSON content as string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;2. Transform data&lt;/h3&gt;
&lt;p&gt;We then need to transform our JSON content into tabular data, called &lt;code&gt;dataframes&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;activities&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;fromJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# Transform JSON content into lists&lt;/span&gt;
&lt;span class="n"&gt;activities&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;      &lt;span class="c1"&gt;# Apply an anonymous function on each list elements&lt;/span&gt;
  &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is.null&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kc"&gt;NA&lt;/span&gt;           &lt;span class="c1"&gt;# Replace nulls by &amp;quot;missing&amp;quot; (N/A)&lt;/span&gt;
  &lt;span class="nf"&gt;unlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;do.call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rbind&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I have to admit I "cheated" with Google because R data structures are not my cup of tea! ü§ì&lt;/p&gt;
&lt;p&gt;However, we can notice that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R is a dynamic languages: variable types are not specified.&lt;/li&gt;
&lt;li&gt;Variables can be re-affected (and their type can change)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Distances and durations can be converted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Convert durations into minutes (Strava API returns seconds):&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;moving_time&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;as.numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;as.character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;moving_time&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;

&lt;span class="c1"&gt;# Convert distances into kilometers (Strava API returns meters):&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;as.numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;as.character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nota bene: our dataframe contains &lt;code&gt;factors&lt;/code&gt; (factors are data with all known values). Before converting them, we need to retrieve their name via the function &lt;code&gt;as.character&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;3. Display a chart&lt;/h3&gt;
&lt;p&gt;The final step consists in using the &lt;code&gt;ggplot2&lt;/code&gt; library to display a chart for "distance and moving time" and export it as a PNG image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="nf"&gt;ggplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;aes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;moving_time&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="nf"&gt;geom_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#CC0000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="c1"&gt;# red points&lt;/span&gt;
    &lt;span class="nf"&gt;geom_smooth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="c1"&gt;# add a line for linear regression&lt;/span&gt;
    &lt;span class="nf"&gt;xlab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;distance per activity (kilometers)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="c1"&gt;# X label&lt;/span&gt;
    &lt;span class="nf"&gt;ylab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;moving time (minutes)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Y label&lt;/span&gt;
  &lt;span class="nf"&gt;ggsave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/tmp/moving-time.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# save in a PNG file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The generated chart:
&lt;img alt="Chart: distance and moving time" src="images/r-chart-distance-per-moving-time.png"&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://gist.github.com/nicokosi/241331f67692945ddca4e4ea2cc0597d"&gt;full code&lt;/a&gt; that displays several charts.&lt;/p&gt;</content><category term="all"></category><category term="strava charts r rstudio"></category></entry><entry><title>Creating Strava charts with Clojure and Incanter</title><link href="https://nicokosi.github.io/creating-strava-charts-with-clojure-and-incanter-en.html" rel="alternate"></link><published>2017-04-09T17:37:00+02:00</published><updated>2017-04-09T17:37:00+02:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2017-04-09:/creating-strava-charts-with-clojure-and-incanter-en.html</id><summary type="html">&lt;p&gt;Use Clojure Incanter to generate custom Strava charts.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Creating Strava charts via Clojure and Incanter&lt;/h1&gt;
&lt;p&gt;I use &lt;a href="https://www.strava.com/"&gt;Strava&lt;/a&gt; to record my jogging sessions: I can record my sessions via my smartphone and publish them. I can then review or share them.&lt;/p&gt;
&lt;p&gt;In addition to provided Strava dashboards, I wanted to generate my own charts in order to visualize my progress.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;First attempt: via R&lt;/h2&gt;
&lt;p&gt;In first tried to use &lt;a href="https://www.rstudio.com/"&gt;RStudio&lt;/a&gt;, an IDE for R. I know this tool is very well-suited but I don't know much about it. After a few hours, I was not able to load and transform JSON data.&lt;/p&gt;
&lt;p&gt;&lt;img alt="RStudio: an IDE for R platform" src="images/RStudio.png"&gt;&lt;/p&gt;
&lt;p&gt;Note to myself: try again another time! üòÖ&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Second attempt: via Clojure and Incanter&lt;/h2&gt;
&lt;p&gt;I then used another option: &lt;a href="http://incanter.org"&gt;Incanter&lt;/a&gt;, which is&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clojure-based, R-like platform for statistical computing and graphics.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Basically, I had to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;call Strava API that return activities as JSON data&lt;/li&gt;
&lt;li&gt;transform data: do basic conversions (meters per second into km/h, seconds into minutes)&lt;/li&gt;
&lt;li&gt;display charts: average speed per date&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So let's dive into it!&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;1. Retrieve data via Strava API&lt;/h3&gt;
&lt;p&gt;The following function:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;calls the &lt;a href="http://strava.github.io/api/v3/activities/"&gt;Strava API for activities&lt;/a&gt; with an authorization token to retrieve the 200 last activities (run/ride/swim), as a JSON object array&lt;/li&gt;
&lt;li&gt;converts this JSON object array to a sequence of Clojure maps:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;strava-activities&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;token&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;json/read-str&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:body&lt;/span&gt;
                   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;http-client/get&lt;/span&gt;
                     &lt;span class="s"&gt;&amp;quot;https://www.strava.com/api/v3/activities&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:query-params&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:access_token&lt;/span&gt; &lt;span class="nv"&gt;token&lt;/span&gt; &lt;span class="ss"&gt;:per_page&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;}}))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;2. Transform data&lt;/h3&gt;
&lt;p&gt;We can operate some data transformation, defining the following functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;; Display speed unit in km/h (Strava API returns m/s):&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;meters-per-second-&amp;gt;kilometers-per-hour&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;partial * &lt;/span&gt;&lt;span class="mf"&gt;3.6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;; Display durations in minutes (Strava API returns seconds):&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;seconds-&amp;gt;minutes&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;; Incanter can only generate charts for numerical data, so ISO dates must be converted to timestamps:&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;string-date-&amp;gt;millis&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;str-date&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.getTime&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;clojure.instant/read-instant-date&lt;/span&gt; &lt;span class="nv"&gt;str-date&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These functions can be applied on activities data via the "thread-last" operator (&lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt;), which is great for function pipelines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;strava-activities&lt;/span&gt; &lt;span class="nv"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;update-in&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;average_speed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;meters-per-second-&amp;gt;kilometers-per-hour&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;update-in&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;start_date_local&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;string-date-&amp;gt;millis&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;update-in&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elapsed_time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;seconds-&amp;gt;minutes&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;update-in&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;moving_time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;seconds-&amp;gt;minutes&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;3. Display a chart via Incanter&lt;/h3&gt;
&lt;p&gt;The final step is to use an Incanter function to display a chart:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;display-chart&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;token&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;activities&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-activities&lt;/span&gt; &lt;span class="nv"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;with-data&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;to-dataset&lt;/span&gt; &lt;span class="nv"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;view&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;view&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;time-series-plot&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;$&lt;/span&gt; &lt;span class="ss"&gt;:start_date_local&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;$&lt;/span&gt; &lt;span class="ss"&gt;:average_speed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="ss"&gt;:group-by&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;$&lt;/span&gt; &lt;span class="ss"&gt;:type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="ss"&gt;:title&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Average speed over time&amp;quot;&lt;/span&gt;
          &lt;span class="ss"&gt;:x-label&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
          &lt;span class="ss"&gt;:y-label&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;average speed (km/h)&amp;quot;&lt;/span&gt;
          &lt;span class="ss"&gt;:points&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;
          &lt;span class="ss"&gt;:legend&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All this code displays this kind of chart:
&lt;img alt="Chart: average speed over time" src="images/chart-average-speed-over-time.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
You can find the full code that generates several charts in &lt;a href="https://github.com/nicokosi/strava-activity-graphs/"&gt;strava-activity-graphs GitHub repository&lt;/a&gt;.&lt;/p&gt;</content><category term="all"></category><category term="strava charts clojure incanter"></category></entry><entry><title>Discovering GitHub APIs while learning Clojure</title><link href="https://nicokosi.github.io/discover-github-apis-with-clojure-en.html" rel="alternate"></link><published>2017-01-11T08:56:00+01:00</published><updated>2017-01-11T08:56:00+01:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2017-01-11:/discover-github-apis-with-clojure-en.html</id><summary type="html">&lt;p&gt;Discovering GitHub APIs while learning Clojure.&lt;/p&gt;</summary><content type="html">&lt;p&gt;As a developer, it's important to keep on learning/discovering stuff. Quoting &lt;a href="https://pragprog.com/book/tpp/the-pragmatic-programmer"&gt;The Pragmatic Programmer&lt;/a&gt; :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Invest Regularly in Your Knowledge Portfolio&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My last project "for learning" was to create a command-line tool, named &lt;a href="https://github.com/nicokosi/hubstats"&gt;hubstats&lt;/a&gt;, that outputs a summary for &lt;a href="https://help.github.com/articles/github-glossary/#pull-request"&gt;pull requests GitHub&lt;/a&gt;. This tool aims at giving some metrics for me and my team.&lt;/p&gt;
&lt;p&gt;The real purposes were to practice &lt;a href="https://clojure.org/"&gt;Clojure&lt;/a&gt; (which I knew little) but also to discover &lt;a href="https://developer.github.com/v3/"&gt;REST&lt;/a&gt; and &lt;a href="https://developer.github.com/early-access/graphql/"&gt;GraphQL&lt;/a&gt; GitHub APIs.&lt;/p&gt;
&lt;p&gt;Moreover, I was lucky to interact with a colleague of mine who is an advanced Clojure developer. That was really cool, thanks J√©r√¥me aka &lt;a href="https://github.com/jprudent"&gt;@jprudent&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;What is &lt;em&gt;hubstats&lt;/em&gt;?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;hubstats&lt;/em&gt; is a simple command line tool that outputs, for a given &lt;a href="https://help.github.com/articles/github-glossary/#repository"&gt;GitHub repository&lt;/a&gt;, the number of opened/commented/merged pull requests by author for a given period (last week, since a given date, etc.).&lt;/p&gt;
&lt;p&gt;Here is an output example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;lein run --organization softwarevidal --repository arthur --token &lt;span class="nv"&gt;$token&lt;/span&gt;
pull requests &lt;span class="k"&gt;for&lt;/span&gt; softwarevidal/arthur -&amp;gt;
    since &lt;span class="m"&gt;1&lt;/span&gt; week&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;:
        &lt;span class="m"&gt;9&lt;/span&gt; opened / &lt;span class="m"&gt;56&lt;/span&gt; commented / &lt;span class="m"&gt;5&lt;/span&gt; closed
        opened per author: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cmahalin&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;jcgay&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;AElMehdiVidal&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
        commented per author: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vidal-rm&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;jcgay&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;cmahalin&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
        closed per author: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cmahalin&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;AElMehdiVidal&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;jprudent&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;I have chosen Clojure, a language that is different from the language that I use every day (Java).&lt;/p&gt;
&lt;p&gt;The following characteristics appealed to me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dynamic and interactive development: code is short and simple, which seems cool for an internal tool; what's more, the &lt;a href="https://clojure.org/about/dynamic#_the_repl"&gt;REPL&lt;/a&gt; is a base tool that greatly fit to a discovery mindset.&lt;/li&gt;
&lt;li&gt;functional programming: functions are &lt;em&gt;first-class citizen&lt;/em&gt;, immutability and function recursion are basics&lt;/li&gt;
&lt;li&gt;Lisp: Clojure is a Lisp, so writing code is a bit different from C-like languages ; Code is data and can be edited via &lt;a href="https://www.emacswiki.org/emacs/ParEdit"&gt;paredit&lt;/a&gt; (emacs-like mode for editing code while keeping parentheses balanced).&lt;/li&gt;
&lt;li&gt;simplicity: Clojure encourages too use small libraries instead of huge frameworks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href="https://clojure.org/about/rationale"&gt;Clojure Rationale&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My dev setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.jetbrains.com/idea/"&gt;IntelliJ IDEA&lt;/a&gt; with &lt;a href="https://cursive-ide.com/"&gt;Cursive plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cursive-ide.com/userguide/paredit.html"&gt;Cursive &lt;em&gt;paredit&lt;/em&gt; mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leiningen.org/"&gt;Leiningen&lt;/a&gt; as build tool&lt;/li&gt;
&lt;li&gt;&lt;a href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt; for continuous integration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;So what?&lt;/h2&gt;
&lt;p&gt;What I liked:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a "parenthesis" (haha!) with my daily Java routines/habits&lt;/li&gt;
&lt;li&gt;&lt;em&gt;paredit&lt;/em&gt; is confusing at first, then pleasant to use&lt;/li&gt;
&lt;li&gt;REPL rocks for&lt;ul&gt;
&lt;li&gt;shaping code (acts as a draft for new code)&lt;/li&gt;
&lt;li&gt;troubleshooting bugs (example: incorrect GitHub pagination traversing that led to out-of-memory crash)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;unit tests are easy to write (example: &lt;a href="https://clojuredocs.org/clojure.core/with-redefs"&gt;&lt;code&gt;with-redefs&lt;/code&gt;&lt;/a&gt; macro can be used to mock functions: https://clojuredocs.org/clojure.core/with-redefs)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I did not like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WTFs when runtime bugs occurred (obscure stack traces)&lt;/li&gt;
&lt;li&gt;integrated documentation lacks examples. I often had to browse &lt;a href="https://clojuredocs.org/"&gt;Clojure Docs&lt;/a&gt; to understand Clojure base functions via useful examples.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Some ideas for some evolutions (or an other project, maybe?):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;a href="https://developer.github.com/early-access/graphql/"&gt;GitHub GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;make a web app for &lt;em&gt;hubstats&lt;/em&gt; (via &lt;a href="https://clojurescript.org/"&gt;ClojureScript&lt;/a&gt;?)&lt;/li&gt;
&lt;li&gt;build another CLI tool&lt;/li&gt;
&lt;li&gt;learn another language (for example: &lt;a href="https://golang.org/"&gt;Go&lt;/a&gt; or &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's all folk! üòâ&lt;/p&gt;</content><category term="all"></category><category term="clojure github"></category></entry><entry><title>Let's play with pattern matching in Haskell</title><link href="https://nicokosi.github.io/haskell-pattern-matching-en.html" rel="alternate"></link><published>2016-09-27T00:00:00+02:00</published><updated>2016-09-27T00:00:00+02:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2016-09-27:/haskell-pattern-matching-en.html</id><summary type="html">&lt;p&gt;Let's discover Haskell pattern matching&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let's discover Haskell and pattern matching via basic examples similar to &lt;a href="https://nicokosi.github.io/scala-pattern-matching-en.html"&gt;"Let's play with pattern matching in Scala"&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Step #1: create an enumeration&lt;/h2&gt;
&lt;p&gt;We can create an enumeration that represent the four suites in French playing cards:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;CardSuite&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Club&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Diamond&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Heart&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Spade&lt;/span&gt;
  &lt;span class="kr"&gt;deriving&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We have just created our own &lt;em&gt;data type&lt;/em&gt; which:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;has four constructors (&lt;em&gt;value constructors&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;inherits from Haskell's base types:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Eq&lt;/code&gt; in order to know if two values are equal or not&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Enum&lt;/code&gt; so that all values are known and ordered (&lt;em&gt;sequentially ordered types&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Show&lt;/code&gt; so that we can have a string representation for debugging/troubleshooting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can then use &lt;code&gt;ghci&lt;/code&gt; (&lt;em&gt;Glascow Haskell Compiler Interactive environment&lt;/em&gt;), the Haskell REPL, to illustrate how we can use this enumeration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Heart&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;Heart&lt;/span&gt;
&lt;span class="kt"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Heart&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="kt"&gt;Spade&lt;/span&gt;
&lt;span class="kt"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;succ&lt;/span&gt; &lt;span class="kt"&gt;Heart&lt;/span&gt;
&lt;span class="kt"&gt;Spade&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Pattern matching examples&lt;/h2&gt;
&lt;h3&gt;Example #1&lt;/h3&gt;
&lt;p&gt;The following function returns the Unicode symbol for a given card suite:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;symbol&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;CardSuite&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="nf"&gt;symbol&lt;/span&gt; &lt;span class="n"&gt;cardSuite&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
  &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;cardSuite&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
    &lt;span class="kt"&gt;Club&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;
    &lt;span class="kt"&gt;Diamond&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô¶&amp;quot;&lt;/span&gt;
    &lt;span class="kt"&gt;Heart&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;‚ô•&amp;quot;&lt;/span&gt;
    &lt;span class="kt"&gt;Spade&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;‚ô†&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's evaluate it :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;Heart&lt;/span&gt;
&lt;span class="err"&gt;‚ô•&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;$&lt;/code&gt; operator allows is a way chain function calls, omitting to use nested parenthesis (&lt;code&gt;putStrLn(symbol(Heart))&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;putStrLn&lt;/code&gt; standard function can display Unicode characters, whereas the standard function &lt;code&gt;show&lt;/code&gt; only displays ASCII characters. üòé&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;
Morevover, the Haskell compiler can detect a non-exhaustive pattern matching. For instance, the following code :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;symbol&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;CardSuite&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="nf"&gt;symbol&lt;/span&gt; &lt;span class="n"&gt;cardSuite&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
  &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;cardSuite&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
    &lt;span class="kt"&gt;Club&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;generates a compile-time warning :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;warning&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kt"&gt;Wincomplete&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kt"&gt;Pattern&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;exhaustive&lt;/span&gt;
    &lt;span class="kt"&gt;In&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;alternative&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;
        &lt;span class="kt"&gt;Patterns&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;
            &lt;span class="kt"&gt;Diamond&lt;/span&gt;
            &lt;span class="kt"&gt;Heart&lt;/span&gt;
            &lt;span class="kt"&gt;Spade&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and the following evaluation triggers an error :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="kt"&gt;Diamond&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;*** Exception: test-en.hs:(13,3)-(14,15): Non-exhaustive patterns in case&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Example #2, share expression with a 'where' block&lt;/h3&gt;
&lt;p&gt;Let's implement a &lt;code&gt;color&lt;/code&gt; function that returns "red" or "black" depending on the input card suite:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;CardSuite&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="nf"&gt;color&lt;/span&gt; &lt;span class="n"&gt;cardSuite&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
  &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;cardSuite&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
    &lt;span class="kt"&gt;Club&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;black&lt;/span&gt;
    &lt;span class="kt"&gt;Diamond&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;
    &lt;span class="kt"&gt;Heart&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;
    &lt;span class="kt"&gt;Spade&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;black&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt;
      &lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;black&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's evaluate it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;*Main&amp;gt; color Heart
&amp;quot;red&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;where&lt;/code&gt; keyword is used there to share some expressions.
&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Example #3: destructuring&lt;/h3&gt;
&lt;p&gt;Let's say we want to define our custom type &lt;code&gt;Card&lt;/code&gt; that combines a rank (1, 2, 3, ..., Jack, Queen, King) and a suite:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Rank&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;R1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;R2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;R3&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;R4&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;R5&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;R6&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;R7&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;R8&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;R9&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;R10&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Jack&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Queen&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;King&lt;/span&gt;
  &lt;span class="kr"&gt;deriving&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Ord&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Card&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;rank&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;suite&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;CardSuite&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kr"&gt;deriving&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;Card&lt;/code&gt; type uses the &lt;em&gt;record&lt;/em&gt; syntax that allows to name fields.&lt;/p&gt;
&lt;p&gt;We can then use pattern matching in order to de-structure a card, filtering some fields.
For instance, the following function determines if two cards have the same suite:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;sameSuite&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="nf"&gt;sameSuite&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;Card&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="n"&gt;suite1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Card&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="n"&gt;suite2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
  &lt;span class="n"&gt;suite1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;suite2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Call examples:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;*Main&amp;gt; :{
*Main| sameSuite (
*Main|        Card {rank=R1, suite=Diamond},
*Main|        Card {rank=R1, suite=Heart} )
*Main| :}
False
*Main&amp;gt; :{
*Main| sameSuite (
*Main|      Card {rank=Jack, suite=Heart},
*Main|      Card {rank=R1, suite=Diamond} )
*Main| :}
False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Card ranks, that are not needed by our function, have been filtered using the &lt;em&gt;wild-card&lt;/em&gt; symbol (&lt;code&gt;_&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;That's all, folks! ü§ì&lt;/p&gt;</content><category term="all"></category><category term="haskell"></category><category term="pattern-matching"></category></entry><entry><title>Let's play with pattern matching in Scala</title><link href="https://nicokosi.github.io/scala-pattern-matching-en.html" rel="alternate"></link><published>2016-09-14T00:00:00+02:00</published><updated>2016-09-14T00:00:00+02:00</updated><author><name>Nicolas Kosinski</name></author><id>tag:nicokosi.github.io,2016-09-14:/scala-pattern-matching-en.html</id><summary type="html">&lt;p&gt;Pattern matching is a powerful technique for filtering and testing variables. This article aims at illustrating pattern matching in Scala using a simple example.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pattern matching is a powerful technique for filtering and testing variables. This article aims at illustrating pattern matching in Scala using a simple example.
Let's say we want to return the color (red or black) of a playing card.&lt;/p&gt;
&lt;p&gt;Notes: The code below "shows" the console output using comments (ex: &lt;code&gt;"foo" // foo&lt;/code&gt;). I have used a &lt;a href="https://confluence.jetbrains.com/display/IntelliJIDEA/Working+with+Scala+Worksheet"&gt;IntelliJ IDEA worksheet&lt;/a&gt; but the standard Scala console can also be used (REPL FTW!)&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Step #1: let's create a simple class&lt;/h2&gt;
&lt;p&gt;Let's create a immutable class for the "club" suite:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Club&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;club&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;club&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Club&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Club&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;club&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="c1"&gt;// ‚ô£&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So far, so good. Instances can be compared by identity (reference) but not by value because we did not override the &lt;code&gt;equals&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;club&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;club&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="n"&gt;club&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Club&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="n"&gt;club&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Club&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="n"&gt;club&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Club&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;hashCode&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt; are also default ones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;club&lt;/span&gt; &lt;span class="c1"&gt;// Club@1ac88f64&lt;/span&gt;
&lt;span class="n"&gt;club&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 1976061787&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Club&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="n"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 1751431390&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Step #2: let's create a case class&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;case class&lt;/code&gt; has two benefits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;auto-implement &lt;code&gt;equals&lt;/code&gt;, &lt;code&gt;hashCode&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt; methods.&lt;/li&gt;
&lt;li&gt;enhance pattern matching capability via two methods: a "constructor" method, &lt;code&gt;apply&lt;/code&gt;, and a "de-constructor" method, &lt;code&gt;unapply&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CardSuite&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;apply&lt;/code&gt; method is a kind of free constructor. By the way, we don't need to use the &lt;code&gt;new&lt;/code&gt; keyword:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nc"&gt;CardSuite&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;club&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// CardSuite(‚ô£,club)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;equals&lt;/code&gt;, &lt;code&gt;hashCode&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt; methods are also implemented for free:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nc"&gt;CardSuite&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;club&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;
&lt;span class="nc"&gt;CardSuite&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;club&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nc"&gt;CardSuite&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;club&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nc"&gt;CardSuite&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;club&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CardSuite&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;club&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nc"&gt;CardSuite&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;club&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CardSuite&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;club&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nc"&gt;CardSuite&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;club&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 1302714609&lt;/span&gt;
&lt;span class="nc"&gt;CardSuite&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;club&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 1302714609&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;"Bonus" step: use an enumeration&lt;/h2&gt;
&lt;p&gt;Since there are four suites in French playing cards, we can create an enumeration. This is not directly related to our pattern matching example, but let's do it, for fun and profit. ;-)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;CardSuites&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nc"&gt;CLUB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CardSuite&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô£&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;club&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nc"&gt;DIAMOND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CardSuite&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô¶&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;diamond&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nc"&gt;HEART&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CardSuite&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô•&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;heart&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nc"&gt;SPADE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CardSuite&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;‚ô†&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;spade&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;DIAMOND&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;HEART&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;SPADE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;CLUB&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;CardSuites&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CLUB&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nc"&gt;CardSuites&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DIAMOND&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nc"&gt;CardSuites&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="c1"&gt;// List(CardSuite(‚ô¶,diamond), CardSuite(‚ô•,heart), CardSuite(‚ô†,spade), CardSuite(‚ô£,club))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Last step: let's use pattern matching!&lt;/h2&gt;
&lt;h3&gt;First example&lt;/h3&gt;
&lt;p&gt;Here is a first pattern matching example, used in a function that returns the color of a suite card:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;justColor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cardSuite&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CardSuite&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cardSuite&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;CardSuites&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CLUB&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;CardSuites&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SPADE&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;CardSuites&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DIAMOND&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;CardSuites&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;HEART&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;none&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;justColor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CardSuites&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SPADE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// black&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This example demonstrates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;|&lt;/code&gt; notation (&lt;em&gt;disjunction&lt;/em&gt;) that can be used to group several cases;&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;_&lt;/code&gt; notation (&lt;em&gt;wildcard&lt;/em&gt;) for "other cases".&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Second example&lt;/h3&gt;
&lt;p&gt;Here is a second example to demonstrate field filtering, also known as "de-structuring":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;describeColor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cardSuite&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CardSuite&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cardSuite&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;CardSuite&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;s&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;$label&lt;/span&gt;&lt;span class="s"&gt; is &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="n"&gt;justColor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cardSuite&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;describeColor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CardSuites&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SPADE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// spade is black&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We only keep the suite label using the &lt;code&gt;unapply&lt;/code&gt; method of our case class.&lt;/p&gt;
&lt;p&gt;That's all folks! ü§ì&lt;/p&gt;
&lt;p&gt;PS: Thanks to J√©r√¥me Prudent for the Scala tips and for the review. J√©r√¥me contributes to the &lt;a href="http://www.arolla.fr/blog"&gt;Arolla blog&lt;/a&gt; (&lt;a href="http://www.arolla.fr/blog/author/jerome-prudent/"&gt;direct link to his posts&lt;/a&gt;).&lt;/p&gt;</content><category term="all"></category><category term="scala"></category><category term="pattern-matching"></category><category term="console"></category><category term="repl"></category></entry></feed>