<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Le blog de Nicokosi</title>
    <link>https://nicokosi.github.io/test/tags/repl/index.xml</link>
    <description>Recent content on Le blog de Nicokosi</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/nicokosi&#34;&gt;Nicolas Kosinski&lt;/a&gt; 2016</copyright>
    <atom:link href="https://nicokosi.github.io/test/tags/repl/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Jouons avec le pattern matching en Scala</title>
      <link>https://nicokosi.github.io/test/post/scala-pattern-matching/</link>
      <pubDate>Wed, 14 Sep 2016 00:00:00 +0100</pubDate>
      
      <guid>https://nicokosi.github.io/test/post/scala-pattern-matching/</guid>
      <description>

&lt;p&gt;Le pattern matching est une technique puissante permettant de filtrer et de tester la valeur de variables. Le but de cet article est d‚Äôillustrer par l&amp;rsquo;exemple le pattern matching en Scala.&lt;/p&gt;

&lt;p&gt;Supposons que nous voulions cr√©er une fonction retournant la couleur (noir / rouge) d&amp;rsquo;une enseigne d&amp;rsquo;une carte √† jouer (les quatre enseignes du jeu fran√ßais √©tant : tr√®fle, c≈ìur, carreau et pique).&lt;/p&gt;

&lt;p&gt;Notes : dans le code ci-dessous, les commentaires se trouvant √† la fin de chaque ligne correspondent √† la sortie standard de la console ; j&amp;rsquo;ai utilis√© un &lt;a href=&#34;https://confluence.jetbrains.com/display/IntelliJIDEA/Working+with+Scala+Worksheet&#34;&gt;worksheet IntelliJ IDEA&lt;/a&gt; pour coder interactivement cet exemple, mais on peut bien s√ªr utiliser la console Scala.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;1√®re-√©tape-cr√©ation-d-une-simple-classe&#34;&gt;1√®re √©tape : cr√©ation d&amp;rsquo;une simple classe&lt;/h2&gt;

&lt;p&gt;Commen√ßons par cr√©er une classe immuable repr√©sentant l&amp;rsquo;enseigne &amp;ldquo;tr√®fle&amp;rdquo; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;class Tr√®fle {
   val symbole = &amp;quot;‚ô£&amp;quot;
   val libell√© = &amp;quot;tr√®fle&amp;quot;
}

val tr√®fle: Tr√®fle = new Tr√®fle()
tr√®fle.symbole // ‚ô£
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notons que cette classe permet de comparer des objets par identit√© (r√©f√©rence) et non par valeur car on ne surcharge pas la m√©thode &lt;code&gt;equals&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;tr√®fle.equals(tr√®fle) // true
tr√®fle == new Tr√®fle // false
tr√®fle.eq(new Tr√®fle) // false
tr√®fle.equals(new Tr√®fle) // false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De m√™me, les m√©thodes &lt;code&gt;hashCode&lt;/code&gt;, &lt;code&gt;toString&lt;/code&gt; sont celles par d√©faut :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;tr√®fle // Tr√®fle@1ac88f64
tr√®fle.hashCode() // 123717365
new Tr√®fle().hashCode() // 1323753063
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;2√®me-√©tape-cr√©ation-d-une-case-class&#34;&gt;2√®me √©tape : cr√©ation d&amp;rsquo;une case class&lt;/h2&gt;

&lt;p&gt;La cr√©ation d&amp;rsquo;une &lt;code&gt;case class&lt;/code&gt; permet :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;d&amp;rsquo;auto-impl√©menter les m√©thodes &lt;code&gt;equals&lt;/code&gt;, &lt;code&gt;hashCode&lt;/code&gt; et &lt;code&gt;toString&lt;/code&gt; ;&lt;/li&gt;
&lt;li&gt;de b√©n√©ficier de deux m√©thodes utiles au pattern matching : un &amp;ldquo;constructeur&amp;rdquo;, la m√©thode &lt;code&gt;apply&lt;/code&gt;, et un &amp;ldquo;d√©-constructeur&amp;rdquo;, la m√©thode &lt;code&gt;unapply&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case class Enseigne(symbole: String, libell√©: String)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous avons un constructeur &amp;ldquo;gratuit&amp;rdquo;, la m√©thode &lt;code&gt;apply&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Enseigne(&amp;quot;‚ô£&amp;quot;, &amp;quot;tr√®fle&amp;quot;) // Enseigne(‚ô£,tr√®fle)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous avons √©galement une impl√©mentation &amp;ldquo;gratuite&amp;rdquo;, bas√©e sur les champs, des m√©thodes &lt;code&gt;equals&lt;/code&gt;, &lt;code&gt;hashCode&lt;/code&gt; et &lt;code&gt;toString&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Enseigne(&amp;quot;‚ô£&amp;quot;, &amp;quot;tr√®fle&amp;quot;).symbole // ‚ô£
Enseigne(&amp;quot;‚ô£&amp;quot;, &amp;quot;tr√®fle&amp;quot;) == Enseigne(&amp;quot;‚ô£&amp;quot;, &amp;quot;tr√®fle&amp;quot;) // true
Enseigne(&amp;quot;‚ô£&amp;quot;, &amp;quot;tr√®fle&amp;quot;).equals(Enseigne(&amp;quot;‚ô£&amp;quot;, &amp;quot;tr√®fle&amp;quot;)) // true
Enseigne(&amp;quot;‚ô£&amp;quot;, &amp;quot;tr√®fle&amp;quot;).eq(Enseigne(&amp;quot;‚ô£&amp;quot;, &amp;quot;tr√®fle&amp;quot;)) // false
Enseigne(&amp;quot;‚ô£&amp;quot;, &amp;quot;tr√®fle&amp;quot;).hashCode() // 841520215
Enseigne(&amp;quot;‚ô£&amp;quot;, &amp;quot;tr√®fle&amp;quot;).hashCode() // 841520215
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;etape-bonus-cr√©ation-d-une-√©num√©ration&#34;&gt;Etape &amp;ldquo;bonus&amp;rdquo; : cr√©ation d&amp;rsquo;une √©num√©ration&lt;/h2&gt;

&lt;p&gt;Puisque nous avons quatre enseignes, nous pouvons cr√©er une √©num√©ration. Ca ne servira pas directement √† impl√©menter notre exemple final mais l&amp;rsquo;exemple s&amp;rsquo;y pr√™te bien.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;object Enseignes {
  val TREFLE = Enseigne(&amp;quot;‚ô£&amp;quot;, &amp;quot;tr√®fle&amp;quot;)
  val CARREAU = Enseigne(&amp;quot;‚ô¶&amp;quot;, &amp;quot;carreau&amp;quot;)
  val COEUR = Enseigne(&amp;quot;‚ô•&amp;quot;, &amp;quot;coeur&amp;quot;)
  val PIQUE = Enseigne(&amp;quot;‚ô†&amp;quot;, &amp;quot;pique&amp;quot;)
  def values() = List(CARREAU, COEUR, PIQUE, TREFLE)
}
Enseignes.TREFLE != Enseignes.CARREAU // true
Enseignes.values // List[Enseigne] = List(Enseigne(‚ô¶,carreau), Enseigne(‚ô•,coeur), Enseigne(‚ô†,pique), Enseigne(‚ô£,tr√®fle))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;derni√®re-√©tape-pattern-matchons&#34;&gt;Derni√®re √©tape : pattern matchons !&lt;/h2&gt;

&lt;h3 id=&#34;premier-exemple&#34;&gt;Premier exemple&lt;/h3&gt;

&lt;p&gt;Un premier exemple de pattern matching, utilis√© dans une fonction qui retourne la couleur de l&amp;rsquo;enseigne :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;def indiquerJusteLaCouleur(cardSuite: Enseigne): String = cardSuite match {
  case Enseignes.TREFLE | Enseignes.PIQUE =&amp;gt; &amp;quot;noir&amp;quot;
  case Enseignes.CARREAU | Enseignes.COEUR =&amp;gt; &amp;quot;rouge&amp;quot;
  case _ =&amp;gt; &amp;quot;aucune&amp;quot;
}

indiquerJusteLaCouleur(Enseignes.PIQUE) // noir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ce premier exemple met en avant :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;la notation &lt;code&gt;|&lt;/code&gt; (&lt;em&gt;disjunction&lt;/em&gt;) permettant de regrouper plusieurs cas ;&lt;/li&gt;
&lt;li&gt;la notation &lt;code&gt;_&lt;/code&gt; (&lt;em&gt;wildcard&lt;/em&gt;) pour g√©rer les autres cas.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;deuxi√®me-exemple&#34;&gt;Deuxi√®me exemple&lt;/h3&gt;

&lt;p&gt;Voici un deuxi√®me exemple montrant comment r√©cup√©rer s√©lectivement certains champs (ici, le libell√© de l&amp;rsquo;enseigne) en &amp;ldquo;d√©-structurant&amp;rdquo; notre instance de &lt;code&gt;case class&lt;/code&gt;, via la m√©thode &lt;code&gt;unapply&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;def d√©crireLaCouleur(enseigne: Enseigne): String = enseigne match {
  case Enseigne(_, libell√©) =&amp;gt; s&amp;quot;$libell√© is ${indiquerJusteLaCouleur(enseigne)}&amp;quot;
}

d√©crireLaCouleur(Enseignes.PIQUE) // pique est noir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et voil√† ! ü§ì&lt;/p&gt;

&lt;p&gt;PS : merci √† J√©r√¥me Prudent pour ses tuyaux en Scala et ses avis √©clair√©s.
J√©r√¥me est contributeur au &lt;a href=&#34;http://www.arolla.fr/blog&#34;&gt;blog d&amp;rsquo;Arolla&lt;/a&gt; (&lt;a href=&#34;http://www.arolla.fr/blog/author/jerome-prudent/&#34;&gt;lien direct vers ses articles&lt;/a&gt;).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>