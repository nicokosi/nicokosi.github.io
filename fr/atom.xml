<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="fr">
    <title></title>
    <link rel="self" type="application/atom+xml" href="https://nicokosi.github.io/fr/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://nicokosi.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-12-18T00:00:00+00:00</updated>
    <id>https://nicokosi.github.io/fr/atom.xml</id>
    <entry xml:lang="fr">
        <title>Quelques astuces shell &quot;unix-like&quot; que j&#x27;utilise dans mon terminal üßô</title>
        <published>2024-11-28T00:00:00+00:00</published>
        <updated>2024-12-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://nicokosi.github.io/fr/nix-terminal-tricks/"/>
        <id>https://nicokosi.github.io/fr/nix-terminal-tricks/</id>
        
        <content type="html" xml:base="https://nicokosi.github.io/fr/nix-terminal-tricks/">&lt;h1 id=&quot;quelques-astuces-shell-nix-que-j-utilise-dans-mon-terminal-mage&quot;&gt;Quelques astuces shell *nix que j&#x27;utilise dans mon terminal üßô&lt;&#x2F;h1&gt;
&lt;p&gt;Public pr√©sum√© : d√©velopeurs.ses utilisant leur terminal pour diverses t√¢ches.&lt;&#x2F;p&gt;
&lt;p&gt;Voici quelques commandes &#x2F; utilitaires que j&#x27;utilise r√©guli√®rement, peut-√™tre que √ßa peut vous √™tre utile ou que vous pourrez me donner votre avis ?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;l-anti-seche-tldr-memo&quot;&gt;l&#x27;anti-s√®che &lt;code&gt;tldr&lt;&#x2F;code&gt; üìù&lt;&#x2F;h2&gt;
&lt;p&gt;Ca m&#x27;est impossible de retenir toutes les options des commandes que j&#x27;utilise. Personnellement, j&#x27;aime avoir une sorte d&#x27;anti-s√®ches directement dans mon terminal, sans utiliser ni mon navigateur web, ni un outil d&#x27;intelligence artificielle comme ChatGPT.&lt;&#x2F;p&gt;
&lt;p&gt;Pour √ßa, j&#x27;utilise souvent &lt;a href=&quot;https:&#x2F;&#x2F;tldr.sh&quot;&gt;tldr&lt;&#x2F;a&gt; comme une anti-s√®che, c&#x27;est tr√®s pratique !&lt;&#x2F;p&gt;
&lt;p&gt;Par exemple, la commande &lt;code&gt;tldr --language fr git&lt;&#x2F;code&gt; affiche les 8 options les plus courantes de &lt;code&gt;git&lt;&#x2F;code&gt;, avec une description courte (pour information, on peut avoir les informations en plusieurs langues) :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Syst√®me de gestion de versions d√©centralis√©.
&lt;&#x2F;span&gt;&lt;span&gt;Certaines commandes comme `git commit` ont leur propre documentation.
&lt;&#x2F;span&gt;&lt;span&gt;Plus d&amp;#39;informations : &amp;lt;https:&#x2F;&#x2F;git-scm.com&#x2F;&amp;gt;.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Ex√©cuter une sous-commande Git :
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    git sous_commande
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Ex√©cuter une sous-commande Git sur un r√©pertoire personnalis√© :
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    git -C chemin&#x2F;vers&#x2F;repertoire sous_commande
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Ex√©cuter une sous-commande Git avec un param√®tre de configuration sp√©cifique :
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    git -c &amp;#39;cle_param_config=valeur&amp;#39; sous_commande
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Afficher l&amp;#39;aide g√©n√©rale :
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    git --help
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Afficher l&amp;#39;aide sur une sous-commande Git :
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    git help sous_commande
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Obtenir la version de Git :
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    git --version
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;aliases-name-badge&quot;&gt;aliases üìõ&lt;&#x2F;h3&gt;
&lt;h2 id=&quot;alias-permanents&quot;&gt;alias permanents&lt;&#x2F;h2&gt;
&lt;p&gt;Cas d&#x27;utilisation : taper plus vite les commandes souvent utilis√©es.&lt;&#x2F;p&gt;
&lt;p&gt;Par exemple, comme j&#x27;utilise souvent la commande Maven &lt;code&gt;mvn&lt;&#x2F;code&gt;, j&#x27;ai d√©fini cet aliax Unix dans ma configuration de shell :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mvncist&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mvn clean install -DskipTests&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ainsi, je n&#x27;ai qu&#x27;√† taper &lt;code&gt;mvncist&lt;&#x2F;code&gt; pour reconstruire un projet Maven sans avoir √† attendre l&#x27;ex√©cution des tests.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;aliases-a-la-demande&quot;&gt;aliases √† la demande&lt;&#x2F;h3&gt;
&lt;p&gt;Cas d&#x27;utilisation : √©viter de taper de nombreuses fois la m√™me commande que j&#x27;utilise de fa√ßon intensive pendant une p√©riode donn√©e.&lt;&#x2F;p&gt;
&lt;p&gt;Par exemple, je n&#x27;utilise pas souvent Docker en ligne de commandes, mais il peut m&#x27;arriver de l&#x27;utiliser plusieurs dizaines de fois pendant une heure, si j&#x27;investigue un probl√®me ou si je d√©finis une image via un fichier Dockerfile.
Dans ce cas, je peux √™tre amen√© √† cr√©er un alias Unix qui ne dure que le temps de ma session, puis je taperai les diff√©rents commandes en utilisant cet alias :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;docker
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt; ps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt; images
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# etc.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;filtrer-la-sortie-mag-right&quot;&gt;filtrer la sortie üîé&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;avec-grep&quot;&gt;avec &lt;code&gt;grep&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;L&#x27;utilisation de &lt;em&gt;pipe&lt;&#x2F;em&gt; Unix avec la commande &lt;code&gt;grep&lt;&#x2F;code&gt; ou ses √©quivalents comme &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ggreer&#x2F;the_silver_searcher&quot;&gt;ag, &quot;the silver searcher&quot;&lt;&#x2F;a&gt; est bien utile quand je sais quoi chercher.&lt;&#x2F;p&gt;
&lt;p&gt;Par exemple, j&#x27;utilise souvent la commande &lt;code&gt;df -h | grep disk1s1&lt;&#x2F;code&gt; pour conna√Ætre l&#x27;espace disque restant sur mon disque dur.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;avec-fzf-le-command-line-fuzzy-finder&quot;&gt;avec &lt;code&gt;fzf&lt;&#x2F;code&gt;, le &quot;command-line fuzzy finder&quot;&lt;&#x2F;h3&gt;
&lt;p&gt;Quand je ne sais pas pr√©cisement quoi chercher, j&#x27;utilise souvent &lt;a href=&quot;https:&#x2F;&#x2F;junegunn.github.io&#x2F;fzf&#x2F;&quot;&gt;fzf, the &quot;command-line fuzzy finder&quot;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Par exemple, quand je veux conna√Ætre la liste des environnements Java (&lt;em&gt;Java Development Kits&lt;&#x2F;em&gt;) que j&#x27;ai install√©s, je lance peux taper la commande &lt;code&gt;sdk list java | fzf&lt;&#x2F;code&gt; :&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;nicokosi.github.io&#x2F;fr&#x2F;nix-terminal-tricks&#x2F;fzf-sdk.gif&quot; alt=&quot;Utilisation de &amp;#39;fzf&amp;#39; pour filtrer la commande &amp;#39;sdk&amp;#39;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Et pour copier plusieurs lignes, l&#x27;option &lt;code&gt;--multi&lt;&#x2F;code&gt; (ou sa version courte &lt;code&gt;-m&lt;&#x2F;code&gt;) est pratique.&lt;&#x2F;p&gt;
&lt;p&gt;Par exemple, &lt;code&gt;eza ~ | fzf -m&lt;&#x2F;code&gt; affiche :&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;nicokosi.github.io&#x2F;fr&#x2F;nix-terminal-tricks&#x2F;fzf-m-eza.gif&quot; alt=&quot;Utilisation de &amp;#39;fzf&amp;#39; pour filtrer et selectionner plusieurs lignes de la commande &amp;#39;eza&amp;#39;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;les-tuis-pour-aller-plus-vite-zap&quot;&gt;les &lt;em&gt;TUIs&lt;&#x2F;em&gt;, pour aller plus vite ! ‚ö°Ô∏è&lt;&#x2F;h2&gt;
&lt;p&gt;J&#x27;utilise plusieurs commandes de type &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Text-based_user_interface&quot;&gt;&lt;em&gt;Text-based User Interfaces&lt;&#x2F;em&gt; (ou &lt;em&gt;Terminal-based&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;, souvent d√©sign√©es par le sigle &lt;em&gt;TUI&lt;&#x2F;em&gt; :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jonas.github.io&#x2F;tig&#x2F;&quot;&gt;tig&lt;&#x2F;a&gt; pour explorer rapidement les commits Git (m√™me si j&#x27;utilise aussi la commande &lt;code&gt;git&lt;&#x2F;code&gt; dans mon terminal, ainsi que l&#x27;int√©gration Git de mon environnement de d√©veloppement (&lt;em&gt;IDE&lt;&#x2F;em&gt;).)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jesseduffield&#x2F;lazydocker&quot;&gt;lazydocker&lt;&#x2F;a&gt; pour manipuler des containers Docker rapidement (m√™me j&#x27;utilise aussi la commande &lt;code&gt;docker&lt;&#x2F;code&gt; directement)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;imsnif&#x2F;diskonaut&quot;&gt;diskonaut&lt;&#x2F;a&gt; pour faire du m√©nage sur mon disque dur&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nicokosi.github.io&#x2F;fr&#x2F;nix-terminal-tricks&#x2F;%5Burl%5D(https:&#x2F;&#x2F;github.com&#x2F;korosuke613&#x2F;gh-user-stars?tab=readme-ov-file)&quot;&gt;l&#x27;extension GitHub CLI &lt;code&gt;user-stars&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; pour retrouver des d√©p√¥ts GitHub auxquels j&#x27;ai mis une &quot;√©toile&quot; (sorte de favori)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Avant de finir, un remerciement √† mes coll√®gues qui m&#x27;ont aid√© √† apprendre ces astuces. Je pense notamment √† Amazigh, Alexis, St√©phane, Yoann, Jean-Christophe... et je suis s√ªr d&#x27;en oublier (ne m&#x27;en veuillez pas) ! ü§ó&lt;&#x2F;p&gt;
&lt;p&gt;Et voil√†, c&#x27;est termin√© ! ü§ì&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="fr">
        <title>Mon Devoxx France 2024</title>
        <published>2024-04-22T00:00:00+00:00</published>
        <updated>2024-04-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://nicokosi.github.io/fr/devoxx-fr-2024/"/>
        <id>https://nicokosi.github.io/fr/devoxx-fr-2024/</id>
        
        <content type="html" xml:base="https://nicokosi.github.io/fr/devoxx-fr-2024/">&lt;h1 id=&quot;mon-devoxx-france-2024&quot;&gt;Mon Devoxx France 2024&lt;&#x2F;h1&gt;
&lt;p&gt;Cet article est un bilan des trois jours que j‚Äôai eu la chance de passer √† la conf√©rence &lt;a href=&quot;https:&#x2F;&#x2F;www.devoxx.fr&#x2F;&quot;&gt;Devoxx France 2024&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;genial-sparkling-heart&quot;&gt;G√©nial ! üíñ&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;La pr√©sentation &lt;a href=&quot;https:&#x2F;&#x2F;www.devoxx.fr&#x2F;schedule&#x2F;talk&#x2F;?id=44931&quot;&gt;&quot;√âquilibrez le Stress, Maximisez la Collaboration : communiquez sans heurts √† l‚Äôaide de la Process Communication (deep-dive intro)&quot;&lt;&#x2F;a&gt; de Thomas Pierrain : je connaissais un peu le mod√®le de communication &quot;Process Communication&quot; mais cette excellente introduction d√©taill√©e a √©t√© l&#x27;occasion de revoir √ßa avec des exemples tir√©s du v√©cu de Thomas.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;sympa-slight-smile&quot;&gt;Sympa ! üôÇ&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Des keynotes inspirantes sur des sujets d&#x27;actualit√© : IA et m√©decine, la cybers√©curit√© et l&#x27;environnement.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;L&#x27;atelier &lt;a href=&quot;https:&#x2F;&#x2F;www.devoxx.fr&#x2F;en&#x2F;schedule&#x2F;talk&#x2F;?id=18358&quot;&gt;&quot;Les d√©veloppeurs attaqu√©s ! Du conflit √† la conversation avec l&#x27;A√Økido Verbal&quot;&lt;&#x2F;a&gt; par Mirna Mahfoud et Philippe Bourgau : l&#x27;occasion de pratiquer ces exercices de r√©solution de conflits fa√ßon &quot;kata dans un dojo&quot;. A essayer, r√©guli√®rement ?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.devoxx.fr&#x2F;en&#x2F;schedule&#x2F;talk&#x2F;?id=3675&quot;&gt;L&#x27;Architecture Hexagonale par la pratique, le live coding qui rendra vos applications plus p√©rennes&lt;&#x2F;a&gt; de Julien Topcu pour passer un bon moment de live coding sur l&#x27;√©criture en architecture hexagonale. Bien men√© et th√®me sympathique (Guerre des Etoiles).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;snif-sob&quot;&gt;Snif ! üò≠&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Croiser trop vite des anciens coll√®gues &#x2F; des connaissances (les temps de pause restent cours)...&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Beaucoup de pr√©sentations d&#x27;introduction trop creuses √† mon go√ªt...&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;photos-camera-flash&quot;&gt;Photos ! üì∏&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;devoxx-fr-2024&#x2F;devoxx-2024-vidal.jpg&quot; alt=&quot;une petite partie de l&amp;#39;√©quipe Vidal&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;devoxx-fr-2024&#x2F;devoxx-2024-arnaud.jpg&quot; alt=&quot;avec Arnaud, Arolla FTW!&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;devoxx-fr-2024&#x2F;devoxx-2024-sebastian.jpg&quot; alt=&quot;avec Sebastian, un ancien coll√®gue de Vidal&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;devoxx-fr-2024&#x2F;devoxx-2024-processcom.jpg&quot; alt=&quot;sketchnotes sur la Process Communication&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;[mise √† jour, 2024-12-30 : les liens vers les CFP, √©tant cass√©s, ont √©t√© remplac√© par les liens des vid√©os youtube]&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="fr">
        <title>Mon Devoxx France 2022</title>
        <published>2022-04-23T00:00:00+00:00</published>
        <updated>2022-04-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://nicokosi.github.io/fr/devoxx-fr-2022/"/>
        <id>https://nicokosi.github.io/fr/devoxx-fr-2022/</id>
        
        <content type="html" xml:base="https://nicokosi.github.io/fr/devoxx-fr-2022/">&lt;h1 id=&quot;mon-devoxx-france-2022&quot;&gt;Mon Devoxx France 2022&lt;&#x2F;h1&gt;
&lt;p&gt;Cet article est un bilan des deux jours que j‚Äôai eu la chance de passer √† &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLTbQvx84FrARTeUA5pExVR5vjCOqWIplI&quot;&gt;Devoxx France 2022&lt;&#x2F;a&gt; (j&#x27;y suis all√© le mercredi et le jeudi).&lt;&#x2F;p&gt;
&lt;p&gt;Plut√¥t que de lister toutes les pr√©sentations auxquelles j‚Äôai assist√© (en mode ‚Äújournal‚Äù), j‚Äôai pr√©f√©r√© me focaliser sur celles que j‚Äôai aim√©es, en distinguant celles qui me seront a priori plus utiles de celles qui le seront probablement moins.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;les-presentations-que-j-ai-aimees-a-appliquer-tout-de-suite&quot;&gt;Les pr√©sentations que j‚Äôai aim√©es, ‚Äú√† appliquer tout de suite‚Äù&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Revoir les √©volutions r√©centes de &lt;strong&gt;Maven&lt;&#x2F;strong&gt; (&lt;em&gt;wrapper&lt;&#x2F;em&gt;, &lt;em&gt;daemon&lt;&#x2F;em&gt;, &lt;em&gt;improved&lt;&#x2F;em&gt; &lt;em&gt;reactor&lt;&#x2F;em&gt;, &lt;em&gt;build&#x2F;producer POM&lt;&#x2F;em&gt;) dans la pr√©sentation &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=lT6FFbTfvXo&quot;&gt;What&#x27;s cooking in Maven?&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;D√©couvrir des techniques pour √©crire des tests unitaires plus expressifs avec &lt;strong&gt;JUnit 5&lt;&#x2F;strong&gt; (tests param√©tr√©s avanc√©s, √©viter la duplication via des extensions, essayer de parall√©liser progressivement via  &lt;code&gt;@Execution(CONCURRENT)&lt;&#x2F;code&gt;) dans la pr√©sentation &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=V6_rIa30YzE&quot;&gt;The unknowns of JUnit 5&lt;&#x2F;a&gt;.
Cf. ce d√©p√¥t GitHub : &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mikemybytes&#x2F;the-unknowns-of-junit5&quot;&gt;github.com&#x2F;mikemybytes&#x2F;the-unknowns-of-junit5&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;D√©couvrir la librairie &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;testing-library&#x2F;dom-testing-library&quot;&gt;DOM Testing Library&lt;&#x2F;a&gt; pour &lt;strong&gt;tester&lt;&#x2F;strong&gt; les composants web via le &lt;strong&gt;DOM&lt;&#x2F;strong&gt; en JavaScript&#x2F;TypeScript dans la pr√©sentation &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=LAb4ChWG5Oc&quot;&gt;Le DOM Testing : Testez vos applications front plus facilement et efficacement !&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;les-presentations-que-j-ai-aimees-a-utiliser-un-jour-peut-etre&quot;&gt;Les pr√©sentations que j‚Äôai aim√©es, √† utiliser un jour, peut-√™tre ?&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;√ätre un peu sensibilis√© √† l‚Äô&lt;strong&gt;√©co-conception&lt;&#x2F;strong&gt; et √† la &lt;strong&gt;‚Äúslow tech‚Äù&lt;&#x2F;strong&gt; dans la keynote &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=1uQPVOK45ow&quot;&gt;Slow.tech : il est urgent de hacker le syst√®me !&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;D√©couvrir la librairie &lt;strong&gt;JOOQ&lt;&#x2F;strong&gt; permettant de requ√™tes aux bases de donn√©es avec un DSL tr√®s proche du SQL dans la pr√©sentation &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=5m_oE0iPJJE&quot;&gt;JOOQ, joy of SQL&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;D√©couvrir les &lt;strong&gt;Fuzzing Tests&lt;&#x2F;strong&gt; en Go dans la pr√©sentation &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Oyjo0krQz5M&quot;&gt;Fuzzing en Go&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Revoir &#x2F; d√©couvrir des techniques d‚Äôanalyse &#x2F; r√©solution de probl√®mes de &lt;strong&gt;performance&lt;&#x2F;strong&gt; avec des &lt;strong&gt;containers&lt;&#x2F;strong&gt; utilisant la JVM, dans la pr√©sentation &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Cepqgkwll_0&quot;&gt;Rem√®des aux oomkill, warm-ups, et lenteurs pour des conteneurs JVM&lt;&#x2F;a&gt; : analyse de la m√©moire via des outils comme jcmd et JVisualVM, analyse de l‚Äôutilisation CPU via &lt;code&gt;Java Flight Recorder&lt;&#x2F;code&gt; et &lt;code&gt;Java Mission Control&lt;&#x2F;code&gt;, utilisation des quotas &lt;code&gt;Kubernetes&lt;&#x2F;code&gt;‚Ä¶&lt;&#x2F;li&gt;
&lt;li&gt;Savoir qu‚Äôon peut faire du &lt;strong&gt;Chaos Engineering&lt;&#x2F;strong&gt; facilement dans &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; via &lt;a href=&quot;https:&#x2F;&#x2F;litmuschaos.io&#x2F;&quot;&gt;LitmusChaos&lt;&#x2F;a&gt; dans &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=7zStrFuzLTs&quot;&gt;Du Chaos Engineering avec Litmus et Jenkins&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Revoir l‚Äôint√©r√™t du &lt;strong&gt;flamegraph&lt;&#x2F;strong&gt; pour optimiser des traitements dans la pr√©sentation &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=_sYeDW06IyM&quot;&gt;Into the flamegraph: From the primitives through advanced concepts&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;et-aussi&quot;&gt;Et aussi‚Ä¶&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Le plaisir de revoir des anciens coll√®gues et des connaissances, voire de discuter avec des inconnus. üòé&lt;&#x2F;li&gt;
&lt;li&gt;C‚Äôest sympa de voir ses coll√®gues dans un contexte diff√©rent. üòé&lt;&#x2F;li&gt;
&lt;li&gt;L‚Äôap√©ro convivial du jeudi soir, toujours aussi sympa : bi√®re, bretzel, fromage, petits canap√©s, vin blanc‚Ä¶ üç∫&lt;&#x2F;li&gt;
&lt;li&gt;Lors des sessions du jeudi soir (‚ÄúBird Of Feather‚Äù), c‚Äô√©tait cool de voir les organisateurs demander l&#x27;avis des orateurs &#x2F; participants et raconter des anecdotes historiques dans &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=kOXJEzD8GKw&quot;&gt;10 ans d√©j√† ! Devoxx France , l&#x27;envers du d√©cors&lt;&#x2F;a&gt; üòé&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;PS : merci √† ma soci√©t√©, Vidal, √† mon chef et √† mon directeur de m‚Äôavoir pay√© ces deux jours de conf√©rence ! ‚ù§Ô∏è&lt;&#x2F;p&gt;
&lt;p&gt;[mise √† jour, 2024-12-30 : les liens vers les CFP, √©tant cass√©s, ont √©t√© remplac√© par les liens des vid√©os youtube]&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="fr">
        <title>Exploration des donn√©es sportives Strava avec Kibana (2√®me partie) : un dashboard am√©lior√©</title>
        <published>2021-11-09T00:00:00+00:00</published>
        <updated>2021-11-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://nicokosi.github.io/fr/explore-strava-activities-with-kibana-2/"/>
        <id>https://nicokosi.github.io/fr/explore-strava-activities-with-kibana-2/</id>
        
        <content type="html" xml:base="https://nicokosi.github.io/fr/explore-strava-activities-with-kibana-2/">&lt;h1 id=&quot;exploration-des-donnees-sportives-strava-avec-kibana-2eme-partie-un-dashboard-ameliore&quot;&gt;Exploration des donn√©es sportives Strava avec Kibana (2√®me partie) : un dashboard am√©lior√©&lt;&#x2F;h1&gt;
&lt;p&gt;Public pr√©sum√© : personnes int√©ress√©es par l‚Äôexploration de donn√©es.&lt;&#x2F;p&gt;
&lt;p&gt;Cet article fait suite √† &lt;a href=&quot;https:&#x2F;&#x2F;nicokosi.github.io&#x2F;fr&#x2F;explore-strava-activities-with-kibana-2&#x2F;.&#x2F;explore-strava-activities-with-kibana.html&quot;&gt;ce premier article&lt;&#x2F;a&gt; pour la mise en place de Kibana et l&#x27;import des donn√©es Strava.&lt;&#x2F;p&gt;
&lt;p&gt;Franck, un coll√®gue qui conna√Æt bien Kibana, m&#x27;a conseill√© d&#x27;essayer un graphique  de type &quot;vertical bar&quot; avec un op√©rateur &quot;count&quot;.
J&#x27;ai notamment voulu essayer ce type de graphique, tout en en testant d&#x27;autres, en cr√©ant un &quot;dashboard&quot; plus complet que celui d√©taill√© dans mon premier article.&lt;&#x2F;p&gt;
&lt;p&gt;J&#x27;ai cr√©√© avec les graphiques suivants :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&quot;histogramme de la vitesse moyenne&quot;, en utilisant un graphique &lt;code&gt;Vertical bar&lt;&#x2F;code&gt; : &lt;em&gt;Y-axis&lt;&#x2F;em&gt; &quot;average(average_speed)&quot;, &lt;em&gt;X-axis&lt;&#x2F;em&gt; &quot;@timestamp&quot; and &lt;em&gt;Split series&lt;&#x2F;em&gt; on &quot;type&quot;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&quot;compteurs d&#x27;activit√©s par type&quot;, en utilisant un graphique de type &lt;code&gt;Metric&lt;&#x2F;code&gt; avec &lt;em&gt;Aggregation&lt;&#x2F;em&gt; &quot;Count&quot; and &lt;em&gt;Split group&lt;&#x2F;em&gt; sur &quot;type&quot;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&quot;histogramme de la distance parcourue&quot;, en utilisant un graphique de type &lt;code&gt;Vertical bar&lt;&#x2F;code&gt; : &lt;em&gt;Y-axis&lt;&#x2F;em&gt; &quot;average(distance)&quot;, &lt;em&gt;X-axis&lt;&#x2F;em&gt; &quot;@timestamp&quot; et &lt;em&gt;split series&lt;&#x2F;em&gt; sur &quot;type&quot;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&quot;tree map du nombre d&#x27;activit√© par type&quot;, en utilisant un graphique de type &lt;code&gt;Treemap&lt;&#x2F;code&gt; chart avec &lt;em&gt;Group by&lt;&#x2F;em&gt; &quot;type.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&quot;compteurs d&#x27;activit√©s par jour&quot; en utilisant un graphique de type &lt;code&gt;Bar vertical&lt;&#x2F;code&gt; avec &lt;em&gt;horizontal axis&lt;&#x2F;em&gt; sur &quot;start_date&quot;, &lt;em&gt;vertical axis&lt;&#x2F;em&gt; sur &quot;Count of records&quot; et &lt;em&gt;break down by&lt;&#x2F;em&gt; &quot;top values of type&quot;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Et voila le dashboard final : üéâ&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;nicokosi.github.io&#x2F;fr&#x2F;explore-strava-activities-with-kibana-2&#x2F;explore-strava-activities-with-kibana-2-view-dashboard.png&quot; alt=&quot;dashboard final&quot; title=&quot;final dashboard&quot; &#x2F;&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Le m√™me dashboard apr√®s avoir cliqu√© sur le type d&#x27;activit√© &quot;Run&quot; (course √† pied) :&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;nicokosi.github.io&#x2F;fr&#x2F;explore-strava-activities-with-kibana-2&#x2F;explore-strava-activities-with-kibana-2-view-dashboard-run.png&quot; alt=&quot;dashboard &amp;quot;Run&amp;quot;&quot; title=&quot;dashboard &amp;#39;Run&amp;#39;&quot; &#x2F;&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Le dashboard et ses graphiques peuvent √™tre import√©s via le bouton en haut √† gauche (avec trois traits horizontaux) &#x2F; &quot;Management&quot; &#x2F; &quot;Stack Management&quot; &#x2F; &quot;Saved Objects&quot; &#x2F; &quot;Import&quot; avec ce &lt;a href=&quot;https:&#x2F;&#x2F;nicokosi.github.io&#x2F;fr&#x2F;explore-strava-activities-with-kibana-2&#x2F;%7Bstatic%7D&#x2F;misc&#x2F;strava-dashboard.ndjson&quot;&gt;fichier d&#x27;import du dashboard&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="fr">
        <title>Exploration des donn√©es sportives Strava avec Kibana</title>
        <published>2021-11-03T00:00:00+00:00</published>
        <updated>2021-11-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://nicokosi.github.io/fr/explore-strava-activities-with-kibana/"/>
        <id>https://nicokosi.github.io/fr/explore-strava-activities-with-kibana/</id>
        
        <content type="html" xml:base="https://nicokosi.github.io/fr/explore-strava-activities-with-kibana/">&lt;h1 id=&quot;exploration-des-donnees-sportives-strava-avec-kibana&quot;&gt;Exploration des donn√©es sportives Strava avec Kibana&lt;&#x2F;h1&gt;
&lt;p&gt;Public pr√©sum√© : personnes int√©ress√©es par l‚Äôexploration de donn√©es.&lt;&#x2F;p&gt;
&lt;p&gt;Cela fait quelques ann√©es que j&#x27;enregistre mes sorties sportives (essentiellement pour la course √† pied et la marche) sur &lt;a href=&quot;https:&#x2F;&#x2F;strava.com&#x2F;&quot;&gt;strava.com&lt;&#x2F;a&gt;.
Comme les donn√©es sont accessibles par une API, j&#x27;ai voulu les explorer en utilisant un outil de visualisation de donn√©es, &lt;a href=&quot;https:&#x2F;&#x2F;www.elastic.co&#x2F;kibana&#x2F;&quot;&gt;Kibana&lt;&#x2F;a&gt;.
Cet article d√©crit mon premier essai &quot;d&#x27;exploration&quot;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mise-en-place&quot;&gt;Mise en place&lt;&#x2F;h2&gt;
&lt;p&gt;Noter que le code ci-dessous utilise le shell Unix &lt;code&gt;zsh&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;recuperation-des-activites-strava&quot;&gt;R√©cup√©ration des activit√©s Strava&lt;&#x2F;h3&gt;
&lt;p&gt;Il faut d&#x27;abord cr√©er &lt;a href=&quot;https:&#x2F;&#x2F;developers.strava.com&#x2F;docs&#x2F;getting-started&#x2F;#account&quot;&gt;un compte d√©veloppeur Strava&lt;&#x2F;a&gt; puis cr√©er un jeton OAuth2 (j&#x27;ai utilis√© &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mgryszko&#x2F;strava-access-token&quot;&gt;le g√©n√©rateur mgryszko&#x2F;strava-access-token&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Ensuite, on peut utiliser &lt;a href=&quot;https:&#x2F;&#x2F;developers.strava.com&#x2F;docs&#x2F;reference&#x2F;#api-Activities-getLoggedInAthleteActivities&quot;&gt;l&#x27;API Strava API pour r√©cup√©rer les activit√©s&lt;&#x2F;a&gt; pour g√©n√©rer plusieurs fichiers JSON :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zsh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-zsh &quot;&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; page &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;{1..10}; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt; GET &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.strava.com&#x2F;api&#x2F;v3&#x2F;athlete&#x2F;activities?include_all_efforts=&amp;amp;per_page=200&amp;amp;page=&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;page&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Authorization: Bearer &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TOKEN&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt; strava-activities-${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;page&lt;&#x2F;span&gt;&lt;span&gt;}.json
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ayant un historique d&#x27;environ 300 sorties, seuls 3 fichiers ont du contenu (les autres contient un tableau vide : &lt;code&gt;[]&lt;&#x2F;code&gt;), comme on peut le voir avec la commande &lt;code&gt;wc&lt;&#x2F;code&gt; :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zsh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-zsh &quot;&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wc -c&lt;&#x2F;span&gt;&lt;span&gt; strava-activities-*.json
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;421462&lt;&#x2F;span&gt;&lt;span&gt; strava-activities-1.json
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; strava-activities-10.json
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;288391&lt;&#x2F;span&gt;&lt;span&gt; strava-activities-2.json
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;57159&lt;&#x2F;span&gt;&lt;span&gt; strava-activities-3.json
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; strava-activities-4.json
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; strava-activities-5.json
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; strava-activities-6.json
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; strava-activities-7.json
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; strava-activities-8.json
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; strava-activities-9.json
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;767026&lt;&#x2F;span&gt;&lt;span&gt; total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pour finir, agr√©geons ces fichiers dans un fichier unique au format &quot;Newline Delimited JSON&quot; (extension &lt;code&gt;ndjson&lt;&#x2F;code&gt;) :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zsh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-zsh &quot;&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;{1..3}; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt; strava-activities-${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;}.json | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jq -c &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.[]&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;gt; strava-activities-${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;}.ndjson
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt; strava-activities-1.ndjson strava-activities-2.ndjson strava-activities-3.ndjson &amp;gt;&amp;gt; strava-activities.ndjson
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;import-des-donnees&quot;&gt;Import des donn√©es&lt;&#x2F;h3&gt;
&lt;p&gt;Nous allons utiliser les &lt;a href=&quot;https:&#x2F;&#x2F;www.elastic.co&#x2F;guide&#x2F;en&#x2F;kibana&#x2F;current&#x2F;docker.html&quot;&gt;images officielles Docker&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;D√©marrons les services Elastic et Kibana :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; network create elastic
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --name&lt;&#x2F;span&gt;&lt;span&gt; es-dataviz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --net&lt;&#x2F;span&gt;&lt;span&gt; elastic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --publish&lt;&#x2F;span&gt;&lt;span&gt; 9200:9200&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --publish&lt;&#x2F;span&gt;&lt;span&gt; 9300:9300&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --env &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;discovery.type=single-node&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --env &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;xpack.security.enabled=false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; docker.elastic.co&#x2F;elasticsearch&#x2F;elasticsearch:7.15.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --name&lt;&#x2F;span&gt;&lt;span&gt; kb-dataviz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --net&lt;&#x2F;span&gt;&lt;span&gt; elastic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --publish&lt;&#x2F;span&gt;&lt;span&gt; 5601:5601&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --env &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ELASTICSEARCH_HOSTS=http:&#x2F;&#x2F;es-dataviz:9200&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --env &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;xpack.security.enabled=false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; docker.elastic.co&#x2F;kibana&#x2F;kibana:7.15.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Puis importons les donn√©es (&quot;upload&quot;) en s√©lectionnant le fichier &lt;code&gt;ndjson&lt;&#x2F;code&gt; [http:&#x2F;&#x2F;localhost:5601&#x2F;app&#x2F;home#&#x2F;tutorial_directory] que nous importons dans un index nomm√© &quot;strava&quot; :&lt;&#x2F;p&gt;
&lt;p&gt;Ouvrons ensuite la vue &quot;discover&quot; pour les 6 derni√®res ann√©es :&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;nicokosi.github.io&#x2F;fr&#x2F;explore-strava-activities-with-kibana&#x2F;explore-strava-discover.png&quot; alt=&quot;Discover Kibana&quot; title=&quot;Discover Kibana&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exploration-des-donnees&quot;&gt;Exploration des donn√©es&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;vitesse-moyenne-par-sortie&quot;&gt;Vitesse moyenne par sortie&lt;&#x2F;h3&gt;
&lt;p&gt;Cr√©ons un &lt;em&gt;dashboard&lt;&#x2F;em&gt; pour visualiser l&#x27;√©volution dans le temps de la vitesse moyenne par type d&#x27;activit√© (course, marche etc.) :&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;nicokosi.github.io&#x2F;fr&#x2F;explore-strava-activities-with-kibana&#x2F;explore-strava-create-dashboard.png&quot; alt=&quot;Create Kibana dashboard&quot; title=&quot;Create Kibana dashboard&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ca ressemble √† √ßa :&lt;&#x2F;p&gt;
&lt;p&gt;![Create Kibana dashboard&quot;](explore-strava-dashboard.png &quot;Create Kibana dashboard&quot;&quot;)&lt;&#x2F;p&gt;
&lt;p&gt;Quelques remarques &#x2F; interpr√©tations :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;je ne pensais pas courir depuis si longtemps (5 ans) üòØ&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;mes performances baissent dans le temps, c&#x27;est normal, je vieillis ! üßì&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Et sinon, j&#x27;ai trouv√© √ßa sympa de faire mon propre dashboard √©ph√©m√®re sans payer l&#x27;abonnement Strava. üòá&lt;&#x2F;p&gt;
&lt;p&gt;C&#x27;est tout pour cette fois. J‚Äôessaierai d&#x27;aller plus loin dans un autre article. ü§ì&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="fr">
        <title>Mes contributions √† TLDR (anti-s√®che collaborative pour les outils en ligne de commande)</title>
        <published>2021-09-14T00:00:00+00:00</published>
        <updated>2021-09-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://nicokosi.github.io/fr/contributing-to-tldr/"/>
        <id>https://nicokosi.github.io/fr/contributing-to-tldr/</id>
        
        <content type="html" xml:base="https://nicokosi.github.io/fr/contributing-to-tldr/">&lt;h1 id=&quot;mes-contributions-a-tldr-anti-seche-collaborative-pour-les-outils-en-ligne-de-commande&quot;&gt;Mes contributions √† TLDR (anti-s√®che collaborative pour les outils en ligne de commande)&lt;&#x2F;h1&gt;
&lt;p&gt;Public pr√©sum√© : d√©veloppeurs.euses int√©ress√©.es par les outils en ligne de commande et √† la collaboration open-source.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;mes-debuts-de-contribution-au-projet-open-source-tldr&quot;&gt;Mes d√©buts de contribution au projet open-source &lt;code&gt;tldr&lt;&#x2F;code&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Cela fait quelques mois que je contribue √©pisodiquement au projet &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tldr-pages&#x2F;tldr&quot;&gt;&lt;code&gt;tldr&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (ou &lt;code&gt;tldr-pages&lt;&#x2F;code&gt;), une sorte d&#x27;anti-s√®che collaborative pour commandes shell (cf. mes &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tldr-pages&#x2F;tldr&#x2F;pulls?q=is%3Apr+author%3Anicokosi&quot;&gt;contributions r√©centes&lt;&#x2F;a&gt;).
Cet article est un bilan des points positifs et n√©gatifs de ces contributions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;les-bons-cotes-1&quot;&gt;Les bons c√¥t√©s üëç&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;partager-ma-connaissance-locale-gift&quot;&gt;Partager ma &quot;connaissance locale&quot; üéÅ&lt;&#x2F;h3&gt;
&lt;p&gt;Certaines commandes qui faisaient partie de mon historique shell ou qui √©taient dans ma t√™te sont maintenant partag√©es √† tous les utilisateurs de &lt;code&gt;tldr&lt;&#x2F;code&gt;... et aussi √† moi m√™me !&lt;&#x2F;p&gt;
&lt;p&gt;Je peux d√©sormais les retrouver plus facilement en tapant &lt;code&gt;tldr &amp;lt;nom_de_la_commande&amp;gt;&lt;&#x2F;code&gt;, par exemple &lt;code&gt;tldr espanso&lt;&#x2F;code&gt; depuis &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tldr-pages&#x2F;tldr&#x2F;pull&#x2F;5662&quot;&gt;ma contribution #5662&lt;&#x2F;a&gt; :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; tldr espanso
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;espanso
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cross-platform&lt;&#x2F;span&gt;&lt;span&gt; Text Expander written in Rust.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;More&lt;&#x2F;span&gt;&lt;span&gt; information: &amp;lt;https:&#x2F;&#x2F;espanso.org&amp;gt;.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; Check status:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;espanso&lt;&#x2F;span&gt;&lt;span&gt; status
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; Edit the configuration:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;espanso&lt;&#x2F;span&gt;&lt;span&gt; edit config
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; Install a package from the hub store (&amp;lt;https:&#x2F;&#x2F;hub.espanso.org&#x2F;&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;espanso&lt;&#x2F;span&gt;&lt;span&gt; install package_name
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; Restart (required after installing a package, useful in case of failure)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;espanso&lt;&#x2F;span&gt;&lt;span&gt; restart
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;C&#x27;est plus rapide que de chercher dans mon historique shell :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; history | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span&gt; espanso
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;4998&lt;&#x2F;span&gt;&lt;span&gt;  brew tap federico-terzi&#x2F;espanso
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;4999&lt;&#x2F;span&gt;&lt;span&gt;  brew install espanso
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5000&lt;&#x2F;span&gt;&lt;span&gt;  espanso register
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5001&lt;&#x2F;span&gt;&lt;span&gt;  mkdir espanso
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5002&lt;&#x2F;span&gt;&lt;span&gt;  cd espanso
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5013&lt;&#x2F;span&gt;&lt;span&gt;  espanso stop
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5014&lt;&#x2F;span&gt;&lt;span&gt;  espanso start
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5015&lt;&#x2F;span&gt;&lt;span&gt;  espanso path
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;une-communaute-accueillante-hugs&quot;&gt;Une communaut√© accueillante ü§ó&lt;&#x2F;h3&gt;
&lt;p&gt;J&#x27;ai √©t√© tr√®s bien accueilli par les contributeurs qui encouragent sans mettre de pression. Mon ressenti est surtout li√© aux commentaires sur les &lt;em&gt;pull requests&lt;&#x2F;em&gt; &#x2F; &lt;em&gt;issues&lt;&#x2F;em&gt;, par exemple ce genre de &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tldr-pages&#x2F;tldr&#x2F;pull&#x2F;5662#issuecomment-812137443&quot;&gt;commentaire&lt;&#x2F;a&gt; est toujours agr√©able :&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Welcome to tldr-pages, @nicokosi! ‚ö° üéâ&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Par contre, je n&#x27;ai quasimment pas utilis√© &lt;a href=&quot;https:&#x2F;&#x2F;gitter.im&#x2F;tldr-pages&#x2F;tldr&quot;&gt;le forum de discussions Gitter&lt;&#x2F;a&gt;. Je pense que je ne suis pas assez actif (je contribue quelques minutes &#x2F; heures par semaine) pour pouvoir suivre le flux des √©changes !&lt;&#x2F;p&gt;
&lt;h3 id=&quot;apprendre-de-nouvelles-commandes-man-mortar-board&quot;&gt;Apprendre de nouvelles commandes üë®‚Äçüéì&lt;&#x2F;h3&gt;
&lt;p&gt;En faisant la revue des contributions (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tldr-pages&#x2F;tldr&#x2F;pulls&quot;&gt;&lt;em&gt;pull requests&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;), j&#x27;ai parfois d√©couvert des nouvelles commandes ou d√©couvert de nouvelles options.&lt;&#x2F;p&gt;
&lt;p&gt;Par exemple, j&#x27;ai d√©couvert qu&#x27;il √©tait possible de formater en JSON le retour de la commande GitHub CLI &lt;code&gt;gh&lt;&#x2F;code&gt; via &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tldr-pages&#x2F;tldr&#x2F;pull&#x2F;6290&#x2F;files?short_path=193df31#diff-193df31fff2a4e88a95b3bd8732bead1fbbe8343eb8617ed1b727e4d1ba4d751&quot;&gt;cette &lt;em&gt;pull request&lt;&#x2F;em&gt; &lt;code&gt;gh-formatting: add page #6290&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; :&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Formatting options for JSON data exported from gh GitHub CLI command. More information: https:&#x2F;&#x2F;cli.github.com&#x2F;manual&#x2F;gh_help_formatting.
Display help about formatting JSON output from gh using jq:
gh formatting&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;apprendre-le-compromis-scales&quot;&gt;Apprendre le compromis ‚öñÔ∏è&lt;&#x2F;h3&gt;
&lt;p&gt;J&#x27;ai appris √† accepter les retours des autres et √† parfois accepter un avis majoritaire qui n&#x27;est pas le mien.&lt;&#x2F;p&gt;
&lt;p&gt;Exemple : utiliser le terme &lt;code&gt;slug&lt;&#x2F;code&gt;dans un contexte d&#x27;authentification pour &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tldr-pages&#x2F;tldr&#x2F;pull&#x2F;6108#discussion_r648835227&quot;&gt;cette contribution&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;les-mauvais-cotes-1&quot;&gt;Les &quot;mauvais&quot; c√¥t√©s üëé&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;ca-prend-du-temps-hourglass-flowing-sand&quot;&gt;Ca prend du temps ! ‚è≥&lt;&#x2F;h3&gt;
&lt;p&gt;Quand on fait des suggestions aux autres sur une &lt;em&gt;pull request&lt;&#x2F;em&gt; ou qu&#x27;on r√©pond √† celles des autres, tout se fait par √©crit, en anglais, or je ne suis pas bilingue et les autres personnes ne le se sont pas forcement non plus... et si on ajoute le fait que les contributeurs font √ßa sur leur temps libre... tout prend du temps.&lt;&#x2F;p&gt;
&lt;p&gt;Exemple d&#x27;incompr√©hension (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tldr-pages&#x2F;tldr&#x2F;pull&#x2F;6269#issuecomment-888351398&quot;&gt;lien&lt;&#x2F;a&gt;) :&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes, it does seem that only common is shown, anyway that can be fixed since a user might think we have a lack of pages if we only show them.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sorry, I don&#x27;t understand after &quot;anyway&quot;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Exemple de lenteur : il a fallu un moins pour int√©grer &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tldr-pages&#x2F;tldr.jsx-fork&#x2F;pull&#x2F;3&quot;&gt;cette contribution, &lt;code&gt;Prevent search misses via input&#x27;s placeholder&#x2F;tooltip&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pas-de-retours-des-utilisateurs-adult-probing-cane&quot;&gt;Pas de retours des utilisateurs üßë‚Äçü¶Ø&lt;&#x2F;h3&gt;
&lt;p&gt;Seules les personnes qui contribuent font des retours via les &lt;em&gt;pull requests&lt;&#x2F;em&gt; ou les &lt;em&gt;issues&lt;&#x2F;em&gt; GitHub.
Il n&#x27;y a pas de m√©triques du type &quot;nombre de vues&quot;, &quot;note&quot; etc. donc on ne conna√Æt donc pas vraiment l&#x27;usage des exemples (ce qui est une bonne chose pour la confidentialit√©).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;la-suite-soon&quot;&gt;La suite ? üîú&lt;&#x2F;h2&gt;
&lt;p&gt;Contribuer sur du code plut√¥t que de la documentation ? üßë‚Äçüíª
Sur ce projet ou sur un autre ? A suivre ! üîÆ&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="fr">
        <title>Re-d√©couvrons le langage Go avec &quot;pullpigo&quot;, un petit projet d&#x27;exp√©rimentation</title>
        <published>2019-12-24T00:00:00+00:00</published>
        <updated>2019-12-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://nicokosi.github.io/fr/rediscovering-golang-with-pullpigo/"/>
        <id>https://nicokosi.github.io/fr/rediscovering-golang-with-pullpigo/</id>
        
        <content type="html" xml:base="https://nicokosi.github.io/fr/rediscovering-golang-with-pullpigo/">&lt;h1 id=&quot;re-decouvrons-le-langage-go-avec-pullpigo-un-petit-projet-d-experimentation&quot;&gt;Re-d√©couvrons le langage Go avec &quot;pullpigo&quot;, un petit projet d&#x27;exp√©rimentation&lt;&#x2F;h1&gt;
&lt;p&gt;D√©veloppant au quotidien en Java, j&#x27;avais envie d&#x27;apprendre quelques rudiments du langage de programmation &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;&quot;&gt;Go&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;.
Pour ce faire, j&#x27;ai impl√©ment√© un petit outil en &lt;strong&gt;ligne de commande (&lt;em&gt;CLI&lt;&#x2F;em&gt;)&lt;&#x2F;strong&gt; afin d&#x27;afficher des informations sur les pull requests GitHub.
J&#x27;ai cr√©√© ainsi un petit projet, versionn√© dans GitHub, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nicokosi&#x2F;pullpigo&quot;&gt;pullpigo&lt;&#x2F;a&gt;. Son but
est d&#x27;afficher le nombre d&#x27;√©v√©nements du type &quot;tant d&#x27;√©v√©nements cr√©√©s par tel auteur GitHub (&lt;em&gt;commiter&lt;&#x2F;em&gt;)&quot; en utilisant une API publique de GitHub.&lt;&#x2F;p&gt;
&lt;p&gt;Notez que j&#x27;ai d√©j√† impl√©ment√© un outil similaire dans d&#x27;autres langages (que je voulais aussi d√©couvrir ou approfondir) : en &lt;strong&gt;Clojure&lt;&#x2F;strong&gt; (cf. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nicokosi&#x2F;hubstats&quot;&gt;hubstats&lt;&#x2F;a&gt;), &lt;strong&gt;Kotlin&lt;&#x2F;strong&gt; (cf. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nicokosi&#x2F;pullpitoK&quot;&gt;pullpitoK&lt;&#x2F;a&gt;) et &lt;strong&gt;Rust&lt;&#x2F;strong&gt; (cf. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nicokosi&#x2F;pullpito&quot;&gt;pullpito&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;les-executables-natifs-sont-rapides-rocket&quot;&gt;Les ex√©cutables natifs sont rapides üöÄ&lt;&#x2F;h2&gt;
&lt;p&gt;Compilons pullpigo :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;go clean
&lt;&#x2F;span&gt;&lt;span&gt;time go build
&lt;&#x2F;span&gt;&lt;span&gt;go build  1.05s user 0.58s system 105% cpu 1.559 total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Puis lan√ßons le :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;pullpigo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -repo&lt;&#x2F;span&gt;&lt;span&gt;=vidal-community&#x2F;atom-jaxb
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GitHub&lt;&#x2F;span&gt;&lt;span&gt; repository &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vidal-community&#x2F;atom-jaxb&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; events created by amairi
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; events created by fchetouani
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt; events created by AElMehdiVidal
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; events created by jcgay
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;pullpigo -repo&lt;&#x2F;span&gt;&lt;span&gt;=vidal-community&#x2F;atom-jaxb  0.07s user 0.03s system 20% cpu 0.482 total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Comparons ces temps avec ceux d&#x27;un projet similaire impl√©ment√© en Kotlin, (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nicokosi&#x2F;pullpitoK&#x2F;&quot;&gt;pullpitoK&lt;&#x2F;a&gt;) :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;gradlew&lt;&#x2F;span&gt;&lt;span&gt; clean
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;gradlew build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --quiet
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;gradlew&lt;&#x2F;span&gt;&lt;span&gt; build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --quiet&lt;&#x2F;span&gt;&lt;span&gt;  1.37s user 0.17s system 39% cpu 3.932 total
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;gradlew run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --quiet --args &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vidal-community&#x2F;atom-jaxb&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pull&lt;&#x2F;span&gt;&lt;span&gt; requests for &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vidal-community&#x2F;atom-jaxb&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opened&lt;&#x2F;span&gt;&lt;span&gt; per author
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;amairi:&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;commented&lt;&#x2F;span&gt;&lt;span&gt; per author
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AElMehdiVidal:&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jcgay:&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;closed&lt;&#x2F;span&gt;&lt;span&gt; per author
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;gradlew&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --quiet --args &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vidal-community&#x2F;atom-jaxb&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;  1.37s user 0.18s system 62% cpu 2.473 total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Compilation rapide + ex√©cution rapide = ‚ù§Ô∏è&lt;&#x2F;p&gt;
&lt;h2 id=&quot;les-librairies-et-l-outillage-standards-de-go-sont-complets-package&quot;&gt;Les librairies et l&#x27;outillage standards de Go sont complets üì¶&lt;&#x2F;h2&gt;
&lt;p&gt;Pour appeler l&#x27;&lt;a href=&quot;https:&#x2F;&#x2F;developer.github.com&#x2F;v3&#x2F;activity&#x2F;events&#x2F;&quot;&gt;API REST v3 &#x27;events&#x27; de GitHub&lt;&#x2F;a&gt;, j&#x27;avais besoin de : un client HTTP, un &lt;em&gt;parser&lt;&#x2F;em&gt; JSON ainsi qu&#x27;un &lt;em&gt;framework&lt;&#x2F;em&gt; de test. C&#x27;est cool, tout est pr√©sent dans les librairies de base : &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;pkg&#x2F;testing&#x2F;&quot;&gt;testing&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;pkg&#x2F;net&#x2F;http&#x2F;&quot;&gt;HTTP client&lt;&#x2F;a&gt; et &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;pkg&#x2F;encoding&#x2F;json&#x2F;&quot;&gt;JSON parsing&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;J&#x27;ai donc pu impl√©menter mon outil sans utiliser une seule librairie tierce !&lt;&#x2F;p&gt;
&lt;p&gt;J&#x27;ai √©galement appr√©ci√© l&#x27;outillage (notez mon &lt;em&gt;background&lt;&#x2F;em&gt; Java) :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;pour &lt;strong&gt;formatter le code&lt;&#x2F;strong&gt;, il sufffit de lancer la commande &lt;code&gt;go fmt&lt;&#x2F;code&gt;, sans aucune configuration.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;pour analyser statiquement son code, un &lt;strong&gt;code linter&lt;&#x2F;strong&gt; est √©galement inclus. &lt;del&gt;Il suffit d&#x27;installer &lt;code&gt;golang&#x2F;linttype&lt;&#x2F;code&gt; et de lancer la commande &lt;code&gt;golint&lt;&#x2F;code&gt;, sans configuration (pour √™tre franc, ce &lt;em&gt;linter&lt;&#x2F;em&gt; ne m&#x27;a pas aid√© pour coder pullpigo mais je trouve √ßa g√©nial que cet outil existe).&lt;&#x2F;del&gt;
[mise √† jour, 2024-12-30 : &lt;code&gt;golang&#x2F;linttype&lt;&#x2F;code&gt; n&#x27;existe plus, voir la commande &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;cmd&#x2F;vet&quot;&gt;go vet&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;opportunites-annexes-sunglasses&quot;&gt;Opportunit√©s &quot;annexes&quot; üòé&lt;&#x2F;h2&gt;
&lt;p&gt;En dehors du langage et des libraries, ce petit projet a aussi √©t√© l&#x27;occasion d&#x27;&lt;strong&gt;essayer et d&#x27;apprendre de nouveaux outils&lt;&#x2F;strong&gt;. En l‚Äôoccurrence :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;&quot;&gt;Visual Studio Code&lt;&#x2F;a&gt;, un environnement de d√©veloppement (&lt;em&gt;Integrated Development Environment&lt;&#x2F;em&gt;) que je n&#x27;utilise pas professionnellement.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;features&#x2F;actions&quot;&gt;GitHub Actions&lt;&#x2F;a&gt;, une plate-forme pour l&#x27;int√©gration continue : chaque commit git GitHub d√©clenche la compilation et les tests unitaires. Bien que je n&#x27;avais jamaais utilis√© GitHub Actions, √ßa a √©t√© rapide √† mettre en place (quelques minutes). En en plus, c&#x27;est gratuit !&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Un autre point bonus, j&#x27;ai appr√©ci√© de &lt;strong&gt;discuter et d&#x27;√©changer&lt;&#x2F;strong&gt; avec des gens que je connais (et pas uniquement de &quot;googler&quot;).&lt;&#x2F;p&gt;
&lt;p&gt;Dans mon cas, mes &quot;amis Golang&quot; ont √©t√© :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jcgay&#x2F;&quot;&gt;Jean-Christophe&lt;&#x2F;a&gt; qui m&#x27;a motiv√© et m&#x27;a aid√© √† corriger un probl√®me de &lt;em&gt;parsing&lt;&#x2F;em&gt; JSON. üòÖ&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fbiville&quot;&gt;Florent&lt;&#x2F;a&gt; qui m&#x27;a donn√© des pointeurs sympas vers des librairies : &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;pkg&#x2F;testing&#x2F;quick&#x2F;&quot;&gt;testing&#x2F;quick&lt;&#x2F;a&gt; pour le &lt;em&gt;property-based testing&lt;&#x2F;em&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;onsi&#x2F;ginkgo&quot;&gt;ginkgo&lt;&#x2F;a&gt; pour les test style &lt;em&gt;BDD&lt;&#x2F;em&gt; et &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;onsi&#x2F;gomega&quot;&gt;gomega&lt;&#x2F;a&gt; pour les assertions de test. A essayer ! üòé&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;la-suite-crystal-ball&quot;&gt;La suite ? üîÆ&lt;&#x2F;h3&gt;
&lt;p&gt;Quelques pistes :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Am√©liorer les messages en sortie. Par exemple, afficher les compteurs par type d&#x27;√©v√©nements (&quot;pull requests cr√©√©s&quot;, &quot;pull requests fusionn√©es&quot; etc.)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;R√©cup√©rer les donn√©es de l&#x27;API &lt;code&gt;GraphQL&lt;&#x2F;code&gt; de GitHub (&lt;a href=&quot;https:&#x2F;&#x2F;developer.github.com&#x2F;v4&#x2F;&quot;&gt;GitHub&#x27;s GraphQL API v4&lt;&#x2F;a&gt;) de fa√ßon √† ne pas √™tre limit√© aux 300 derniers √©v√©nements (c&#x27;est une limitation de l&#x27;API GitHub REST).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Utiliser des d√©pendances pour les tests (assertions plus faciles, property-based testing etc.) et en profiter pour d√©couvrir la gestion des d√©pendances en Go.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;A suivre !&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="fr">
        <title>Du code Java&#x2F;Kotlin&#x2F;Clojure &quot;natif&quot; gr√¢ce √† GraalVM</title>
        <published>2019-08-13T00:00:00+00:00</published>
        <updated>2019-08-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://nicokosi.github.io/fr/java-clojure-and-kotlin-go-native-with-graalvm/"/>
        <id>https://nicokosi.github.io/fr/java-clojure-and-kotlin-go-native-with-graalvm/</id>
        
        <content type="html" xml:base="https://nicokosi.github.io/fr/java-clojure-and-kotlin-go-native-with-graalvm/">&lt;h1 id=&quot;du-code-java-kotlin-clojure-natif-grace-a-graalvm&quot;&gt;Du code Java&#x2F;Kotlin&#x2F;Clojure &quot;natif&quot; gr√¢ce √† GraalVM&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;v4.chriskrycho.com&#x2F;2018&#x2F;assumed-audiences.html&quot;&gt;Audience pr√©sum√©e&lt;&#x2F;a&gt; : d√©veloppeurs.euses int√©ress√©s.√©es par l&#x27;√©cosyst√®me Java et plus particuli√®rement sur l&#x27;am√©lioration des performances et la g√©n√©ration d&#x27;ex√©cutables.&lt;&#x2F;p&gt;
&lt;p&gt;Plan :&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Introduction&lt;&#x2F;li&gt;
&lt;li&gt;Outils utilis√©s&lt;&#x2F;li&gt;
&lt;li&gt;Ex√©cutable optimis√© pour une application &quot;WordCount&quot; &lt;code&gt;Java&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Ex√©cutable optimis√© pour une application &lt;code&gt;Kotlin&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Ex√©cutable moins optimis√© pour une application &lt;code&gt;Clojure&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Conclusion&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;Suite √† mes premiers essais infructueux l&#x27;an dernier (lire mon article pr√©c√©dent &lt;a href=&quot;https:&#x2F;&#x2F;nicokosi.github.io&#x2F;clojure-goes-native-with-graalvm.html&quot;&gt;Du Clojure &quot;natif&quot; gr√¢ce √† GraalVM&lt;&#x2F;a&gt;), voici un compte rendu plus positif de mes exp√©rimentations avec les versions &lt;em&gt;release&lt;&#x2F;em&gt; de &lt;a href=&quot;https:&#x2F;&#x2F;www.graalvm.org&#x2F;&quot;&gt;GraalVM&lt;&#x2F;a&gt; sorties √† partir de mai 2019 (cf. les &lt;a href=&quot;https:&#x2F;&#x2F;www.graalvm.org&#x2F;release-notes&#x2F;&quot;&gt;&lt;em&gt;release notes&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;), en utilisant des applications en ligne de commandes impl√©ment√©e en &lt;a href=&quot;https:&#x2F;&#x2F;go.java&#x2F;&quot;&gt;Java&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;kotlinlang.org&#x2F;&quot;&gt;Kotlin&lt;&#x2F;a&gt; et &lt;a href=&quot;https:&#x2F;&#x2F;clojure.org&#x2F;&quot;&gt;Clojure&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;outillage&quot;&gt;Outillage&lt;&#x2F;h2&gt;
&lt;p&gt;Nous utiliserons les outils suivants :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.graalvm.org&#x2F;downloads&#x2F;&quot;&gt;GraalVM Community Edition&lt;&#x2F;a&gt; (&quot;&lt;em&gt;a High-performance polyglot VM&lt;&#x2F;em&gt;&quot;) et plus particuli√®rement la fonctionnalit√© &lt;a href=&quot;https:&#x2F;&#x2F;www.graalvm.org&#x2F;docs&#x2F;getting-started&#x2F;#native-images&quot;&gt;Native Image&lt;&#x2F;a&gt; via la commande &lt;code&gt;native-image&lt;&#x2F;code&gt; pour g√©n√©rer des ex√©cutables √† partir de &lt;em&gt;bytecode&lt;&#x2F;em&gt; JVM.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sdkman.io&#x2F;&quot;&gt;SDKMAN!&lt;&#x2F;a&gt; (&quot;&lt;em&gt;The Software Development Kit Manager&lt;&#x2F;em&gt;&quot;) pour installer &#x2F; utiliser des versions diff√©rentes du &lt;em&gt;Java Development Kit&lt;&#x2F;em&gt; &#x2F; &lt;em&gt;Java Runtime Environment&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;manpages.ubuntu.com&#x2F;manpages&#x2F;cosmic&#x2F;en&#x2F;man1&#x2F;time.1.html&quot;&gt;time&lt;&#x2F;a&gt; (&quot;&lt;em&gt;run programs and summarize system resource usage&lt;&#x2F;em&gt;&quot;) pour mesurer le temps d&#x27;ex√©cution&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;valgrind.org&#x2F;&quot;&gt;valgrind&lt;&#x2F;a&gt; (&quot;&lt;em&gt;tool for memory debugging, memory leak detection, and profiling&lt;&#x2F;em&gt;&quot;) pour √©valuer l&#x27;empreinte m√©moire des processus&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;executable-optimise-pour-une-application-wordcount-java&quot;&gt;Ex√©cutable optimis√© pour une application &quot;WordCount&quot; &lt;code&gt;Java&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Notre &quot;hello world&quot; est un programme Java de 10 lignes qui compte le nombre de mots d&#x27;un fichier de texte : &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nicokosi&#x2F;wordcount-with-java-stream&quot;&gt;wordcount-with-java-stream&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;G√©n√©rons un JAR ex√©cutable via Maven et OpenJDK, cela prend 2 secondes sur ma machine :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sdk use java 8.0.222.hs-adpt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Using&lt;&#x2F;span&gt;&lt;span&gt; java version 8.0.222.hs-adpt in this shell.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; time .&#x2F;mvnw clean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --quiet&lt;&#x2F;span&gt;&lt;span&gt; compile
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;mvnw&lt;&#x2F;span&gt;&lt;span&gt; clean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --quiet&lt;&#x2F;span&gt;&lt;span&gt; compile  6.24s user 0.31s system 323% cpu 2.022 total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note : le temps d&#x27;ex√©cution indiqu√© par la commande &lt;code&gt;time&lt;&#x2F;code&gt; se trouve √† la fin de la derni√®re ligne, en secondes : &lt;code&gt;2.022 total&lt;&#x2F;code&gt; pour 2,022 secondes.&lt;&#x2F;p&gt;
&lt;p&gt;Puis g√©n√©rons l&#x27;ex√©cutable via GraalVM native-image, cela prend 42 secondes sur ma machine :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; time $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.sdkman&#x2F;candidates&#x2F;java&#x2F;19.1.1-grl&#x2F;bin&#x2F;native-image \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;     --enable-https &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;     --no-fallback &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;     --no-server &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;     -cp&lt;&#x2F;span&gt;&lt;span&gt; target&#x2F;classes org.nicokosi.WordCount \
&lt;&#x2F;span&gt;&lt;span&gt;     wordcount-with-java-stream
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&#x2F;.sdkman&#x2F;candidates&#x2F;java&#x2F;19.1.1-grl&#x2F;bin&#x2F;native-image --enable-https   -c&lt;&#x2F;span&gt;&lt;span&gt;  236,70s user 2,75s system 566% cpu 42,285 total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Comparons les temps d&#x27;ex√©cution pour un petit fichier d&#x27;entr√©e.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; alias wordcount_java=&amp;quot; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;.sdkman&#x2F;candidates&#x2F;java&#x2F;8.0.222.hs-adpt&#x2F;bin&#x2F;java -cp target&#x2F;classes org.nicokosi.WordCount&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; time wordcount_java &#x2F;etc&#x2F;hosts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;hosts contains 26 words
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;home&#x2F;nkosinski&#x2F;.sdkman&#x2F;candidates&#x2F;java&#x2F;8.0.222.hs-adpt&#x2F;bin&#x2F;java -cp&lt;&#x2F;span&gt;&lt;span&gt;     0,16s user 0,02s system 152% cpu 0,118 total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; time .&#x2F;wordcount-with-java-stream &#x2F;etc&#x2F;hosts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;hosts contains 26 words
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;wordcount-with-java-stream&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;hosts  0,00s user 0,01s system 92% cpu 0,007 total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Puis comparons l&#x27;empreinte m√©moire :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; JAVA_HOME=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.sdkman&#x2F;candidates&#x2F;java&#x2F;8.0.222.hs-adpt \
&lt;&#x2F;span&gt;&lt;span&gt;  valgrind java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -cp&lt;&#x2F;span&gt;&lt;span&gt; target&#x2F;classes org.nicokosi.WordCount &#x2F;etc&#x2F;hosts
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=23352== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HEAP&lt;&#x2F;span&gt;&lt;span&gt; SUMMARY:
&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=23352==     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; use at exit: 34,892,297 bytes in 6,155 blocks
&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=23352==   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt; heap usage: 14,555 allocs, 8,400 frees, 49,960,719 bytes allocated  **
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note : la m√©moire totale allou√©e est √† la fin de la derni√®re ligne ; &lt;code&gt;49,960,719 bytes allocated&lt;&#x2F;code&gt; signifie qu&#x27;environ 50 m√©gaoctets ont √©t√© allou√©s.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; valgrind .&#x2F;wordcount-with-java-stream &#x2F;etc&#x2F;hosts
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=23753== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HEAP&lt;&#x2F;span&gt;&lt;span&gt; SUMMARY:
&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=23753==     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; use at exit: 10,468 bytes in 3 blocks
&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=23753==   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt; heap usage: 8 allocs, 5 frees, 12,436 bytes allocated**
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pour r√©sumer, au prix d&#x27;un temps de compilation plus long (42 secondes au lieu de 2 secondes), GraalVM :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;acc√©l√®re l&#x27;ex√©cution &quot;courte&quot; : 7 millisecondes au lieu de 118 millisecondes ;&lt;&#x2F;li&gt;
&lt;li&gt;r√©duit l&#x27;empreinte m√©moire de notre application : 12 kilooctets au lieu de 50 m√©gaoctets.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;executable-optimise-pour-une-application-kotlin&quot;&gt;Ex√©cutable optimis√© pour une application &lt;code&gt;Kotlin&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Faisons la m√™me chose pour une application &lt;a href=&quot;https:&#x2F;&#x2F;kotlinlang.org&#x2F;&quot;&gt;Kotlin&lt;&#x2F;a&gt; un peu plus complexe, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nicokosi&#x2F;pullpitoK&#x2F;&quot;&gt;pullpitoK&lt;&#x2F;a&gt; (200 lignes de codes avec des librairies tierces) qui consomme les API GitHub pour afficher des statistiques sur les pull requests GitHub.&lt;&#x2F;p&gt;
&lt;p&gt;La diff√©rence de temps de construction √©tant similaire au paragraphe pr√©c√©dent, concentrons-nous sur la comparaison du temps de d√©marrage pour une ex√©cution rapide (affichage de l&#x27;aide souvent appel√©e &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Usage_message&quot;&gt;&quot;usage message&quot;&lt;&#x2F;a&gt;) :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; export PATH=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.sdkman&#x2F;candidates&#x2F;java&#x2F;8.0.222.hs-adpt&#x2F;bin:$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PATH
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; time (java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -jar&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;build&#x2F;libs&#x2F;pullpitoK-all.jar | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head -1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Usage:&lt;&#x2F;span&gt;&lt;span&gt; pullpitoK &amp;lt;repository&amp;gt; &amp;lt;token&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;java -jar&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;build&#x2F;libs&#x2F;pullpitoK-all.jar | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head -1&lt;&#x2F;span&gt;&lt;span&gt;; )  0.08s user 0.02s system 108% cpu 0.093 total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; alias pullpitoK=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PULLPITOK_LIBSUNEC=&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;.sdkman&#x2F;candidates&#x2F;java&#x2F;19.1.1-grl&#x2F;jre&#x2F;lib .&#x2F;pullpitoK&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; time (pullpitoK&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --help &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head -1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Usage:&lt;&#x2F;span&gt;&lt;span&gt; pullpitoK &amp;lt;repository&amp;gt; &amp;lt;token&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PULLPITOK_LIBSUNEC&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;Users&#x2F;nicolas&#x2F;.sdkman&#x2F;candidates&#x2F;java&#x2F;19.1.1-grl&#x2F;jre&#x2F;li&lt;&#x2F;span&gt;&lt;span&gt;)  0.00s user 0.00s system 88% cpu 0.009 total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Soit 9 millisecondes avec la version native contre 93 millisecondes pour la version JVM.&lt;&#x2F;p&gt;
&lt;p&gt;Comparons maintenant l&#x27;empreinte m√©moire :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; valgrind java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -jar&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;build&#x2F;libs&#x2F;pullpitoK-all.jar
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Usage:&lt;&#x2F;span&gt;&lt;span&gt; pullpitoK &amp;lt;repository&amp;gt; &amp;lt;token&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=26273== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HEAP&lt;&#x2F;span&gt;&lt;span&gt; SUMMARY:
&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=26273==     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; use at exit: 32,181,758 bytes in 2,134 blocks
&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=26273==   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt; heap usage: 5,725 allocs, 3,591 frees, 33,187,784 bytes allocated
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; valgrind pullpitoK | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head -1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Usage:&lt;&#x2F;span&gt;&lt;span&gt; pullpitoK &amp;lt;repository&amp;gt; &amp;lt;token&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=27690== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HEAP&lt;&#x2F;span&gt;&lt;span&gt; SUMMARY:
&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=27690==     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; use at exit: 228 bytes in 1 blocks
&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=27690==   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt; heap usage: 6 allocs, 5 frees, 2,196 bytes allocated
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Soit 2 kilooctets avec la version native contre 33 m√©gaoctets pour la version JVM.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;executable-moins-optimise-pour-une-application-clojure&quot;&gt;Ex√©cutable &lt;em&gt;moins optimis√©&lt;&#x2F;em&gt; pour une application &lt;code&gt;Clojure&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Dans mon billet &lt;a href=&quot;https:&#x2F;&#x2F;nicokosi.github.io&#x2F;clojure-goes-native-with-graalvm.html&quot;&gt;Du Clojure &quot;natif&quot; gr√¢ce √† GraalVM&lt;&#x2F;a&gt;, je me suis heurt√© √† deux probl√®mes :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;GraalVM √©tait encore exp√©rimental (&lt;em&gt;release candidates&lt;&#x2F;em&gt;) √† l&#x27;√©poque&lt;&#x2F;li&gt;
&lt;li&gt;l&#x27;outil Native Image poss√®de des limitations qui concernent notamment le chargement de classes dynamiques, l&#x27;utilisation de la r√©flexion (API java.lang.reflect) etc.
[mise √† jour, 2024-12-30 : le lien vers les limitations, √©tant cass√©, a √©t√© supprim√©]&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Essayons de refaire l&#x27;essai avec une version &lt;em&gt;release&lt;&#x2F;em&gt; de GraalVM pour l&#x27;application &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nicokosi&#x2F;hubstats&#x2F;&quot;&gt;hubstats&lt;&#x2F;a&gt; (200 lignes de codes, utilisation de librairies tierces pour appeler les API HTTP GitHub).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; time $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.sdkman&#x2F;candidates&#x2F;java&#x2F;19.1.1-grl&#x2F;bin&#x2F;native-image \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;   --enable-https &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;   --no-fallback &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;   --no-server &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;   -jar&lt;&#x2F;span&gt;&lt;span&gt; target&#x2F;hubstats-0.1.0-SNAPSHOT-standalone.jar \
&lt;&#x2F;span&gt;&lt;span&gt;   hubstats
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;La compilation native √©choue. Voici un extrait du message d&#x27;erreur :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Error: Unsupported features in 4 methods
&lt;&#x2F;span&gt;&lt;span&gt;Detailed message:
&lt;&#x2F;span&gt;&lt;span&gt;Error: Unsupported type java.lang.invoke.MemberName is reachable: All methods from java.lang.invoke should have been replaced during image building.
&lt;&#x2F;span&gt;&lt;span&gt;To diagnose the issue, you can add the option --report-unsupported-elements-at-runtime. The unsupported element is then reported at run time when it is accessed the first time.
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nous pourrions corriger √ßa en adaptant le code source. Par facilit√©, essayons le mode &lt;code&gt;fallback&lt;&#x2F;code&gt; (&quot;solution de repli&quot;) de Native Image qui permet de contourner les limitations en embarquant une JVM classique :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Construction de l&amp;#39;ex√©cutable avec GraalVM
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.sdkman&#x2F;candidates&#x2F;java&#x2F;19.1.1-grl&#x2F;bin&#x2F;native-image \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;   --enable-https &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;   --force-fallback &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;   --no-server &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;   -jar&lt;&#x2F;span&gt;&lt;span&gt; target&#x2F;hubstats-0.1.0-SNAPSHOT-standalone.jar \
&lt;&#x2F;span&gt;&lt;span&gt;   hubstats
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[hubstats:31661]      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;total&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;:  14,663.95 ms
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Warning:&lt;&#x2F;span&gt;&lt;span&gt; Image &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hubstats&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; is a fallback image that requires a JDK for execution (use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --no-fallback&lt;&#x2F;span&gt;&lt;span&gt; to suppress fallback image generation)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&#x2F;.sdkman&#x2F;candidates&#x2F;java&#x2F;19.1.1-grl&#x2F;bin&#x2F;native-image --enable-https&lt;&#x2F;span&gt;&lt;span&gt;       78,73s user 1,31s system 536% cpu 14,926 total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Etant donn√© que le mode fallback est utilis√©, les temps de d√©marrage sont maintenant similaires :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; export PATH=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.sdkman&#x2F;candidates&#x2F;java&#x2F;8.0.222.hs-adpt&#x2F;bin:$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PATH
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; time (java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -jar&lt;&#x2F;span&gt;&lt;span&gt; target&#x2F;hubstats-0.1.0-SNAPSHOT-standalone.jar | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head -1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Display&lt;&#x2F;span&gt;&lt;span&gt; statistics for GitHub pull requests.
&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;java -jar&lt;&#x2F;span&gt;&lt;span&gt; target&#x2F;hubstats-0.1.0-SNAPSHOT-standalone.jar | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head -1&lt;&#x2F;span&gt;&lt;span&gt;; )  3,36s user 0,10s system 262% cpu 1,318 total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; time (.&#x2F;hubstats | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head -1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Display&lt;&#x2F;span&gt;&lt;span&gt; statistics for GitHub pull requests.
&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;hubstats &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head -1&lt;&#x2F;span&gt;&lt;span&gt;; )  2,86s user 0,14s system 236% cpu 1,272 total
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;mais l&#x27;empreinte m√©moire est √©norm√©ment r√©duite :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; export PATH=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.sdkman&#x2F;candidates&#x2F;java&#x2F;8.0.222.hs-adpt&#x2F;bin:$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PATH
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; valgrind java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -jar&lt;&#x2F;span&gt;&lt;span&gt; target&#x2F;hubstats-0.1.0-SNAPSHOT-standalone.jar
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Display&lt;&#x2F;span&gt;&lt;span&gt; statistics for GitHub pull requests.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=2690== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HEAP&lt;&#x2F;span&gt;&lt;span&gt; SUMMARY:
&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=2690==     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; use at exit: 38,656,326 bytes in 34,800 blocks
&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=2690==   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt; heap usage: 170,569 allocs, 135,769 frees, 406,386,571 bytes allocated
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; valgrind pullpitoK
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Usage:&lt;&#x2F;span&gt;&lt;span&gt; pullpitoK &amp;lt;repository&amp;gt; &amp;lt;token&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=5747== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HEAP&lt;&#x2F;span&gt;&lt;span&gt; SUMMARY:
&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=5747==     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; use at exit: 228 bytes in 1 blocks
&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=5747==   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt; heap usage: 6 allocs, 5 frees, 2,196 bytes allocated
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Au travers de ces trois petites applications utilisant des langages diff√©rents (Java, Kotlin et Clojure), nous avons pu v√©rifier les b√©n√©fices des ex√©cutables &quot;images natives GraalVM&quot; :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;avoir un &lt;strong&gt;ex√©cutable compact&lt;&#x2F;strong&gt; d√©ployable sans &lt;em&gt;Java Virtual Machine&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;une &lt;strong&gt;consommation m√©moire r√©duite&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;un &lt;strong&gt;d√©marrage rapide&lt;&#x2F;strong&gt; (parfois !)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;De plus, on pressent l&#x27;int√©r√™t qu&#x27;aura GraalVM pour moderniser Java, en particulier pour un usage en &lt;strong&gt;&lt;em&gt;cloud-computing&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; et pour les &lt;strong&gt;microservices&lt;&#x2F;strong&gt;. Se r√©f√©rencer aux frameworks tels &lt;a href=&quot;https:&#x2F;&#x2F;quarkus.io&#x2F;&quot;&gt;Quarkus&lt;&#x2F;a&gt; et &lt;a href=&quot;https:&#x2F;&#x2F;micronaut.io&#x2F;&quot;&gt;Micronaut&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A tester ult√©rieurement :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;la gestion de la m√©moire par le ramasse-miettes (&lt;em&gt;garbage collector&lt;&#x2F;em&gt;)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;la diff√©rence entre les versions &lt;em&gt;Community Edition&lt;&#x2F;em&gt; et &lt;em&gt;Enterprise Edition&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;PS : merci √† mes coll√®gues de &lt;a href=&quot;http:&#x2F;&#x2F;www.vidalfrance.com&#x2F;&quot;&gt;Vidal&lt;&#x2F;a&gt;, notamment √† Viviane, Marc et Jean-Christophe pour les √©changes int√©ressants sur GraalVM et √† St√©phane pour la relecture de cet article.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="fr">
        <title>D√©couvrons Rust</title>
        <published>2018-06-10T00:00:00+00:00</published>
        <updated>2018-06-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://nicokosi.github.io/fr/discovering-rust/"/>
        <id>https://nicokosi.github.io/fr/discovering-rust/</id>
        
        <content type="html" xml:base="https://nicokosi.github.io/fr/discovering-rust/">&lt;h1 id=&quot;decouvrons-rust&quot;&gt;D√©couvrons Rust&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;em&gt;En tant que d√©veloppeur.se Java, je veux d√©couvrir Rust, de fa√ßon √† bien comprendre la phrase suivante cit√©e de &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&quot;&gt;rust-lang.org&lt;&#x2F;a&gt;*:&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust is a systems programming language that runs blazingly &lt;strong&gt;fast&lt;&#x2F;strong&gt;, &lt;strong&gt;prevents segfaults&lt;&#x2F;strong&gt;, and &lt;strong&gt;guarantees thread safety&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;*: avez-vous remarqu√© le &quot;agile stories meme&quot; ? üòâ&lt;&#x2F;p&gt;
&lt;h2 id=&quot;comment-j-ai-commence-a-apprendre-rust&quot;&gt;Comment j&#x27;ai commenc√© √† apprendre Rust&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;book&#x2F;second-edition&#x2F;&quot;&gt;The Rust Programming Language (2nd edition)&lt;&#x2F;a&gt; est un chouette un livre en ligne avec des exemples concrets de petits projets impl√©ment√©s pas-√†-pas (un outil en ligne de commande et un serveur web).&lt;&#x2F;p&gt;
&lt;p&gt;Apr√®s avoir lu partiellement ce livre, j&#x27;ai &quot;port√©&quot; en Rust un projet personnel nomm√© &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nicokosi&#x2F;hubstats&quot;&gt;hubstats&lt;&#x2F;a&gt;. Hubstats est un outil en ligne de commande que j&#x27;ai √©crit en Clojure, qui utilise une API REST GitHub pour afficher des informations sur les pull requests GitHub dans la sortie standard. J&#x27;ai baptis√© le projet Rust &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nicokosi&#x2F;pullpito&#x2F;&quot;&gt;pullpito&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Ce portage a √©t√© une fa√ßon ludique et facile d&#x27;apprendre Rust car je n&#x27;ai eu ni √† r√©fl√©chir au &quot;quoi&quot; (afficher des informations sur le pull requests GitHub), ni au &quot;comment&quot; (appeler l&#x27;API GitHub que j&#x27;avais d√©j√† utilis√©e dans le projet existant) : je me suis uniquement foculis√© sur l&#x27;impl√©mentation en Rust.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mes-premieres-impressions&quot;&gt;Mes premi√®res impressions&lt;&#x2F;h2&gt;
&lt;p&gt;Le code Rust, √ßa &lt;strong&gt;d√©pote s√©v√®re&lt;&#x2F;strong&gt; ! Comparons par exemple l&#x27;ex√©cution des tests unitaires &lt;code&gt;pullpito&lt;&#x2F;code&gt;, qui se lancent en une demi seconde :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;pullpito $&amp;gt; time (cargo test --quiet)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;running 8 tests
&lt;&#x2F;span&gt;&lt;span&gt;# couic
&lt;&#x2F;span&gt;&lt;span&gt;test result: ok. 8 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;( cargo test --quiet; )  0.43s user 0.21s system 96% cpu 0.665 total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Alors que les tests unitaires de &lt;code&gt;hubstats&lt;&#x2F;code&gt; se lancent en 10 secondes :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;hubstats $&amp;gt; time (lein test)
&lt;&#x2F;span&gt;&lt;span&gt;# couic
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Ran 3 tests containing 20 assertions.
&lt;&#x2F;span&gt;&lt;span&gt;0 failures, 0 errors.
&lt;&#x2F;span&gt;&lt;span&gt;( lein test; )  10.86s user 0.70s system 129% cpu 8.923 total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Note: la commande &lt;code&gt;cargo&lt;&#x2F;code&gt; lance &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;&quot;&gt;Cargo&lt;&#x2F;a&gt;, l&#x27;outil de build de Rust ; la commande &lt;code&gt;lein&lt;&#x2F;code&gt; lance &lt;a href=&quot;https:&#x2F;&#x2F;leiningen.org&#x2F;&quot;&gt;Leiningen&lt;&#x2F;a&gt;, un des outils de build de Clojure.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Comparons d√©sormais les temps d&#x27;ex√©cutions des lignes de commande. &lt;code&gt;pullpito&lt;&#x2F;code&gt; se lance en 20 millisecondes sur ma machine :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;pullpito $&amp;gt; time (cargo run --quiet python&#x2F;peps)
&lt;&#x2F;span&gt;&lt;span&gt;pull requests for &amp;quot;python&#x2F;peps&amp;quot; -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  opened per author:
&lt;&#x2F;span&gt;&lt;span&gt;    brainwane: 1
&lt;&#x2F;span&gt;&lt;span&gt;  commented per author:
&lt;&#x2F;span&gt;&lt;span&gt;    the-knights-who-say-ni: 1
&lt;&#x2F;span&gt;&lt;span&gt;    stevendaprano: 2
&lt;&#x2F;span&gt;&lt;span&gt;    pradyunsg: 2
&lt;&#x2F;span&gt;&lt;span&gt;    gvanrossum: 1
&lt;&#x2F;span&gt;&lt;span&gt;    6502: 1
&lt;&#x2F;span&gt;&lt;span&gt;    Rosuav: 1
&lt;&#x2F;span&gt;&lt;span&gt;    brainwane: 1
&lt;&#x2F;span&gt;&lt;span&gt;  closed per author:
&lt;&#x2F;span&gt;&lt;span&gt;    markshannon: 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;( cargo run --quiet python&#x2F;peps; )  0.22s user 0.09s system 20% cpu 1.524 total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;...alors que &lt;code&gt;hubstats&lt;&#x2F;code&gt; prend une dizaine de secondes (oups, un peu d&#x27;optimisation serait n√©cessaire üòá) :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;hubstats $&amp;gt; time (lein run --organization python --repository peps)
&lt;&#x2F;span&gt;&lt;span&gt;pull requests for python&#x2F;peps -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;	since 2018-05-15T05:35:57Z
&lt;&#x2F;span&gt;&lt;span&gt;		8 opened &#x2F; 8 closed &#x2F; 2 commented (15 comments)
&lt;&#x2F;span&gt;&lt;span&gt; 		opened per author:  {encukou 2, willingc 1, jdemeyer 1, gvanrossum 1, ethanhs 1, daxm 1, brainwane 1}
&lt;&#x2F;span&gt;&lt;span&gt; 		comments per author:  {tim-one 4, ethanhs 3, vlasovskikh 2, gvanrossum 2, JelleZijlstra 2, ilevkivskyi 1, Rosuav 1}
&lt;&#x2F;span&gt;&lt;span&gt; 		closed per author:  {brettcannon 4, markshannon 3, encukou 1}
&lt;&#x2F;span&gt;&lt;span&gt;( lein run --organization python --repository peps; )  11.30s user 0.77s system 66% cpu 18.160 total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Qu&#x27;en est-il de la &lt;strong&gt;compilation&lt;&#x2F;strong&gt; ? La premi√®re compilation est plus lente car toutes les d√©pendances doivent √©galement √™tre compil√©es. Sur ma machine, &lt;code&gt;pullpito&lt;&#x2F;code&gt; compile en 40 secondes :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;pullpito $&amp;gt; time (cargo clean &amp;amp;&amp;amp; cargo build)
&lt;&#x2F;span&gt;&lt;span&gt;Compiling void v1.0.2
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling byteorder v1.2.2
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling serde v1.0.37
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling scoped-tls v0.1.
&lt;&#x2F;span&gt;&lt;span&gt;# snip
&lt;&#x2F;span&gt;&lt;span&gt;    Finished dev [unoptimized + debuginfo] target(s) in 41.53 secs
&lt;&#x2F;span&gt;&lt;span&gt;( cargo clean &amp;amp;&amp;amp; cargo build; )  213.99s user 16.77s system 552% cpu 41.788 total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Mais le compilateur Rust est incr√©mental, les compilations suivantes seront plus rapides voire imm√©diates si le code source ne change pas :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;pullpito $&amp;gt; cargo build
&lt;&#x2F;span&gt;&lt;span&gt;    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;De son c√¥t√©, &lt;code&gt;hubstats&lt;&#x2F;code&gt; compile en 40 secondes (ses d√©pendances ne sont pas compil√©es) :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;hubstats $&amp;gt; time (lein clean &amp;amp;&amp;amp; lein uberjar)
&lt;&#x2F;span&gt;&lt;span&gt;# couic
&lt;&#x2F;span&gt;&lt;span&gt;( lein clean &amp;amp;&amp;amp; lein uberjar; )  37.55s user 6.49s system 223% cpu 19.750 total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&#x2F;&gt;
## A propos de Rust, le langage
&lt;br&#x2F;&gt;
### Ownership, gloups ! üò±
&lt;p&gt;Rust g√®re la m√©moire de fa√ßon particuli√®re. Au lieu d&#x27;utiliser un ramasse-miettes (&lt;em&gt;garbage collector&lt;&#x2F;em&gt;) comme en Java ou une gestion manuelle comme en C&#x2F;C++, la m√©moire est automatiquement r√©cup√©r√©e gr√¢ce aux &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;second-edition&#x2F;ch04-01-what-is-ownership.html&quot;&gt;r√®gles d&#x27;&lt;em&gt;ownership&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;    Each value in Rust has a variable that‚Äôs called its owner.
&lt;&#x2F;span&gt;&lt;span&gt;    There can only be one owner at a time.
&lt;&#x2F;span&gt;&lt;span&gt;    When the owner goes out of scope, the value will be dropped.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cela semble facile, mais √ßa l&#x27;est beaucoup moins en r√©alit√©.&lt;&#x2F;p&gt;
&lt;p&gt;N&#x27;ayant pas encore bien compris les implications du concept d&#x27;ownership, je n&#x27;irai pas plus loin sur ce sujet. Ma compr√©hension actuelle se limite √† corriger toutes les erreurs de compilation li√©es aux violation des ces r√®gles ! üòá&lt;&#x2F;p&gt;
&lt;p&gt;Pour plus de pr√©cisions, lire le chapitre &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;second-edition&#x2F;ch04-00-understanding-ownership.html&quot;&gt;&quot;Understanding Ownership&quot;&lt;&#x2F;a&gt; de &quot;The Rust Programming Language&quot;.&lt;&#x2F;p&gt;
&lt;br&#x2F;&gt;
### Immuable, par d√©faut üòé
&lt;p&gt;Les variables sont immuables, par d√©faut. Elles ne peuvent pas √™tre r√©-assign√©es √† moins d&#x27;√™tre explicitement d√©clar√©es &lt;em&gt;mutables&lt;&#x2F;em&gt; :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; name = &amp;quot;bar&amp;quot;; &#x2F;&#x2F; G√©n√©rerait l&amp;#39;erreur de compilation &amp;quot;error: re-assignment of immutable variable&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; changing_name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;changing_name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;baz&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;N√©anmoins, les variables immuables peut √™tre surcharg√©es (&lt;em&gt;shadowed&lt;&#x2F;em&gt;) :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;quot;shadowed variable&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&#x2F;&gt;
### Inf√©rence de type üòé
L&#x27;inf√©rence de type est bien sympathique et simplifie le code :
```rust
&#x2F;&#x2F; le type peut √™tre inf√©r√© :
let foo = &quot;foo&quot;.to_string();
&#x2F;&#x2F; ou bien sp√©cifi√© :
let foo : String = &quot;foo&quot;.to_string();
```
&lt;br&#x2F;&gt;
### Filtrage par motif (_pattern matching_) üòé
&lt;p&gt;On peut utiliser le pattern matching au lieu de if&#x2F;else... et c&#x27;est cool !&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; body = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; body {
&lt;&#x2F;span&gt;&lt;span&gt;  Ok(body) =&amp;gt; body,
&lt;&#x2F;span&gt;&lt;span&gt;  Err(_) =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Par contre, le fait que les variables soient &quot;emprunt√©es&quot; (&lt;em&gt;variable borrowing&lt;&#x2F;em&gt;) semble rendre le pattern matching plus dur √† utiliser que dans d&#x27;autres langages (comme Scala). Se r√©f√©rer √† &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;29926724&#x2F;matching-string-cannot-move-out-of-borrowed-content&quot;&gt;ce fil Stack Overflow&lt;&#x2F;a&gt;. Note personnelle : creuser ce sujet.&lt;&#x2F;p&gt;
&lt;br&#x2F;&gt;
### Tuples, √©num√©rations et structures üòé
&lt;p&gt;Rust permet d&#x27;utiliser des tuples, des √©num√©rations et des structures de donn√©es :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span&gt;(dead_code)]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Suite {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;CLUB&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;DIAMOND&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;HEART&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;SPADE
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Rank {
&lt;&#x2F;span&gt;&lt;span&gt;  Ace, King, Queen, Jack
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Card {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;suite&lt;&#x2F;span&gt;&lt;span&gt;: Suite,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rank&lt;&#x2F;span&gt;&lt;span&gt;: Rank,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Testons cela avec le REPL &lt;code&gt;rusti&lt;&#x2F;code&gt; :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;rusti=&amp;gt; Card { suite: Suite::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;CLUB&lt;&#x2F;span&gt;&lt;span&gt;, rank: Rank::King }
&lt;&#x2F;span&gt;&lt;span&gt;Card { suite: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;CLUB&lt;&#x2F;span&gt;&lt;span&gt;, rank: King }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&#x2F;&gt;
## Outillage
&lt;br&#x2F;&gt;
### Pas de REPL (avec un support complet de Rust) üò¢
&lt;p&gt;Il n&#x27;y a pas de REPL (Read Eval Print Loop) officiel. C&#x27;est bien dommage !&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;murarth&#x2F;rusti&quot;&gt;rusti&lt;&#x2F;a&gt; peut d√©panner mais est limit√© et ne supporte pas toutes les √©volutions r√©centes du langage.&lt;&#x2F;p&gt;
&lt;p&gt;Les REPL en ligne comme &lt;a href=&quot;https:&#x2F;&#x2F;repl.it&#x2F;site&#x2F;languages&#x2F;rust&quot;&gt;repl.it&lt;&#x2F;a&gt; peuvent se r√©v√©ler utiles, m√™me s&#x27;ils sont limit√©s (par exemple, on ne peut pas toujours y importer des d√©pendances externes appel√©es &lt;code&gt;crates&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gestion-des-dependances-descripteur-cargo-toml-avec-gestion-semantique-semantic-versioning-sunglasses&quot;&gt;Gestion des d√©pendances (descripteur &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;) avec gestion s√©mantique (&lt;em&gt;semantic versioning&lt;&#x2F;em&gt;) üòé&lt;&#x2F;h3&gt;
&lt;p&gt;Chaque d√©pendance binaires (appel√©e &lt;code&gt;crate&lt;&#x2F;code&gt;) :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a un descripteur &lt;a href=&quot;https:&#x2F;&#x2F;semver.org&#x2F;&quot;&gt;versionn√© &quot;s√©mantiquement&quot;&lt;&#x2F;a&gt;. Par exemple, la version de pullpito est 0.1.0, comme indiqu√© dans le descripteur &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; :&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;pullpito $&amp;gt; grep &amp;quot;^version =&amp;quot; Cargo.toml
&lt;&#x2F;span&gt;&lt;span&gt;version = &amp;quot;0.1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;d√©clare la version des ses d√©pendances :&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;pullpito $&amp;gt; grep -A 10 &amp;quot;dependencies&amp;quot; Cargo.toml
&lt;&#x2F;span&gt;&lt;span&gt;[dependencies]
&lt;&#x2F;span&gt;&lt;span&gt;log = &amp;quot;0.4&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;env_logger = &amp;quot;0.5&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;futures = &amp;quot;0.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;serde = &amp;quot;1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;serde_json = &amp;quot;1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;serde_derive = &amp;quot;1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;chrono = { version = &amp;quot;0.4&amp;quot;, features = [&amp;quot;serde&amp;quot;] }
&lt;&#x2F;span&gt;&lt;span&gt;reqwest = &amp;quot;0.8&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cool et concis, non ?&lt;&#x2F;p&gt;
&lt;br&#x2F;&gt;
### Formattage du code üòé
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang-nursery&#x2F;rustfmt&quot;&gt;rustfmt&lt;&#x2F;a&gt; est l&#x27;outil standard pour formater le code en utilisant un style par d√©faut :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;pullpito $&amp;gt; cat src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;  println! (&amp;quot;foo&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; let bar = &amp;quot;bar&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;pullpito $&amp;gt; cargo fmt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;pullpito $&amp;gt; cat src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;foo&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    let bar = &amp;quot;bar&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Plus de guerre du style &quot;tabulation &#x2F; espace&quot; ! Cf. &lt;a href=&quot;https:&#x2F;&#x2F;xkcd.com&#x2F;1285&#x2F;&quot;&gt;https:&#x2F;&#x2F;xkcd.com&#x2F;1285&#x2F;&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;br&#x2F;&gt;
### Compilateur &quot;user-friendly&quot; (souvent) üòé
&lt;p&gt;En cas d&#x27;erreur, le compilateur Rust compiler fait souvent des suggestions &quot;amicales&quot;. Par exemple :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Suite { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;CLUB &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, Suite.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;CLUB&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;g√©n√®re l&#x27;erreur suivante :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0423]: expected value, found enum `Suite`
&lt;&#x2F;span&gt;&lt;span&gt; --&amp;gt; src&#x2F;main.rs:5:22
&lt;&#x2F;span&gt;&lt;span&gt;  |
&lt;&#x2F;span&gt;&lt;span&gt;5 |     println!(&amp;quot;{:?}&amp;quot;, Suite.CLUB);
&lt;&#x2F;span&gt;&lt;span&gt;  |                      ^^^^^
&lt;&#x2F;span&gt;&lt;span&gt;  |
&lt;&#x2F;span&gt;&lt;span&gt;  = note: did you mean to use one of the following variants?
&lt;&#x2F;span&gt;&lt;span&gt;          - `Suite::CLUB`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&#x2F;&gt;
### Outillage multi-version üòé
&lt;p&gt;Rust a trois canaux de mise √† jour (&lt;em&gt;release channels&lt;&#x2F;em&gt;): stable, beta, et nightly. On peut en utiliser un ou plusieurs. Par exemple, si un projet n√©cessite le &quot;stable toolchain&quot;, un autre peut avoir besoin du &quot;nightly&quot;. Dans ce cas, on utilise la commande &lt;code&gt;rustup&lt;&#x2F;code&gt; pour installer et utiliser ces deux versions.&lt;&#x2F;p&gt;
&lt;p&gt;Par exemple, installons le toolchain &quot;nightly&quot; :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$&amp;gt; rustup install nightly
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Il y a maintenant deux toolchains : &lt;code&gt;stable&lt;&#x2F;code&gt; (celui par d√©faut) and &lt;code&gt;nightly&lt;&#x2F;code&gt; :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$&amp;gt; rustup show
&lt;&#x2F;span&gt;&lt;span&gt;Default host: x86_64-apple-darwin
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;installed toolchains
&lt;&#x2F;span&gt;&lt;span&gt;--------------------
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;stable-x86_64-apple-darwin
&lt;&#x2F;span&gt;&lt;span&gt;nightly-x86_64-apple-darwin
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;active toolchain
&lt;&#x2F;span&gt;&lt;span&gt;----------------
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;stable-x86_64-apple-darwin (default)
&lt;&#x2F;span&gt;&lt;span&gt;rustc 1.25.0 (84203cac6 2018-03-25)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On peut ensuite :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;changer le toolchain par d√©faut via &lt;code&gt;rustup default&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;activer un toolchain via &lt;code&gt;rustup set&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;utiliser un toolchain √† la demande via &lt;code&gt;rustup run $toolchain $cmd&lt;&#x2F;code&gt; (exemple : &lt;code&gt;rustup run nightly cargo build&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;etc.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="fr">
        <title>Du Clojure &quot;natif&quot; gr√¢ce √† GraalVM</title>
        <published>2018-05-12T00:00:00+00:00</published>
        <updated>2018-05-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://nicokosi.github.io/fr/clojure-goes-native-with-graalvm/"/>
        <id>https://nicokosi.github.io/fr/clojure-goes-native-with-graalvm/</id>
        
        <content type="html" xml:base="https://nicokosi.github.io/fr/clojure-goes-native-with-graalvm/">&lt;h1 id=&quot;du-clojure-natif-grace-a-graalvm&quot;&gt;Du Clojure &quot;natif&quot; gr√¢ce √† GraalVM&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;graalvm-qu-est-ce-que-c-est&quot;&gt;GraalVM, qu&#x27;est-ce que c&#x27;est ?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.graalvm.org&#x2F;&quot;&gt;GraalVM&lt;&#x2F;a&gt; est une machine virtuelle multi-langages : Java, autres langages de la machine virtuelle Java (Scala, Groovy, Kotlin etc.), JavaScript, LLVM, Ruby et R.&lt;&#x2F;p&gt;
&lt;p&gt;GraalVM permet √©galement de g√©n√©rer des ex√©cutables natifs √† partir du code Java :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;For JVM-based languages, GraalVM offers a mechanism to create precompiled native images with instant start up and low memory footprint.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oracle labs a annonc√© en avril 2018 la sortie de &lt;a href=&quot;https:&#x2F;&#x2F;www.infoq.com&#x2F;news&#x2F;2018&#x2F;04&#x2F;oracle-graalvm-v1&#x2F;&quot;&gt;GraalVM 1.0 release candidate&lt;&#x2F;a&gt;, donc c&#x27;est parti pour un essai !
[mise √† jour, 2024-12-30 : le lien original vers le blog Oracle, √©tant cass√©, a √©t√© remplac√© par un lien √©quivalent vers InfoQ]&lt;&#x2F;p&gt;
&lt;h2 id=&quot;construire-un-executable-a-partir-d-un-projet-clojure&quot;&gt;Construire un ex√©cutable √† partir d&#x27;un projet Clojure&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nicokosi&#x2F;hubstats&quot;&gt;hubstats&lt;&#x2F;a&gt; est mon projet perso impl√©ment√© en Clojure qui permet d&#x27;afficher des statistiques sur les pull requests GitHub. C&#x27;est un outil en ligne de commande utilisant une machine virtuelle Java, donc GraalVM devrait permettre d&#x27;acc√©l√©rer son d√©marrage en g√©n√©rant un ex√©cutable &quot;natif&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;Notes :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cet &lt;a href=&quot;https:&#x2F;&#x2F;www.innoq.com&#x2F;en&#x2F;blog&#x2F;native-clojure-and-graalvm&#x2F;&quot;&gt;article int√©ressant&lt;&#x2F;a&gt; m&#x27;a inspir√© et m&#x27;a aid√©.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;J&#x27;ai utilis√© la version &quot;Community Edition&quot; de GraalVM qui est gratuite et open source (une version &quot;Enterprise Edition&quot; existe √©galement).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;essai-ndeg1&quot;&gt;Essai n¬∞1&lt;&#x2F;h3&gt;
&lt;p&gt;A partir du &quot;fat&quot; JAR de mon projet &#x27;hubstats&#x27; (&quot;fat jar&quot; : archive de code Java qui inclut toutes les d√©pendances), j&#x27;ai lanc√© la commande &lt;code&gt;native-image&lt;&#x2F;code&gt; de &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Danny02&#x2F;graalvm-docker&quot;&gt;GraaVM 1.0.0-rc1 dans un conteneur Docker&lt;&#x2F;a&gt; :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;native-image &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -jar&lt;&#x2F;span&gt;&lt;span&gt; hubstats-0.1.0-SNAPSHOT-standalone.jar \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -H&lt;&#x2F;span&gt;&lt;span&gt;:+ReportUnsupportedElementsAtRuntime \
&lt;&#x2F;span&gt;&lt;span&gt;  hubstats.core
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(cf. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nicokosi&#x2F;hubstats&#x2F;pull&#x2F;12&#x2F;files&quot;&gt;tous les d√©tails&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;Pas de chance, la g√©n√©ration de l&#x27;ex√©cutable √©choue :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Step 4&#x2F;15 : RUN native-image   -jar hubstats-0.1.0-SNAPSHOT-standalone.jar   -H:+ReportUnsupportedElementsAtRuntime   hubstats.core
&lt;&#x2F;span&gt;&lt;span&gt; ---&amp;gt; Running in e7f911774bd4
&lt;&#x2F;span&gt;&lt;span&gt;Build on Server(pid: 11, port: 26681)*
&lt;&#x2F;span&gt;&lt;span&gt;   classlist:   3,159.26 ms
&lt;&#x2F;span&gt;&lt;span&gt;       (cap):   1,485.02 ms
&lt;&#x2F;span&gt;&lt;span&gt;       setup:   2,563.80 ms
&lt;&#x2F;span&gt;&lt;span&gt;    analysis:  10,109.06 ms
&lt;&#x2F;span&gt;&lt;span&gt;fatal error: java.lang.NullPointerException
&lt;&#x2F;span&gt;&lt;span&gt;	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
&lt;&#x2F;span&gt;&lt;span&gt;	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
&lt;&#x2F;span&gt;&lt;span&gt;	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
&lt;&#x2F;span&gt;&lt;span&gt;	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
&lt;&#x2F;span&gt;&lt;span&gt;	at java.util.concurrent.ForkJoinTask.getThrowableException(ForkJoinTask.java:598)
&lt;&#x2F;span&gt;&lt;span&gt;	at java.util.concurrent.ForkJoinTask.get(ForkJoinTask.java:1005)
&lt;&#x2F;span&gt;&lt;span&gt;	at com.oracle.svm.hosted.NativeImageGenerator.run(NativeImageGenerator.java:398)
&lt;&#x2F;span&gt;&lt;span&gt;	at com.oracle.svm.hosted.NativeImageGeneratorRunner.buildImage(NativeImageGeneratorRunner.java:240)
&lt;&#x2F;span&gt;&lt;span&gt;	at com.oracle.svm.hosted.NativeImageGeneratorRunner.build(NativeImageGeneratorRunner.java:337)
&lt;&#x2F;span&gt;&lt;span&gt;	at com.oracle.svm.hosted.server.NativeImageBuildServer.executeCompilation(NativeImageBuildServer.java:378)
&lt;&#x2F;span&gt;&lt;span&gt;	at com.oracle.svm.hosted.server.NativeImageBuildServer.lambda$processCommand$8(NativeImageBuildServer.java:315)
&lt;&#x2F;span&gt;&lt;span&gt;	at com.oracle.svm.hosted.server.NativeImageBuildServer.withJVMContext(NativeImageBuildServer.java:396)
&lt;&#x2F;span&gt;&lt;span&gt;	at com.oracle.svm.hosted.server.NativeImageBuildServer.processCommand(NativeImageBuildServer.java:312)
&lt;&#x2F;span&gt;&lt;span&gt;	at com.oracle.svm.hosted.server.NativeImageBuildServer.processRequest(NativeImageBuildServer.java:256)
&lt;&#x2F;span&gt;&lt;span&gt;	at com.oracle.svm.hosted.server.NativeImageBuildServer.lambda$serve$7(NativeImageBuildServer.java:216)
&lt;&#x2F;span&gt;&lt;span&gt;	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
&lt;&#x2F;span&gt;&lt;span&gt;	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
&lt;&#x2F;span&gt;&lt;span&gt;	at java.lang.Thread.run(Thread.java:748)
&lt;&#x2F;span&gt;&lt;span&gt;Caused by: java.lang.NullPointerException
&lt;&#x2F;span&gt;&lt;span&gt;	at com.oracle.graal.pointsto.ObjectScanner.scanField(ObjectScanner.java:113)
&lt;&#x2F;span&gt;&lt;span&gt;	at com.oracle.graal.pointsto.ObjectScanner.doScan(ObjectScanner.java:263)
&lt;&#x2F;span&gt;&lt;span&gt;	at com.oracle.graal.pointsto.ObjectScanner.finish(ObjectScanner.java:307)
&lt;&#x2F;span&gt;&lt;span&gt;	at com.oracle.graal.pointsto.ObjectScanner.scanBootImageHeapRoots(ObjectScanner.java:78)
&lt;&#x2F;span&gt;&lt;span&gt;	at com.oracle.graal.pointsto.ObjectScanner.scanBootImageHeapRoots(ObjectScanner.java:60)
&lt;&#x2F;span&gt;&lt;span&gt;	at com.oracle.graal.pointsto.BigBang.checkObjectGraph(BigBang.java:581)
&lt;&#x2F;span&gt;&lt;span&gt;	at com.oracle.graal.pointsto.BigBang.finish(BigBang.java:552)
&lt;&#x2F;span&gt;&lt;span&gt;	at com.oracle.svm.hosted.NativeImageGenerator.doRun(NativeImageGenerator.java:653)
&lt;&#x2F;span&gt;&lt;span&gt;	at com.oracle.svm.hosted.NativeImageGenerator.lambda$run$0(NativeImageGenerator.java:381)
&lt;&#x2F;span&gt;&lt;span&gt;	at java.util.concurrent.ForkJoinTask$AdaptedRunnableAction.exec(ForkJoinTask.java:1386)
&lt;&#x2F;span&gt;&lt;span&gt;	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
&lt;&#x2F;span&gt;&lt;span&gt;	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
&lt;&#x2F;span&gt;&lt;span&gt;	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
&lt;&#x2F;span&gt;&lt;span&gt;	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
&lt;&#x2F;span&gt;&lt;span&gt;Error: Processing image build request failed
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Le probl√®me ressemble fortement √† &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oracle&#x2F;graal&#x2F;issues&#x2F;385&quot;&gt;issue#385&lt;&#x2F;a&gt; et &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oracle&#x2F;graal&#x2F;issues&#x2F;375&quot;&gt;issue#375&lt;&#x2F;a&gt;. Si je comprends bien, il est li√© √† l&#x27;une des limitations de GraalVM : &quot;static initializers&quot; limitation. üò¢
[mise √† jour, 2024-12-30 : le lien vers les limitations, √©tant cass√©, a √©t√© supprim√©]&lt;&#x2F;p&gt;
&lt;h3 id=&quot;essai-ndeg2&quot;&gt;Essai n¬∞2&lt;&#x2F;h3&gt;
&lt;p&gt;Puisque certaines corrections √©taient uniquement disponibles dans le &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;graalvm&#x2F;&quot;&gt;code source de GraalVM&lt;&#x2F;a&gt;, j&#x27;ai voulu essayer avec le module &lt;code&gt;substratevm&lt;&#x2F;code&gt;
(qui inclut la commande &#x27;native-image&#x27;) construit √† partir du code source.&lt;&#x2F;p&gt;
&lt;p&gt;J&#x27;ai donc r√©cup√©r√© le code source de GraalVM :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone git@github.com:oracle&#x2F;graal.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Puis en suivant les &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oracle&#x2F;graal&#x2F;tree&#x2F;master&#x2F;substratevm&quot;&gt;indications du module substratevm&lt;&#x2F;a&gt;, j&#x27;ai t√©l√©charg√© le &lt;a href=&quot;http:&#x2F;&#x2F;www.oracle.com&#x2F;technetwork&#x2F;oracle-labs&#x2F;program-languages&#x2F;downloads&#x2F;index.html&quot;&gt;JDK GraalVM &quot;labs&quot;&lt;&#x2F;a&gt; puis j&#x27;ai construit le module &#x27;substratevm&#x27; :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; substratevm
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;JAVA_HOME&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;Downloads&#x2F;labsjdk1.8.0_161-jvmci-0.42&#x2F;Contents&#x2F;Home &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;..&#x2F;..&#x2F;mx&#x2F;mx&lt;&#x2F;span&gt;&lt;span&gt; build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;J&#x27;ai ensuite lanc√© la commande &#x27;native-image&#x27; qui est malheuresement rest√©e &quot;coinc√©e&quot; :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$&amp;gt; JAVA_HOME=~&#x2F;Downloads&#x2F;labsjdk1.8.0_161-jvmci-0.42&#x2F;Contents&#x2F;Home ..&#x2F;graal&#x2F;substratevm&#x2F;native-image -jar target&#x2F;hubstats-0.1.0-SNAPSHOT-standalone.jar hubstats.core
&lt;&#x2F;span&gt;&lt;span&gt;Build on Server(pid: 18933, port: 55103)*
&lt;&#x2F;span&gt;&lt;span&gt;   classlist:   2,744.32 ms
&lt;&#x2F;span&gt;&lt;span&gt;       (cap):   1,531.16 ms
&lt;&#x2F;span&gt;&lt;span&gt;       setup:   2,401.40 ms
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Une anomalie similaire √† d√©j√† √©t√© rapport√©e : &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oracle&#x2F;graal&#x2F;issues&#x2F;411&quot;&gt;&quot;native image failed to build jar&lt;&#x2F;a&gt;. üò≠&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;C&#x27;est s√ªr, ces premiers essais ont √©t√© infructueux. GraalVM est un projet encore jeune que je ne connais pas vraiment. N√©anmoins, ce fut une exp√©rience sympathique de d√©couvrir cet outil prometteur ! üòç&lt;&#x2F;p&gt;
&lt;p&gt;A refaire sous peu, avec un nouvel article √† la cl√© ?&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="fr">
        <title>G√©n√©rer ses graphiques Strava avec R</title>
        <published>2017-04-14T00:00:00+00:00</published>
        <updated>2017-04-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://nicokosi.github.io/fr/creating-strava-charts-with-r/"/>
        <id>https://nicokosi.github.io/fr/creating-strava-charts-with-r/</id>
        
        <content type="html" xml:base="https://nicokosi.github.io/fr/creating-strava-charts-with-r/">&lt;h1 id=&quot;generer-ses-graphiques-strava-avec-r&quot;&gt;G√©n√©rer ses graphiques Strava avec R&lt;&#x2F;h1&gt;
&lt;p&gt;Cet article fait suite √† &lt;a href=&quot;https:&#x2F;&#x2F;nicokosi.github.io&#x2F;fr&#x2F;creating-strava-charts-with-r&#x2F;creating-strava-charts-with-clojure-and-incanter.html&quot;&gt;G√©n√©rer ses graphiques Strava avec Clojure et Incanter&lt;&#x2F;a&gt; : en effet, j&#x27;ai d√©cid√© de faire un deuxi√®me essai de g√©n√©ration de graphiques avec R.&lt;&#x2F;p&gt;
&lt;p&gt;R est un langage id√©al pour le calcul statistique et la g√©n√©ration de graphiques. J&#x27;ai fait le choix d&#x27;utiliser l&#x27;IDE gratuit &lt;a href=&quot;https:&#x2F;&#x2F;www.rstudio.com&#x2F;products&#x2F;RStudio&#x2F;&quot;&gt;RStudio Desktop&lt;&#x2F;a&gt; qui contient de nombreuses facilit√©s (visualisation des donn√©es, historique des variables et des graphiques, aide int√©gr√©e etc.). RStudio Desktop est &lt;a href=&quot;http:&#x2F;&#x2F;www.rstudio.com&#x2F;products&#x2F;rstudio&#x2F;download&#x2F;&quot;&gt;t√©l√©chargeable&lt;&#x2F;a&gt; ou peut √™tre install√© via certains gestionnaires de paquets (exemple pour mac avec &lt;code&gt;homebrew&lt;&#x2F;code&gt;, ex√©cuter &lt;code&gt;brew cask install rstudio&lt;&#x2F;code&gt; dans un terminal).&lt;&#x2F;p&gt;
&lt;p&gt;Le but est toujours de :&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;appeler l&#x27;API Strava pour r√©cup√©rer les donn√©es au format JSON&lt;&#x2F;li&gt;
&lt;li&gt;faire quelques transformations, essentiellement des conversions&lt;&#x2F;li&gt;
&lt;li&gt;afficher des graphiques (exemple : temps en mouvement en fonction de la distance parcourue)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;C&#x27;est parti !&lt;&#x2F;p&gt;
&lt;br&#x2F;&gt;
R b√©n√©ficie de tr√®s nombreuses biblioth√®ques additionnelles qui sont publiques et t√©l√©chargeables automatiquement (&quot;CRAN repository&quot;). Voici les instructions d&#x27;import correspondant √† celles que j&#x27;ai utilis√©es :
&lt;pre data-lang=&quot;r&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-r &quot;&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;library&lt;&#x2F;span&gt;&lt;span&gt;(rjson)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;library&lt;&#x2F;span&gt;&lt;span&gt;(httr)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;library&lt;&#x2F;span&gt;&lt;span&gt;(ggplot2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;library&lt;&#x2F;span&gt;&lt;span&gt;(scales)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&#x2F;&gt;
### 1. R√©cup√©rer les donn√©es Strava
&lt;p&gt;Le code suivant appelle l&#x27;&lt;a href=&quot;http:&#x2F;&#x2F;strava.github.io&#x2F;api&#x2F;v3&#x2F;activities&#x2F;&quot;&gt;API Strava &quot;activities&quot;&lt;&#x2F;a&gt; avec un jeton d&#x27;autorisation (access token) et r√©cup√®re les 200 derni√®res sorties (&quot;activities&quot; = activit√© de course √† pied, v√©lo ou natation) sous forme d&#x27;une cha√Æne de caract√®res (&lt;code&gt;characters&lt;&#x2F;code&gt;) :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;r&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-r &quot;&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span&gt;token &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;readline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prompt&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter Strava access token: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;activities &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.strava.com&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;api&#x2F;v3&#x2F;activities&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;access_token &lt;&#x2F;span&gt;&lt;span&gt;= token, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;per_page &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;activities &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;(activities, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Retrieve JSON content as string
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&#x2F;&gt;
&lt;p&gt;###2. Transformer les donn√©es&lt;&#x2F;p&gt;
&lt;p&gt;Il faut ensuite transformer ces donn√©es en donn√©es tabulaires, appel√©es &lt;code&gt;dataframes&lt;&#x2F;code&gt;. Petite subtilit√©, il faut it√©rer sur les √©l√©ments des listes pour remplacer les valeurs vides (&lt;code&gt;null&lt;&#x2F;code&gt;) par des valeurs manquantes (&lt;code&gt;NA&lt;&#x2F;code&gt;, pour &quot;not available&quot;) :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;r&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-r &quot;&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span&gt;activities &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fromJSON&lt;&#x2F;span&gt;&lt;span&gt;(activities)      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Transformer le contenu JSON en liste
&lt;&#x2F;span&gt;&lt;span&gt;activities &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;lapply&lt;&#x2F;span&gt;&lt;span&gt;(activities, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;) {      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# appliquer une fonction anonyme √† chaque √©l√©ment de la liste
&lt;&#x2F;span&gt;&lt;span&gt;  x[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sapply&lt;&#x2F;span&gt;&lt;span&gt;(x, is.null)] &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NA           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# remplacer les valeurs nulles en &amp;quot;N&#x2F;A&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unlist&lt;&#x2F;span&gt;&lt;span&gt;(x)
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;df &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;data.frame&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;do.call&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rbind&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, activities)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# transformer les listes de listes en dataframe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;J&#x27;avoue que j&#x27;ai trich√© en &quot;googlant&quot; car les manipulations de structures ne sont pas super √©videntes pour moi ! ü§ì&lt;&#x2F;p&gt;
&lt;p&gt;On peut en tout cas remarquer que les variables ne sont pas typ√©es - R est un language dynamique - et peuvent √™tre r√©-affect√©es. Par exemple, &lt;code&gt;activities&lt;&#x2F;code&gt; est une variable de type &lt;code&gt;character&lt;&#x2F;code&gt; (cha√Æne de caract√®res, contenant les donn√©es JSON) qui devient ensuite une variable de type &lt;code&gt;list&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Il m&#x27;a fallu convertir les distances et les dur√©es pour utiliser des unit√©s plus appriopri√©es :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;r&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-r &quot;&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Convertir les dur√©es en minutes (l&amp;#39;API Strava API retourne des secondes) :
&lt;&#x2F;span&gt;&lt;span&gt;df&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;moving_time &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as.numeric&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as.character&lt;&#x2F;span&gt;&lt;span&gt;(df&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;moving_time)) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Convertir les distances en kilom√®tres (l&amp;#39;API Strava API retourne des m√®tres) :
&lt;&#x2F;span&gt;&lt;span&gt;df&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;distance &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as.numeric&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as.character&lt;&#x2F;span&gt;&lt;span&gt;(df&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;distance)) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pour l&#x27;anectode, les donn√©es sont des &lt;code&gt;factors&lt;&#x2F;code&gt;, c&#x27;est-√†-dire des donn√©es dont on conna√Æt toutes les valeurs (une √©num√©ration, en quelque sorte). Avant de les convertir, il faut r√©cup√©rer leur libell√© via la fonction &lt;code&gt;as.character&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;br&#x2F;&gt;
&lt;p&gt;###3. Affichage d&#x27;un graphique&lt;&#x2F;p&gt;
&lt;p&gt;La derni√®re √©tape consiste √† utiliser l&#x27;une des fonctions de la librairie &lt;code&gt;ggplot2&lt;&#x2F;code&gt; pour afficher et sauvegarder un graphique. Le code suivant affiche le temps en mouvement en fonction de la distance parcourue :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;r&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-r &quot;&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ggplot&lt;&#x2F;span&gt;&lt;span&gt;(df, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;=distance, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;=moving_time)) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# √† partir du dataframe, afficher les donn√©es &amp;#39;distance&amp;#39; en fonction de &amp;#39;moving_time`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;geom_point&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;colour&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#CC0000&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# afficher les points en rouge
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;geom_smooth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;=lm) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ajout d&amp;#39;une courbe de r√©gression lin√©aire +
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xlab&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;distance per activity (kilometers)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# libell√© de l&amp;#39;axe X +
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ylab&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;moving time (minutes)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# libell√© de l&amp;#39;axe Y
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ggsave&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;tmp&#x2F;moving-time.png&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# sauvegarder dans un fichier PNG
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Le graphique g√©n√©r√© :
&lt;img src=&quot;https:&#x2F;&#x2F;nicokosi.github.io&#x2F;fr&#x2F;creating-strava-charts-with-r&#x2F;r-chart-distance-per-moving-time.png&quot; alt=&quot;Chart: distance et temps en mouvement&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Voici le lien vers le &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;nicokosi&#x2F;241331f67692945ddca4e4ea2cc0597d&quot;&gt;code complet&lt;&#x2F;a&gt; pour afficher plusieurs graphiques similaires.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="fr">
        <title>G√©n√©rer ses graphiques Strava avec Clojure et Incanter</title>
        <published>2017-04-09T00:00:00+00:00</published>
        <updated>2017-04-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://nicokosi.github.io/fr/creating-strava-charts-with-clojure-and-incanter/"/>
        <id>https://nicokosi.github.io/fr/creating-strava-charts-with-clojure-and-incanter/</id>
        
        <content type="html" xml:base="https://nicokosi.github.io/fr/creating-strava-charts-with-clojure-and-incanter/">&lt;h1 id=&quot;generer-ses-graphiques-strava-avec-clojure-et-incanter&quot;&gt;G√©n√©rer ses graphiques Strava avec Clojure et Incanter&lt;&#x2F;h1&gt;
&lt;p&gt;J&#x27;utilise &lt;a href=&quot;https:&#x2F;&#x2F;www.strava.com&#x2F;&quot;&gt;Strava&lt;&#x2F;a&gt; pour enregistrer mes sessions de jogging : apr√®s avoir enregistr√© une session avec mon smartphone, je la publie pour pouvoir la partager et la revoir plus tard.&lt;&#x2F;p&gt;
&lt;p&gt;Strava fournit quelques tableaux de bord mais je voulais g√©n√©rer mes propres graphiques afin de visualiser ma progression.&lt;&#x2F;p&gt;
&lt;br&#x2F;&gt;
##Premier essai avec R
J&#x27;ai d&#x27;abord essay√© d&#x27;utiliser [RStudio](https:&#x2F;&#x2F;www.rstudio.com&#x2F;), un IDE pour le langage R. Je pense que c&#x27;est un outil adapt√© mais je le connais tr√®s peu. Apr√®s avoir essay√© pendant quelques heures d&#x27;importer mes donn√©es et de les transformer, j&#x27;ai abandonn√© !
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;nicokosi.github.io&#x2F;fr&#x2F;creating-strava-charts-with-clojure-and-incanter&#x2F;RStudio.png&quot; alt=&quot;RStudio : un IDE pour la plate-forme R&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;J&#x27;essairai une autre fois ! üòÖ&lt;&#x2F;p&gt;
&lt;br&#x2F;&gt;
##Deuxi√®me essai avec Clojure et Incanter
J&#x27;ai ensuite essay√© d&#x27;utiliser [Incanter](incanter.org), une librairie Clojure inspir√©e de R :
&gt; Clojure-based, R-like platform for statistical computing and graphics.
&lt;p&gt;J&#x27;avais besoin de faire 3 choses :&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;appeler l&#x27;API Strava pour r√©cup√©rer les donn√©es au format JSON&lt;&#x2F;li&gt;
&lt;li&gt;faire quelques transformations, essentiellement des conversions (m&#x2F;s en km&#x2F;h, secondes en minutes)&lt;&#x2F;li&gt;
&lt;li&gt;afficher des graphiques (exemple : √©volution de la vitesse moyenne par sortie en fonction du temps)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Allons-y !&lt;&#x2F;p&gt;
&lt;br&#x2F;&gt;
###1. R√©cup√©rer les donn√©es Strava
&lt;p&gt;La fonction suivante appelle l&#x27;&lt;a href=&quot;http:&#x2F;&#x2F;strava.github.io&#x2F;api&#x2F;v3&#x2F;activities&#x2F;&quot;&gt;API Strava &quot;activities&quot;&lt;&#x2F;a&gt; avec un jeton d&#x27;autorisation (access token) et r√©cup√®re les 200 derni√®res sorties (&quot;activities&quot; = activit√© de course √† pied, v√©lo ou natation) sous forme d&#x27;un tableau d&#x27;objets JSON :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;strava-activities &lt;&#x2F;span&gt;&lt;span&gt;[token]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;json&#x2F;read-str &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:body
&lt;&#x2F;span&gt;&lt;span&gt;                   (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http-client&#x2F;get
&lt;&#x2F;span&gt;&lt;span&gt;                     &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.strava.com&#x2F;api&#x2F;v3&#x2F;activities&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:query-params &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:access_token&lt;&#x2F;span&gt;&lt;span&gt; token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:per_page 200&lt;&#x2F;span&gt;&lt;span&gt;}}))))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&#x2F;&gt;
###2. Transformer les donn√©es
&lt;p&gt;On d√©finit les fonctions suivantes pour transformer les donn√©es :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;; Convertir les vitesses en km&#x2F;h (l&amp;#39;API Strava retourne des m&#x2F;s) :
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;meters-per-second-&amp;gt;kilometers-per-hour &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;partial&lt;&#x2F;span&gt;&lt;span&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3.6&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;; Convertir les dur√©es en minutes (l&amp;#39;API Strava API retourne des secondes) :
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defn- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;seconds-&amp;gt;minutes &lt;&#x2F;span&gt;&lt;span&gt;[s] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;; Incanter peut seulement g√©n√©rer des graphiques √† partir de donn√©es num√©riques, les dates au format ISO doivent donc √™tre converties en timestamps :
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defn- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;string-date-&amp;gt;millis &lt;&#x2F;span&gt;&lt;span&gt;[str-date]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.getTime
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clojure.instant&#x2F;read-instant-date&lt;&#x2F;span&gt;&lt;span&gt; str-date)))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ces fonctions peuvent √™tre appliqu√©es aux donn√©es brutes, en utilisant par exemple l&#x27;op√©rateur &quot;thread-last&quot; (&lt;code&gt;-&amp;gt;&amp;gt;&lt;&#x2F;code&gt;), bien pratique pour cha√Æner les appels de fonctions :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strava-activities&lt;&#x2F;span&gt;&lt;span&gt; token)
&lt;&#x2F;span&gt;&lt;span&gt;       (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;#(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update-in&lt;&#x2F;span&gt;&lt;span&gt; % [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;average_speed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] meters-per-second-&amp;gt;kilometers-per-hour))
&lt;&#x2F;span&gt;&lt;span&gt;       (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;#(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update-in&lt;&#x2F;span&gt;&lt;span&gt; % [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start_date_local&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] string-date-&amp;gt;millis))
&lt;&#x2F;span&gt;&lt;span&gt;       (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;#(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update-in&lt;&#x2F;span&gt;&lt;span&gt; % [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;elapsed_time&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] seconds-&amp;gt;minutes))
&lt;&#x2F;span&gt;&lt;span&gt;       (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;#(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update-in&lt;&#x2F;span&gt;&lt;span&gt; % [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;moving_time&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] seconds-&amp;gt;minutes)))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&#x2F;&gt;
###3. Affichage d&#x27;un graphique avec Incanter
&lt;p&gt;La derni√®re √©tape consiste √† utiliser l&#x27;une des fonctions de la librairie Incanter pour afficher un graphique. L&#x27;exemple de code suivant affiche l&#x27;√©volution de la vitesse moyenne de chaque sortie en fonction de la date de la sortie :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;display-chart &lt;&#x2F;span&gt;&lt;span&gt;[token]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;[activities (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get-activities&lt;&#x2F;span&gt;&lt;span&gt; token)]
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with-data
&lt;&#x2F;span&gt;&lt;span&gt;      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to-dataset&lt;&#x2F;span&gt;&lt;span&gt; activities)
&lt;&#x2F;span&gt;&lt;span&gt;      #_(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt; $data)
&lt;&#x2F;span&gt;&lt;span&gt;      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;view
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time-series-plot
&lt;&#x2F;span&gt;&lt;span&gt;          (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:start_date_local&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;          (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:average_speed&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:group-by &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:type&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:title &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Average speed over time&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:x-label &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:y-label &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;average speed (km&#x2F;h)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:points true
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:legend true&lt;&#x2F;span&gt;&lt;span&gt;)))))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Le graphique g√©n√©r√© :
&lt;img src=&quot;https:&#x2F;&#x2F;nicokosi.github.io&#x2F;fr&#x2F;creating-strava-charts-with-clojure-and-incanter&#x2F;chart-average-speed-over-time.png&quot; alt=&quot;Chart: average speed over time&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Le code complet, qui affiche plusieurs graphiques similaires, se trouve sur le &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nicokosi&#x2F;strava-activity-graphs&#x2F;&quot;&gt;repository GitHub strava-activity-graphs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="fr">
        <title>A la d√©couverte des API GitHub en apprenant Clojure</title>
        <published>2017-01-11T00:00:00+00:00</published>
        <updated>2017-01-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://nicokosi.github.io/fr/discover-github-apis-with-clojure/"/>
        <id>https://nicokosi.github.io/fr/discover-github-apis-with-clojure/</id>
        
        <content type="html" xml:base="https://nicokosi.github.io/fr/discover-github-apis-with-clojure/">&lt;h1 id=&quot;a-la-decouverte-des-api-github-en-apprenant-clojure&quot;&gt;A la d√©couverte des API GitHub en apprenant Clojure&lt;&#x2F;h1&gt;
&lt;p&gt;Il est toujours int√©ressant d&#x27;apprendre quelque chose, m√™me si √ßa ne concerne pas directement le travail quotidien. Pour citer &lt;a href=&quot;https:&#x2F;&#x2F;pragprog.com&#x2F;book&#x2F;tpp&#x2F;the-pragmatic-programmer&quot;&gt;The Pragmatic Programmer&lt;&#x2F;a&gt; (note pour moi-m√™me : relire ce livre ü§ì) :&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Invest Regularly in Your Knowledge Portfolio&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Mon dernier projet personnel &quot;pour apprendre&quot; a √©t√© de cr√©er un outil en ligne de commande, nomm√© &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nicokosi&#x2F;hubstats&quot;&gt;hubstats&lt;&#x2F;a&gt;, permettant d&#x27;afficher un r√©sum√© statistique concernant les &lt;a href=&quot;https:&#x2F;&#x2F;help.github.com&#x2F;articles&#x2F;github-glossary&#x2F;#pull-request&quot;&gt;pull requests GitHub&lt;&#x2F;a&gt;, afin d&#x27;avoir quelques m√©triques sur leur utilisation par mon √©quipe, au travail.&lt;&#x2F;p&gt;
&lt;p&gt;Ce modeste projet m&#x27;a permis de mettre en pratique le langage de programmation &lt;a href=&quot;https:&#x2F;&#x2F;clojure.org&#x2F;&quot;&gt;Clojure&lt;&#x2F;a&gt; (que je connaissais un tout petit peu), mais aussi de d√©couvrir les &lt;a href=&quot;https:&#x2F;&#x2F;developer.github.com&#x2F;v3&#x2F;&quot;&gt;API REST&lt;&#x2F;a&gt; et &lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;graphql&quot;&gt;GraphQL&lt;&#x2F;a&gt; de GitHub.&lt;&#x2F;p&gt;
&lt;p&gt;J&#x27;ai en plus eu la chance d&#x27;√©changer r√©guli√®rement avec un coll√®gue connaissant bien Clojure. Ce fut appr√©ciable et motivant, merci J√©r√¥me aka &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jprudent&quot;&gt;@jprudent&lt;&#x2F;a&gt; !&lt;&#x2F;p&gt;
&lt;br&#x2F;&gt;
## A quoi √ßa sert, _hubstats_ ?
&lt;p&gt;&lt;em&gt;hubstats&lt;&#x2F;em&gt; est un outil en ligne de commandes qui permet de conna√Ætre, pour un &lt;a href=&quot;https:&#x2F;&#x2F;help.github.com&#x2F;articles&#x2F;github-glossary&#x2F;#repository&quot;&gt;repository GitHub&lt;&#x2F;a&gt; donn√©, le nombre de pull requests ouvertes &#x2F; comment√©es &#x2F; merg√©es par auteur sur une p√©riode donn√©e (derni√®re semaine, deux derni√®res semaines, depuis une date donn√©e etc.).&lt;&#x2F;p&gt;
&lt;p&gt;Voici un exemple de rapport fourni par &lt;em&gt;hubstats&lt;&#x2F;em&gt; :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lein&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --organization&lt;&#x2F;span&gt;&lt;span&gt; softwarevidal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --repository&lt;&#x2F;span&gt;&lt;span&gt; arthur&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --token &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;token
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pull&lt;&#x2F;span&gt;&lt;span&gt; requests for softwarevidal&#x2F;arthur -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;since&lt;&#x2F;span&gt;&lt;span&gt; 1 week(s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt; opened &#x2F; 56 commented &#x2F; 5 closed
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opened&lt;&#x2F;span&gt;&lt;span&gt; per author: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cmahalin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 5, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;jcgay&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 2, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AElMehdiVidal&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 2}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;commented&lt;&#x2F;span&gt;&lt;span&gt; per author: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vidal-rm&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 30, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;jcgay&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 17, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cmahalin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 9}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;closed&lt;&#x2F;span&gt;&lt;span&gt; per author: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cmahalin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 2, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AElMehdiVidal&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 2, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;jprudent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 1}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&#x2F;&gt;
## Comment √ßa marche ?
&lt;p&gt;J&#x27;ai choisi d&#x27;utiliser Clojure, un langage tr√®s diff√©rent de Java que j&#x27;utilise au quotidien.
Les particularit√©s suivantes ont notamment retenu mon attention :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;d√©veloppement dynamique et interactif : code plus simple, notamment pour un petit outil &quot;interne&quot; ; le &lt;a href=&quot;https:&#x2F;&#x2F;clojure.org&#x2F;about&#x2F;dynamic#_the_repl&quot;&gt;REPL&lt;&#x2F;a&gt; est un outil de base et son utilisation est particuli√®rement adapt√©e pour un projet de &quot;d√©couverte&quot;&lt;&#x2F;li&gt;
&lt;li&gt;programmation fonctionnelle : l&#x27;approche fonctionnelle, bien qu&#x27;encourag√©e dans les langages &quot;mainstream&quot; tel Java, est obligatoire en Clojure. Les fonctions sont reines (&quot;&lt;em&gt;first-class citizen&lt;&#x2F;em&gt;&quot;), l&#x27;immutabilit√© et la r√©cursivit√© sont de mise.&lt;&#x2F;li&gt;
&lt;li&gt;Lisp : Clojure √©tant un Lisp, le code s&#x27;√©crit un peu diff√©remment : il s&#x27;apparente √† de la donn√©e et peut se transformer facilement via des commandes de type &lt;a href=&quot;https:&#x2F;&#x2F;www.emacswiki.org&#x2F;emacs&#x2F;ParEdit&quot;&gt;paredit&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;simplicit√© : Clojure est un langage simple dont la philosophie est d&#x27;utiliser des petites librairies plut√¥t que des gros frameworks.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Se r√©f√©rer √† &lt;a href=&quot;https:&#x2F;&#x2F;clojure.org&#x2F;about&#x2F;rationale&quot;&gt;Clojure Rationale&lt;&#x2F;a&gt; pour plus d&#x27;informations sur les apports de Clojure.&lt;&#x2F;p&gt;
&lt;p&gt;Mon environnement de d√©veloppement a √©t√© :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;idea&#x2F;&quot;&gt;IntelliJ IDEA&lt;&#x2F;a&gt; avec le &lt;a href=&quot;https:&#x2F;&#x2F;cursive-ide.com&#x2F;&quot;&gt;plugin Cursive&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cursive-ide.com&#x2F;userguide&#x2F;paredit.html&quot;&gt;mode &lt;em&gt;paredit&lt;&#x2F;em&gt; de Cursive&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leiningen.org&#x2F;&quot;&gt;Leiningen&lt;&#x2F;a&gt; comme outil de build&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;travis-ci.org&#x2F;&quot;&gt;Travis CI&lt;&#x2F;a&gt; pour l&#x27;int√©gration continue&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&#x2F;&gt;
## Et alors ?
&lt;p&gt;Ce que j&#x27;ai aim√© :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;cet apart√© qui m&#x27;a chang√© de mes &quot;habitudes en Java&quot;&lt;&#x2F;li&gt;
&lt;li&gt;l&#x27;utilisation de &lt;em&gt;paredit&lt;&#x2F;em&gt; pour manipuler son code (cr√©er, d√©placer ou supprimer du code) est un peu d√©routante au d√©but mais tr√®s plaisante ensuite&lt;&#x2F;li&gt;
&lt;li&gt;l&#x27;utilisation du REPL qui m&#x27;a servi :
&lt;ul&gt;
&lt;li&gt;de &quot;brouillon&quot; pour √©crire mon code&lt;&#x2F;li&gt;
&lt;li&gt;pour diagnostiquer et corriger des bug&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;les tests unitaires faciles √† √©crire (par exemple, la macro &lt;a href=&quot;https:&#x2F;&#x2F;clojuredocs.org&#x2F;clojure.core&#x2F;with-redefs&quot;&gt;&lt;code&gt;with-redefs&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; peut √™tre utilis√©e pour &quot;mocker&quot; des functions)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Ce que j&#x27;ai moins aim√© :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;la d√©couverte de certaines erreurs √† l&#x27;ex√©cution, sans comprendre directement la cause de l&#x27;erreur (du genre : stack trace obscure)&lt;&#x2F;li&gt;
&lt;li&gt;la documentation int√©gr√©e dans le langage ne contient pas assez d&#x27;exemples √† mon go√ªt. J&#x27;ai d√ª souvent avoir recourt √† internet et notamment √† &lt;a href=&quot;https:&#x2F;&#x2F;clojuredocs.org&#x2F;&quot;&gt;Clojure Docs&lt;&#x2F;a&gt; o√π les exemples sont nombreux et utiles.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&#x2F;&gt;
## Et ensuite ?
&lt;p&gt;Cet projet m&#x27;a donn√© envie d&#x27;explorer d&#x27;autres pistes :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;utiliser les API &lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;graphql&quot;&gt;GraphQL de GitHub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;transformer la ligne de commande &lt;em&gt;hubstats&lt;&#x2F;em&gt; en application web (via &lt;a href=&quot;https:&#x2F;&#x2F;clojurescript.org&#x2F;&quot;&gt;ClojureScript&lt;&#x2F;a&gt; ?)&lt;&#x2F;li&gt;
&lt;li&gt;faire un autre outil en ligne de commande&lt;&#x2F;li&gt;
&lt;li&gt;essayer un autre langage (par exemple : &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;&quot;&gt;Go&lt;&#x2F;a&gt; ou &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt;)
[mise √† jour, 2024-12-30 : le lien GitHub GraphQL, √©tant cass√©, a √©t√© mis √† jour]&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;La suite au prochain √©pisode ! üòâ&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="fr">
        <title>Jouons avec le pattern matching en Haskell</title>
        <published>2016-09-27T00:00:00+00:00</published>
        <updated>2016-09-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://nicokosi.github.io/fr/haskell-pattern-matching/"/>
        <id>https://nicokosi.github.io/fr/haskell-pattern-matching/</id>
        
        <content type="html" xml:base="https://nicokosi.github.io/fr/haskell-pattern-matching/">&lt;h1 id=&quot;jouons-avec-le-pattern-matching-en-haskell&quot;&gt;Jouons avec le pattern matching en Haskell&lt;&#x2F;h1&gt;
&lt;p&gt;D√©couvrons le pattern matching en Haskell en reprenant l&#x27;exemple des cartes √† jouer utilis√© dans l&#x27;article &lt;a href=&quot;https:&#x2F;&#x2F;nicokosi.github.io&#x2F;scala-pattern-matching.html&quot;&gt;&quot;Jouons avec le pattern matching en Scala&quot;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&#x2F;&gt;
## Pr√©ambule : cr√©ation d&#x27;une √©num√©ration
&lt;p&gt;Codons notre √©num√©ration correspondant √† nos quatre enseignes (carreau, c≈ìur, pique et tr√®fle) :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Enseigne &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Carreau &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Coeur &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Pique &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Tr√®fle
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;deriving&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Show&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nous venons de cr√©er notre propre type (&lt;em&gt;data type&lt;&#x2F;em&gt;) qui :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a quatre constructeurs (&lt;em&gt;value constructors&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;h√©rite des classes de base :
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Eq&lt;&#x2F;code&gt; pour impl√©menter l&#x27;√©galit√© entre deux valeurs&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Enum&lt;&#x2F;code&gt; pour que les valeurs sont finies et ordonn√©es (&lt;em&gt;sequentially ordered types&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Show&lt;&#x2F;code&gt; pour avoir une repr√©sentation sous forme de cha√Æne de caract√®res, ce qui peut √™tre utile pour d√©bugguer ou pour √©valuer interactivement du code via le REPL.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Utilisons maintenant &lt;code&gt;ghci&lt;&#x2F;code&gt; (&lt;em&gt;Glascow Haskell Compiler Interactive environment&lt;&#x2F;em&gt;), le REPL d&#x27;Haskell, pour interagir avec cette √©num√©ration :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Main&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Coeur &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Coeur
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Main&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; succ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Coeur
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Pique
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&#x2F;&gt;
&lt;h2 id=&quot;exemples-de-pattern-matching&quot;&gt;Exemples de pattern matching&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;premier-exemple-basique&quot;&gt;Premier exemple basique&lt;&#x2F;h3&gt;
&lt;p&gt;La fonction suivante retourne le symbole d&#x27;une enseigne :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;symbole &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Enseigne -&amp;gt; String
&lt;&#x2F;span&gt;&lt;span&gt;symbole enseigne =
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; enseigne &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;of
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Carreau &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;‚ô¶&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Coeur &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;‚ô•&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Pique &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;‚ô†&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Tr√®fle &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;‚ô£&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Exemple d&#x27;appel :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Main&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; putStrLn $ symbole $ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Coeur
&lt;&#x2F;span&gt;&lt;span&gt;‚ô•
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notons que :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;L&#x27;op√©rateur &lt;code&gt;$&lt;&#x2F;code&gt; nous permet de cha√Æner nos fonctions, plut√¥t que de les imbriquer dans des parenth√®ses (&lt;code&gt;putStrLn(symbole(Coeur))&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;la fonction &lt;code&gt;putStrLn&lt;&#x2F;code&gt; permet d&#x27;afficher des caract√®res Unicode, √† l&#x27;inverse de la fonction standard &lt;code&gt;show&lt;&#x2F;code&gt; qui ne retourne que des cha√Ænes ASCII. üòé&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&#x2F;&gt;
Remarque : le compilateur sait d√©tecter un pattern matching non exhaustif. Par exemple, le code suivant :
```haskell
symbole :: Enseigne -&gt; String
symbole enseigne = case enseigne of
    Carreau -&gt;&quot;‚ô¶&quot;
```
g√©n√®re un avertissement de compilation :
```haskell
warning: [-Wincomplete-patterns]
    Pattern match(es) are non-exhaustive
    In a case alternative:
        Patterns not matched:
            Coeur
            Pique
            Tr√®fle
```
Et l&#x27;appel de cette fonction g√©n√©re une exception :
```haskell
*Main&gt; symbole Coeur
&quot;*** Exception: test.hs:(5,20)-(6,17): Non-exhaustive patterns in case
```
&lt;br&#x2F;&gt;
&lt;h3 id=&quot;deuxieme-exemple-partage-d-expression-via-un-bloc-where&quot;&gt;Deuxi√®me exemple, partage d&#x27;expression via un bloc &#x27;where&#x27;&lt;&#x2F;h3&gt;
&lt;p&gt;Autre exemple, impl√©mentons une fonction &lt;code&gt;couleur&lt;&#x2F;code&gt; qui retourne la couleur d&#x27;une enseigne (cha√Æne de caract√®res &quot;rouge&quot; ou &quot;noir&quot;) :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;couleur &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Enseigne -&amp;gt; String
&lt;&#x2F;span&gt;&lt;span&gt;couleur enseigne = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; enseigne &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;of
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Carreau &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; rouge
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Coeur &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; rouge
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Pique &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; noir
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Tr√®fle &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; noir
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;      rouge = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rouge&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      noir = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;noir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Exemple d&#x27;appel :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;*Main&amp;gt; couleur(Coeur)
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;rouge&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nous avons ici utilis√© le mot-cl√© &lt;code&gt;where&lt;&#x2F;code&gt; qui nous permet de partager des expressions.
&lt;br&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;troisieme-exemple-destructuration&quot;&gt;Troisi√®me exemple, d√©structuration&lt;&#x2F;h3&gt;
&lt;p&gt;D√©finissons notre propre type &lt;code&gt;Carte&lt;&#x2F;code&gt; combinant un rang (1, 2, 3, ..., valet, dame, roi) et une enseigne :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Rang &lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;R1 &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;R2 &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;R3 &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;R4 &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;R5 &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;R6 &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;R7 &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;R8 &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;R9 &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;R10 &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Valet &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Dame &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Roi
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;deriving&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Ord&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Show&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Carte &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Carte&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;rang &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Rang&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;enseigne &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Enseigne
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;deriving&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Show&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Le type &lt;code&gt;Carte&lt;&#x2F;code&gt; utilise la syntaxe &lt;em&gt;record&lt;&#x2F;em&gt; permettant de nommer les champs.&lt;&#x2F;p&gt;
&lt;p&gt;Nous pouvons ainsi utiliser le pattern matching pour &quot;d√©structurer&quot; une carte en filtrant les champs. Par exemple, la fonction suivante permet de d√©terminer si deux cartes, associ√©es par un &lt;em&gt;tuple&lt;&#x2F;em&gt;, sont de m√™me enseigne :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;m√™meEnseigne :: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Carte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Carte&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Bool
&lt;&#x2F;span&gt;&lt;span&gt;m√™meEnseigne ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Carte&lt;&#x2F;span&gt;&lt;span&gt; _ enseigne1), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Carte&lt;&#x2F;span&gt;&lt;span&gt; _ enseigne2)) =
&lt;&#x2F;span&gt;&lt;span&gt;  enseigne1 == enseigne2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Exemples d&#x27;appel :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;*Main&amp;gt; :{
&lt;&#x2F;span&gt;&lt;span&gt;*Main| m√™meEnseigne (
&lt;&#x2F;span&gt;&lt;span&gt;*Main|     Carte {rang=R1, enseigne=Carreau},
&lt;&#x2F;span&gt;&lt;span&gt;*Main|     Carte {rang=R1, enseigne=Coeur} )
&lt;&#x2F;span&gt;&lt;span&gt;*Main| :}
&lt;&#x2F;span&gt;&lt;span&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;*Main&amp;gt; :{
&lt;&#x2F;span&gt;&lt;span&gt;*Main| m√™meEnseigne (
&lt;&#x2F;span&gt;&lt;span&gt;*Main|     Carte {rang=Valet, enseigne=Coeur},
&lt;&#x2F;span&gt;&lt;span&gt;*Main|     Carte {rang=R1, enseigne=Coeur} )
&lt;&#x2F;span&gt;&lt;span&gt;*Main| :}
&lt;&#x2F;span&gt;&lt;span&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Les rangs, que l&#x27;on n&#x27;utilise pas dans la fonction, ont √©t√© filtr√©s via le caract√®re &lt;em&gt;wild-card&lt;&#x2F;em&gt; (&lt;code&gt;_&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Et voil√† ! ü§ì&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="fr">
        <title>Jouons avec le pattern matching en Scala</title>
        <published>2016-09-14T00:00:00+00:00</published>
        <updated>2016-09-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://nicokosi.github.io/fr/scala-pattern-matching/"/>
        <id>https://nicokosi.github.io/fr/scala-pattern-matching/</id>
        
        <content type="html" xml:base="https://nicokosi.github.io/fr/scala-pattern-matching/">&lt;h1 id=&quot;jouons-avec-le-pattern-matching-en-scala&quot;&gt;Jouons avec le pattern matching en Scala&lt;&#x2F;h1&gt;
&lt;p&gt;Le pattern matching est une technique puissante permettant de filtrer et de tester la valeur de variables. Le but de cet article est d‚Äôillustrer par l&#x27;exemple le pattern matching en Scala.&lt;&#x2F;p&gt;
&lt;p&gt;Supposons que nous voulions cr√©er une fonction retournant la couleur (noir &#x2F; rouge) d&#x27;une enseigne d&#x27;une carte √† jouer (les quatre enseignes du jeu fran√ßais √©tant : tr√®fle, c≈ìur, carreau et pique).&lt;&#x2F;p&gt;
&lt;p&gt;Notes : dans le code ci-dessous, les commentaires se trouvant √† la fin de chaque ligne correspondent √† la sortie standard de la console ; j&#x27;ai utilis√© un &lt;a href=&quot;https:&#x2F;&#x2F;confluence.jetbrains.com&#x2F;display&#x2F;IntelliJIDEA&#x2F;Working+with+Scala+Worksheet&quot;&gt;worksheet IntelliJ IDEA&lt;&#x2F;a&gt; pour coder interactivement cet exemple, mais on peut bien s√ªr utiliser la console Scala.&lt;&#x2F;p&gt;
&lt;br&#x2F;&gt;
## 1√®re √©tape : cr√©ation d&#x27;une simple classe
&lt;p&gt;Commen√ßons par cr√©er une classe immuable repr√©sentant l&#x27;enseigne &quot;tr√®fle&quot; :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; Tr√®fle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;symbole &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;‚ô£&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;libell√© &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tr√®fle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tr√®fle&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Tr√®fle &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Tr√®fle&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;tr√®fle.symbole &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ‚ô£
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notons que cette classe permet de comparer des objets par identit√© (r√©f√©rence) et non par valeur car on ne surcharge pas la m√©thode &lt;code&gt;equals&lt;&#x2F;code&gt; :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;tr√®fle.equals(tr√®fle) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; true
&lt;&#x2F;span&gt;&lt;span&gt;tr√®fle == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Tr√®fle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; false
&lt;&#x2F;span&gt;&lt;span&gt;tr√®fle.eq(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Tr√®fle&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; false
&lt;&#x2F;span&gt;&lt;span&gt;tr√®fle.equals(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Tr√®fle&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; false
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;De m√™me, les m√©thodes &lt;code&gt;hashCode&lt;&#x2F;code&gt;, &lt;code&gt;toString&lt;&#x2F;code&gt; sont celles par d√©faut :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;tr√®fle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Tr√®fle@1ac88f64
&lt;&#x2F;span&gt;&lt;span&gt;tr√®fle.hashCode() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 123717365
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Tr√®fle&lt;&#x2F;span&gt;&lt;span&gt;().hashCode() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 1323753063
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&#x2F;&gt;
## 2√®me √©tape : cr√©ation d&#x27;une case class
&lt;p&gt;La cr√©ation d&#x27;une &lt;code&gt;case class&lt;&#x2F;code&gt; permet :&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;d&#x27;auto-impl√©menter les m√©thodes &lt;code&gt;equals&lt;&#x2F;code&gt;, &lt;code&gt;hashCode&lt;&#x2F;code&gt; et &lt;code&gt;toString&lt;&#x2F;code&gt; ;&lt;&#x2F;li&gt;
&lt;li&gt;de b√©n√©ficier de deux m√©thodes utiles au pattern matching : un &quot;constructeur&quot;, la m√©thode &lt;code&gt;apply&lt;&#x2F;code&gt;, et un &quot;d√©-constructeur&quot;, la m√©thode &lt;code&gt;unapply&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; Enseigne&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;symbole&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;libell√©&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nous avons un constructeur &quot;gratuit&quot;, la m√©thode &lt;code&gt;apply&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Enseigne(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;‚ô£&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tr√®fle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Enseigne(‚ô£,tr√®fle)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nous avons √©galement une impl√©mentation &quot;gratuite&quot;, bas√©e sur les champs, des m√©thodes &lt;code&gt;equals&lt;&#x2F;code&gt;, &lt;code&gt;hashCode&lt;&#x2F;code&gt; et &lt;code&gt;toString&lt;&#x2F;code&gt; :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Enseigne(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;‚ô£&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tr√®fle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).symbole &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ‚ô£
&lt;&#x2F;span&gt;&lt;span&gt;Enseigne(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;‚ô£&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tr√®fle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) == Enseigne(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;‚ô£&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tr√®fle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; true
&lt;&#x2F;span&gt;&lt;span&gt;Enseigne(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;‚ô£&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tr√®fle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).equals(Enseigne(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;‚ô£&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tr√®fle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; true
&lt;&#x2F;span&gt;&lt;span&gt;Enseigne(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;‚ô£&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tr√®fle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).eq(Enseigne(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;‚ô£&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tr√®fle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; false
&lt;&#x2F;span&gt;&lt;span&gt;Enseigne(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;‚ô£&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tr√®fle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).hashCode() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 841520215
&lt;&#x2F;span&gt;&lt;span&gt;Enseigne(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;‚ô£&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tr√®fle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).hashCode() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 841520215
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&#x2F;&gt;
## Etape &quot;bonus&quot; : cr√©ation d&#x27;une √©num√©ration
&lt;p&gt;Puisque nous avons quatre enseignes, nous pouvons cr√©er une √©num√©ration. Ca ne servira pas directement √† impl√©menter notre exemple final mais l&#x27;exemple s&#x27;y pr√™te bien.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; Enseignes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TREFLE &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Enseigne(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;‚ô£&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tr√®fle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CARREAU &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Enseigne(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;‚ô¶&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;carreau&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;COEUR &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Enseigne(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;‚ô•&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;coeur&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PIQUE &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Enseigne(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;‚ô†&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pique&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;List(CARREAU, COEUR, PIQUE, TREFLE)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;Enseignes.TREFLE != Enseignes.CARREAU &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; true
&lt;&#x2F;span&gt;&lt;span&gt;Enseignes.values &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; List[Enseigne] = List(Enseigne(‚ô¶,carreau), Enseigne(‚ô•,coeur), Enseigne(‚ô†,pique), Enseigne(‚ô£,tr√®fle))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;br&#x2F;&gt;
## Derni√®re √©tape : pattern matchons !
&lt;h3 id=&quot;premier-exemple&quot;&gt;Premier exemple&lt;&#x2F;h3&gt;
&lt;p&gt;Un premier exemple de pattern matching, utilis√© dans une fonction qui retourne la couleur de l&#x27;enseigne :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;indiquerJusteLaCouleur&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cardSuite&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enseigne&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;= cardSuite &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Enseignes.TREFLE | Enseignes.PIQUE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;noir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Enseignes.CARREAU | Enseignes.COEUR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rouge&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;aucune&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;indiquerJusteLaCouleur(Enseignes.PIQUE) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; noir
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ce premier exemple met en avant :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;la notation &lt;code&gt;|&lt;&#x2F;code&gt; (&lt;em&gt;disjunction&lt;&#x2F;em&gt;) permettant de regrouper plusieurs cas ;&lt;&#x2F;li&gt;
&lt;li&gt;la notation &lt;code&gt;_&lt;&#x2F;code&gt; (&lt;em&gt;wildcard&lt;&#x2F;em&gt;) pour g√©rer les autres cas.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;deuxieme-exemple&quot;&gt;Deuxi√®me exemple&lt;&#x2F;h3&gt;
&lt;p&gt;Voici un deuxi√®me exemple montrant comment r√©cup√©rer s√©lectivement certains champs (ici, le libell√© de l&#x27;enseigne) en &quot;d√©-structurant&quot; notre instance de &lt;code&gt;case class&lt;&#x2F;code&gt;, via la m√©thode &lt;code&gt;unapply&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;d√©crireLaCouleur&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enseigne&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enseigne&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;= enseigne &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Enseigne(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;libell√©&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$libell√©&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; is ${&lt;&#x2F;span&gt;&lt;span&gt;indiquerJusteLaCouleur(enseigne)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;d√©crireLaCouleur(Enseignes.PIQUE) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; pique est noir
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Et voil√† ! ü§ì&lt;&#x2F;p&gt;
&lt;p&gt;PS : merci √† J√©r√¥me Prudent pour ses tuyaux en Scala et ses avis √©clair√©s.
J√©r√¥me est contributeur au &lt;a href=&quot;http:&#x2F;&#x2F;www.arolla.fr&#x2F;blog&quot;&gt;blog d&#x27;Arolla&lt;&#x2F;a&gt; (&lt;a href=&quot;http:&#x2F;&#x2F;www.arolla.fr&#x2F;blog&#x2F;author&#x2F;jerome-prudent&#x2F;&quot;&gt;lien direct vers ses articles&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="fr">
        <title>Versionner sa configuration syst√®me via des &quot;dotfiles&quot;</title>
        <published>2016-08-17T00:00:00+00:00</published>
        <updated>2016-08-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://nicokosi.github.io/fr/dotfiles/"/>
        <id>https://nicokosi.github.io/fr/dotfiles/</id>
        
        <content type="html" xml:base="https://nicokosi.github.io/fr/dotfiles/">&lt;h1 id=&quot;versionner-sa-configuration-systeme-via-des-dotfiles&quot;&gt;Versionner sa configuration syst√®me via des &quot;dotfiles&quot;&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;introduction-la-puissance-du-shell-avec-ou-sans-maitrise&quot;&gt;Introduction : la puissance du shell, avec ou sans ma√Ætrise ?&lt;&#x2F;h2&gt;
&lt;p&gt;Cela fait environ deux ans que je d√©veloppe sur un poste &quot;*nix&quot; (Linux et Mac) apr√®s avoir d√©velopp√© de nombreuses ann√©es sur un poste Windows. La puissance du shell est ind√©niable : combiner des lignes de commandes simples, b√©n√©ficier de l&#x27;historique des commandes lanc√©es, etc. Pourquoi ne pas en profiter pour ma√Ætriser davantage son syst√®me en &lt;strong&gt;versionnant sa configuration&lt;&#x2F;strong&gt; ?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;presentation-dotfiles-quezako&quot;&gt;Pr√©sentation : Dotfiles, quezako ?&lt;&#x2F;h2&gt;
&lt;p&gt;Pour un syst√®me *nix (Linux, Mac, etc.), la configuration du shell et des applications est g√©n√©ralement centralis√©e dans les &quot;dotfiles&quot;, des fichiers &#x2F; r√©pertoires dont le nom commence par un point (&quot;dot&quot; en anglais) et qui sont charg√©s en d√©but de session interactive ou au lancement d&#x27;applications. En utilisant un gestionnaire de sources et des liens symboliques, on peut facilement &lt;strong&gt;historiser&lt;&#x2F;strong&gt; et &lt;strong&gt;synchroniser&lt;&#x2F;strong&gt; l&#x27;√©volution de ces dotfiles afin de :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;personnaliser le syst√®me d&#x27;exploitation&lt;&#x2F;strong&gt;  : options d&#x27;affichage (exemple : choisir de masquer automatiquement la barre des applications), audio, etc.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;personnaliser son shell&lt;&#x2F;strong&gt; :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;positionnement de variables d&#x27;environnement (exemples : &lt;code&gt;PATH&lt;&#x2F;code&gt;, &lt;code&gt;JAVA_HOME&lt;&#x2F;code&gt;, &lt;code&gt;MVN_OPTIONS&lt;&#x2F;code&gt; etc.)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;cr√©ation d&#x27;alias pour les commandes fr√©quemment utilis√©es et&#x2F;ou dures √† m√©moriser (exemple : &lt;code&gt;alias mcist=&quot;mvn clean install -DskipTests&quot;&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;utilisation d&#x27;un shell &quot;sur-vitamin√©&quot; du type &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;robbyrussell&#x2F;oh-my-zsh&quot;&gt;Oh My Zsh&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;g√©r√©r les applications install√©es&lt;&#x2F;strong&gt;, √† condition d&#x27;utiliser un gestionnaire de paquets du type &lt;code&gt;homebrew&lt;&#x2F;code&gt; (ou &lt;code&gt;apt&lt;&#x2F;code&gt;, &lt;code&gt;OneGet&lt;&#x2F;code&gt; etc.).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;comment-un-exemple-d-utilisation-du-mini-framework-holman-dotfiles&quot;&gt;Comment ? Un exemple d&#x27;utilisation du mini-framework &quot;holman&#x2F;dotfiles&quot;&lt;&#x2F;h2&gt;
&lt;p&gt;On peut cr√©er son propre environnement ou bien utiliser un framework &quot;dotfiles&quot; pr√™t √† l&#x27;emploi car il existe de nombreux frameworks &quot;dotfiles&quot;, en voici une liste non-exhaustive : &lt;a href=&quot;https:&#x2F;&#x2F;dotfiles.github.io&#x2F;&quot;&gt;https:&#x2F;&#x2F;dotfiles.github.io&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;J&#x27;ai pour ma part utilis√© &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;holman&#x2F;dotfiles&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;holman&#x2F;dotfiles&lt;&#x2F;a&gt; qui permet de g√©rer sa configuration &lt;code&gt;ZSH&lt;&#x2F;code&gt; en proposant les fonctionnalit√©s suivantes :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;chargement automatique des fichiers nomm√©s &lt;code&gt;*.zsh&lt;&#x2F;code&gt;, quel que soit leur r√©pertoire, favorisant ainsi une structure th√©matique. Par exemple, on peut distinguer la configuration du compilateur Java, dans le script &lt;code&gt;java&#x2F;env.zsh&lt;&#x2F;code&gt;, de la configuration du compilateur Go, dans le script &lt;code&gt;golang&#x2F;env.zsh&lt;&#x2F;code&gt;. Cette approche th√©matique remplace avantageusement l&#x27;utilisation d&#x27;un script monolithique.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;cr√©ation de liens symboliques (&quot;symlinks&quot;) pointant vers les scripts de d√©marrage du shell (exemple : le fichier &lt;code&gt;$HOME&#x2F;.zshrc&lt;&#x2F;code&gt; pour le shell &lt;code&gt;ZSH&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Apr√®s avoir &quot;fork√©&quot; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;holman&#x2F;dotfiles&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;holman&#x2F;dotfiles&lt;&#x2F;a&gt;, j&#x27;ai cr√©√© deux branches :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;une pour mon ordinateur personnel sous Mac : &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nicokosi&#x2F;dotfiles&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;nicokosi&#x2F;dotfiles&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;une autre pour mon ordinateur professionnel sous Linux : &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nicokosi&#x2F;dotfiles&#x2F;tree&#x2F;vidal&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;nicokosi&#x2F;dotfiles&#x2F;tree&#x2F;vidal&lt;&#x2F;a&gt;
Ces branches me permettent d&#x27;avoir deux configurations bien distinctes m√™me si elles partagent certaines similitudes.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion-dotfiles-all-the-things&quot;&gt;Conclusion : &lt;em&gt;Dotfiles all the things&lt;&#x2F;em&gt;!&lt;&#x2F;h2&gt;
&lt;p&gt;M√™me si la mise en place et la maintenance de ses dotfiles prend du temps, l&#x27;investissement vaut le coup pour notamment :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;la r√©solution de probl√®mes&lt;&#x2F;strong&gt; (exemples : identifier ce qui a √©t√© r√©cemment modifi√©, revenir √† une configuration pr√©c√©dente, etc.) ;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;synchroniser&lt;&#x2F;strong&gt; des changements entre plusieurs machines (exemple : PC sous Linux au travail et Mac perso), chacune ayant  une configuration distincte ;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;partager&lt;&#x2F;strong&gt; sa configuration avec d&#x27;autres d√©veloppeurs (&quot;Voici le dernier r√©glage que j&#x27;ai utilis√© pour ...&quot;).
:&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;PS : merci √† Jean-Christophe Gay pour l&#x27;inspiration et les &quot;bons tuyaux&quot;. Voici son blog : &lt;a href=&quot;https:&#x2F;&#x2F;jeanchristophegay.com&#x2F;&quot;&gt;https:&#x2F;&#x2F;jeanchristophegay.com&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;[mise √† jour, 2024-12-30 : correction d&#x27;une coquille dans un des liens vers https:&#x2F;&#x2F;github.com&#x2F;holman&#x2F;dotfiles]&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
